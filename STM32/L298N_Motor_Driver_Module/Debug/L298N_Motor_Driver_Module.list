
L298N_Motor_Driver_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f50  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003114  08003114  00004114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800312c  0800312c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800312c  0800312c  0000412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003134  08003134  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003134  08003134  00004134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003138  08003138  00004138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800313c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003148  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003148  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca9e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcc  00000000  00000000  00011ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  000136a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b0  00000000  00000000  00014300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021187  00000000  00000000  00014cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e78c  00000000  00000000  00035e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd29b  00000000  00000000  000445c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011185e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003400  00000000  00000000  001118a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00114ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080030fc 	.word	0x080030fc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080030fc 	.word	0x080030fc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fb04 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f832 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f942 	bl	80007c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000540:	f000 f916 	bl	8000770 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000544:	f000 f89e 	bl	8000684 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //PB10 TIM2 CH3
 8000548:	2108      	movs	r1, #8
 800054a:	4813      	ldr	r0, [pc, #76]	@ (8000598 <main+0x68>)
 800054c:	f001 fd02 	bl	8001f54 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	4811      	ldr	r0, [pc, #68]	@ (800059c <main+0x6c>)
 8000556:	f000 fe03 	bl	8001160 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2120      	movs	r1, #32
 800055e:	480f      	ldr	r0, [pc, #60]	@ (800059c <main+0x6c>)
 8000560:	f000 fdfe 	bl	8001160 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 1500);
 8000564:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <main+0x68>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800056c:	63da      	str	r2, [r3, #60]	@ 0x3c
	  	  HAL_Delay(1000);
 800056e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000572:	f000 fb57 	bl	8000c24 <HAL_Delay>
	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2110      	movs	r1, #16
 800057a:	4808      	ldr	r0, [pc, #32]	@ (800059c <main+0x6c>)
 800057c:	f000 fdf0 	bl	8001160 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2120      	movs	r1, #32
 8000584:	4805      	ldr	r0, [pc, #20]	@ (800059c <main+0x6c>)
 8000586:	f000 fdeb 	bl	8001160 <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 800058a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800058e:	f000 fb49 	bl	8000c24 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000592:	bf00      	nop
 8000594:	e7dc      	b.n	8000550 <main+0x20>
 8000596:	bf00      	nop
 8000598:	20000028 	.word	0x20000028
 800059c:	40020400 	.word	0x40020400

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	@ 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2234      	movs	r2, #52	@ 0x34
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fd78 	bl	80030a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <SystemClock_Config+0xdc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	4a2b      	ldr	r2, [pc, #172]	@ (800067c <SystemClock_Config+0xdc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d4:	4b29      	ldr	r3, [pc, #164]	@ (800067c <SystemClock_Config+0xdc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <SystemClock_Config+0xe0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a25      	ldr	r2, [pc, #148]	@ (8000680 <SystemClock_Config+0xe0>)
 80005ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b23      	ldr	r3, [pc, #140]	@ (8000680 <SystemClock_Config+0xe0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000610:	2308      	movs	r3, #8
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000614:	23b4      	movs	r3, #180	@ 0xb4
 8000616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	4618      	mov	r0, r3
 800062a:	f001 f94d 	bl	80018c8 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000634:	f000 f94a 	bl	80008cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000638:	f000 fdac 	bl	8001194 <HAL_PWREx_EnableOverDrive>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000642:	f000 f943 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2302      	movs	r3, #2
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000652:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fde5 	bl	8001234 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000670:	f000 f92c 	bl	80008cc <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3750      	adds	r7, #80	@ 0x50
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08e      	sub	sp, #56	@ 0x38
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
 80006b0:	615a      	str	r2, [r3, #20]
 80006b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b4:	4b2d      	ldr	r3, [pc, #180]	@ (800076c <MX_TIM2_Init+0xe8>)
 80006b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 80006bc:	4b2b      	ldr	r3, [pc, #172]	@ (800076c <MX_TIM2_Init+0xe8>)
 80006be:	2259      	movs	r2, #89	@ 0x59
 80006c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <MX_TIM2_Init+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80006c8:	4b28      	ldr	r3, [pc, #160]	@ (800076c <MX_TIM2_Init+0xe8>)
 80006ca:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80006ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d0:	4b26      	ldr	r3, [pc, #152]	@ (800076c <MX_TIM2_Init+0xe8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d6:	4b25      	ldr	r3, [pc, #148]	@ (800076c <MX_TIM2_Init+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006dc:	4823      	ldr	r0, [pc, #140]	@ (800076c <MX_TIM2_Init+0xe8>)
 80006de:	f001 fb91 	bl	8001e04 <HAL_TIM_Base_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006e8:	f000 f8f0 	bl	80008cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006f6:	4619      	mov	r1, r3
 80006f8:	481c      	ldr	r0, [pc, #112]	@ (800076c <MX_TIM2_Init+0xe8>)
 80006fa:	f001 fdb5 	bl	8002268 <HAL_TIM_ConfigClockSource>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000704:	f000 f8e2 	bl	80008cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000708:	4818      	ldr	r0, [pc, #96]	@ (800076c <MX_TIM2_Init+0xe8>)
 800070a:	f001 fbca 	bl	8001ea2 <HAL_TIM_PWM_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000714:	f000 f8da 	bl	80008cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4619      	mov	r1, r3
 8000726:	4811      	ldr	r0, [pc, #68]	@ (800076c <MX_TIM2_Init+0xe8>)
 8000728:	f002 f97c 	bl	8002a24 <HAL_TIMEx_MasterConfigSynchronization>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000732:	f000 f8cb 	bl	80008cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000736:	2360      	movs	r3, #96	@ 0x60
 8000738:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2208      	movs	r2, #8
 800074a:	4619      	mov	r1, r3
 800074c:	4807      	ldr	r0, [pc, #28]	@ (800076c <MX_TIM2_Init+0xe8>)
 800074e:	f001 fcc9 	bl	80020e4 <HAL_TIM_PWM_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000758:	f000 f8b8 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800075c:	4803      	ldr	r0, [pc, #12]	@ (800076c <MX_TIM2_Init+0xe8>)
 800075e:	f000 f903 	bl	8000968 <HAL_TIM_MspPostInit>

}
 8000762:	bf00      	nop
 8000764:	3738      	adds	r7, #56	@ 0x38
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000028 	.word	0x20000028

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <MX_USART2_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a8:	f002 f9b8 	bl	8002b1c <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f88b 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000070 	.word	0x20000070
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b37      	ldr	r3, [pc, #220]	@ (80008bc <MX_GPIO_Init+0xf8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a36      	ldr	r2, [pc, #216]	@ (80008bc <MX_GPIO_Init+0xf8>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b34      	ldr	r3, [pc, #208]	@ (80008bc <MX_GPIO_Init+0xf8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b30      	ldr	r3, [pc, #192]	@ (80008bc <MX_GPIO_Init+0xf8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a2f      	ldr	r2, [pc, #188]	@ (80008bc <MX_GPIO_Init+0xf8>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b2d      	ldr	r3, [pc, #180]	@ (80008bc <MX_GPIO_Init+0xf8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b29      	ldr	r3, [pc, #164]	@ (80008bc <MX_GPIO_Init+0xf8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a28      	ldr	r2, [pc, #160]	@ (80008bc <MX_GPIO_Init+0xf8>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <MX_GPIO_Init+0xf8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <MX_GPIO_Init+0xf8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a21      	ldr	r2, [pc, #132]	@ (80008bc <MX_GPIO_Init+0xf8>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <MX_GPIO_Init+0xf8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	481c      	ldr	r0, [pc, #112]	@ (80008c0 <MX_GPIO_Init+0xfc>)
 8000850:	f000 fc86 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2130      	movs	r1, #48	@ 0x30
 8000858:	481a      	ldr	r0, [pc, #104]	@ (80008c4 <MX_GPIO_Init+0x100>)
 800085a:	f000 fc81 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000864:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	4814      	ldr	r0, [pc, #80]	@ (80008c8 <MX_GPIO_Init+0x104>)
 8000876:	f000 fadf 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800087a:	2320      	movs	r3, #32
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	480b      	ldr	r0, [pc, #44]	@ (80008c0 <MX_GPIO_Init+0xfc>)
 8000892:	f000 fad1 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000896:	2330      	movs	r3, #48	@ 0x30
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_GPIO_Init+0x100>)
 80008ae:	f000 fac3 	bl	8000e38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	@ 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40020400 	.word	0x40020400
 80008c8:	40020800 	.word	0x40020800

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <Error_Handler+0x8>

080008d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000924 <HAL_MspInit+0x4c>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	@ 0x40
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000916:	2007      	movs	r0, #7
 8000918:	f000 fa5a 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000938:	d10d      	bne.n	8000956 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_TIM_Base_MspInit+0x3c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	4a08      	ldr	r2, [pc, #32]	@ (8000964 <HAL_TIM_Base_MspInit+0x3c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6413      	str	r3, [r2, #64]	@ 0x40
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_TIM_Base_MspInit+0x3c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000988:	d11e      	bne.n	80009c8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <HAL_TIM_MspPostInit+0x68>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a0f      	ldr	r2, [pc, #60]	@ (80009d0 <HAL_TIM_MspPostInit+0x68>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <HAL_TIM_MspPostInit+0x68>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <HAL_TIM_MspPostInit+0x6c>)
 80009c4:	f000 fa38 	bl	8000e38 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009c8:	bf00      	nop
 80009ca:	3720      	adds	r7, #32
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400

080009d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a19      	ldr	r2, [pc, #100]	@ (8000a5c <HAL_UART_MspInit+0x84>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d12b      	bne.n	8000a52 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <HAL_UART_MspInit+0x88>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	4a17      	ldr	r2, [pc, #92]	@ (8000a60 <HAL_UART_MspInit+0x88>)
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <HAL_UART_MspInit+0x88>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <HAL_UART_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <HAL_UART_MspInit+0x88>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <HAL_UART_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a32:	230c      	movs	r3, #12
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a42:	2307      	movs	r3, #7
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <HAL_UART_MspInit+0x8c>)
 8000a4e:	f000 f9f3 	bl	8000e38 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40004400 	.word	0x40004400
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <NMI_Handler+0x4>

08000a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <MemManage_Handler+0x4>

08000a80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abe:	f000 f891 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000af0:	f7ff ffea 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af4:	480c      	ldr	r0, [pc, #48]	@ (8000b28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000af6:	490d      	ldr	r1, [pc, #52]	@ (8000b2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f002 facb 	bl	80030b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1e:	f7ff fd07 	bl	8000530 <main>
  bx  lr    
 8000b22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b30:	0800313c 	.word	0x0800313c
  ldr r2, =_sbss
 8000b34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b38:	200000bc 	.word	0x200000bc

08000b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b44:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0d      	ldr	r2, [pc, #52]	@ (8000b80 <HAL_Init+0x40>)
 8000b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b50:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <HAL_Init+0x40>)
 8000b56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	@ (8000b80 <HAL_Init+0x40>)
 8000b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 f931 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f000 f808 	bl	8000b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b74:	f7ff feb0 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023c00 	.word	0x40023c00

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b8c:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <HAL_InitTick+0x54>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <HAL_InitTick+0x58>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f93b 	bl	8000e1e <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00e      	b.n	8000bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d80a      	bhi.n	8000bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f000 f911 	bl	8000de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc4:	4a06      	ldr	r2, [pc, #24]	@ (8000be0 <HAL_InitTick+0x5c>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	20000004 	.word	0x20000004

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	200000b8 	.word	0x200000b8

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	@ (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200000b8 	.word	0x200000b8

08000c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff ffee 	bl	8000c0c <HAL_GetTick>
 8000c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	d005      	beq.n	8000c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <HAL_Delay+0x44>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4a:	bf00      	nop
 8000c4c:	f7ff ffde 	bl	8000c0c <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8f7      	bhi.n	8000c4c <HAL_Delay+0x28>
  {
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	@ (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	@ (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	@ 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	@ 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff47 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff5c 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff8e 	bl	8000d24 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffb0 	bl	8000d8c <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	@ 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	e165      	b.n	8001120 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f040 8154 	bne.w	800111a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d005      	beq.n	8000e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d130      	bne.n	8000eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	f003 0201 	and.w	r2, r3, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d017      	beq.n	8000f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d123      	bne.n	8000f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	69b9      	ldr	r1, [r7, #24]
 8000f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0203 	and.w	r2, r3, #3
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80ae 	beq.w	800111a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001138 <HAL_GPIO_Init+0x300>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	4a5c      	ldr	r2, [pc, #368]	@ (8001138 <HAL_GPIO_Init+0x300>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fce:	4b5a      	ldr	r3, [pc, #360]	@ (8001138 <HAL_GPIO_Init+0x300>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fda:	4a58      	ldr	r2, [pc, #352]	@ (800113c <HAL_GPIO_Init+0x304>)
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4f      	ldr	r2, [pc, #316]	@ (8001140 <HAL_GPIO_Init+0x308>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d025      	beq.n	8001052 <HAL_GPIO_Init+0x21a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4e      	ldr	r2, [pc, #312]	@ (8001144 <HAL_GPIO_Init+0x30c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <HAL_GPIO_Init+0x216>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4d      	ldr	r2, [pc, #308]	@ (8001148 <HAL_GPIO_Init+0x310>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x212>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4c      	ldr	r2, [pc, #304]	@ (800114c <HAL_GPIO_Init+0x314>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x20e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4b      	ldr	r2, [pc, #300]	@ (8001150 <HAL_GPIO_Init+0x318>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x20a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4a      	ldr	r2, [pc, #296]	@ (8001154 <HAL_GPIO_Init+0x31c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x206>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a49      	ldr	r2, [pc, #292]	@ (8001158 <HAL_GPIO_Init+0x320>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x202>
 8001036:	2306      	movs	r3, #6
 8001038:	e00c      	b.n	8001054 <HAL_GPIO_Init+0x21c>
 800103a:	2307      	movs	r3, #7
 800103c:	e00a      	b.n	8001054 <HAL_GPIO_Init+0x21c>
 800103e:	2305      	movs	r3, #5
 8001040:	e008      	b.n	8001054 <HAL_GPIO_Init+0x21c>
 8001042:	2304      	movs	r3, #4
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x21c>
 8001046:	2303      	movs	r3, #3
 8001048:	e004      	b.n	8001054 <HAL_GPIO_Init+0x21c>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <HAL_GPIO_Init+0x21c>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x21c>
 8001052:	2300      	movs	r3, #0
 8001054:	69fa      	ldr	r2, [r7, #28]
 8001056:	f002 0203 	and.w	r2, r2, #3
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	4093      	lsls	r3, r2
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001064:	4935      	ldr	r1, [pc, #212]	@ (800113c <HAL_GPIO_Init+0x304>)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001072:	4b3a      	ldr	r3, [pc, #232]	@ (800115c <HAL_GPIO_Init+0x324>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001096:	4a31      	ldr	r2, [pc, #196]	@ (800115c <HAL_GPIO_Init+0x324>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800109c:	4b2f      	ldr	r3, [pc, #188]	@ (800115c <HAL_GPIO_Init+0x324>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c0:	4a26      	ldr	r2, [pc, #152]	@ (800115c <HAL_GPIO_Init+0x324>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010c6:	4b25      	ldr	r3, [pc, #148]	@ (800115c <HAL_GPIO_Init+0x324>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ea:	4a1c      	ldr	r2, [pc, #112]	@ (800115c <HAL_GPIO_Init+0x324>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <HAL_GPIO_Init+0x324>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001114:	4a11      	ldr	r2, [pc, #68]	@ (800115c <HAL_GPIO_Init+0x324>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	f67f ae96 	bls.w	8000e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3724      	adds	r7, #36	@ 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40013800 	.word	0x40013800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021000 	.word	0x40021000
 8001154:	40021400 	.word	0x40021400
 8001158:	40021800 	.word	0x40021800
 800115c:	40013c00 	.word	0x40013c00

08001160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800117c:	e003      	b.n	8001186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	041a      	lsls	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	619a      	str	r2, [r3, #24]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	4b20      	ldr	r3, [pc, #128]	@ (8001224 <HAL_PWREx_EnableOverDrive+0x90>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001224 <HAL_PWREx_EnableOverDrive+0x90>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <HAL_PWREx_EnableOverDrive+0x90>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <HAL_PWREx_EnableOverDrive+0x94>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c0:	f7ff fd24 	bl	8000c0c <HAL_GetTick>
 80011c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011c6:	e009      	b.n	80011dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011c8:	f7ff fd20 	bl	8000c0c <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011d6:	d901      	bls.n	80011dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e01f      	b.n	800121c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <HAL_PWREx_EnableOverDrive+0x98>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011e8:	d1ee      	bne.n	80011c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f0:	f7ff fd0c 	bl	8000c0c <HAL_GetTick>
 80011f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011f6:	e009      	b.n	800120c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011f8:	f7ff fd08 	bl	8000c0c <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001206:	d901      	bls.n	800120c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e007      	b.n	800121c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800120c:	4b07      	ldr	r3, [pc, #28]	@ (800122c <HAL_PWREx_EnableOverDrive+0x98>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001214:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001218:	d1ee      	bne.n	80011f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	420e0040 	.word	0x420e0040
 800122c:	40007000 	.word	0x40007000
 8001230:	420e0044 	.word	0x420e0044

08001234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0cc      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001248:	4b68      	ldr	r3, [pc, #416]	@ (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 030f 	and.w	r3, r3, #15
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d90c      	bls.n	8001270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001256:	4b65      	ldr	r3, [pc, #404]	@ (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800125e:	4b63      	ldr	r3, [pc, #396]	@ (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	d001      	beq.n	8001270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0b8      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d020      	beq.n	80012be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001288:	4b59      	ldr	r3, [pc, #356]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	4a58      	ldr	r2, [pc, #352]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001292:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012a0:	4b53      	ldr	r3, [pc, #332]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	4a52      	ldr	r2, [pc, #328]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ac:	4b50      	ldr	r3, [pc, #320]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	494d      	ldr	r1, [pc, #308]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d044      	beq.n	8001354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d107      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	4b47      	ldr	r3, [pc, #284]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d119      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e07f      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d003      	beq.n	80012f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f2:	4b3f      	ldr	r3, [pc, #252]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e06f      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001302:	4b3b      	ldr	r3, [pc, #236]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e067      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001312:	4b37      	ldr	r3, [pc, #220]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f023 0203 	bic.w	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4934      	ldr	r1, [pc, #208]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001320:	4313      	orrs	r3, r2
 8001322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001324:	f7ff fc72 	bl	8000c0c <HAL_GetTick>
 8001328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132a:	e00a      	b.n	8001342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800132c:	f7ff fc6e 	bl	8000c0c <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800133a:	4293      	cmp	r3, r2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e04f      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001342:	4b2b      	ldr	r3, [pc, #172]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 020c 	and.w	r2, r3, #12
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	429a      	cmp	r2, r3
 8001352:	d1eb      	bne.n	800132c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001354:	4b25      	ldr	r3, [pc, #148]	@ (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d20c      	bcs.n	800137c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001362:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800136a:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d001      	beq.n	800137c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e032      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	d008      	beq.n	800139a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001388:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	4916      	ldr	r1, [pc, #88]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001396:	4313      	orrs	r3, r2
 8001398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d009      	beq.n	80013ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013a6:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	490e      	ldr	r1, [pc, #56]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013ba:	f000 f855 	bl	8001468 <HAL_RCC_GetSysClockFreq>
 80013be:	4602      	mov	r2, r0
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	091b      	lsrs	r3, r3, #4
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	490a      	ldr	r1, [pc, #40]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 80013cc:	5ccb      	ldrb	r3, [r1, r3]
 80013ce:	fa22 f303 	lsr.w	r3, r2, r3
 80013d2:	4a09      	ldr	r2, [pc, #36]	@ (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_RCC_ClockConfig+0x1c8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fbd2 	bl	8000b84 <HAL_InitTick>

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023c00 	.word	0x40023c00
 80013f0:	40023800 	.word	0x40023800
 80013f4:	08003114 	.word	0x08003114
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000004 	.word	0x20000004

08001400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <HAL_RCC_GetHCLKFreq+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000000 	.word	0x20000000

08001418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800141c:	f7ff fff0 	bl	8001400 <HAL_RCC_GetHCLKFreq>
 8001420:	4602      	mov	r2, r0
 8001422:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	0a9b      	lsrs	r3, r3, #10
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	4903      	ldr	r1, [pc, #12]	@ (800143c <HAL_RCC_GetPCLK1Freq+0x24>)
 800142e:	5ccb      	ldrb	r3, [r1, r3]
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001434:	4618      	mov	r0, r3
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	08003124 	.word	0x08003124

08001440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001444:	f7ff ffdc 	bl	8001400 <HAL_RCC_GetHCLKFreq>
 8001448:	4602      	mov	r2, r0
 800144a:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	0b5b      	lsrs	r3, r3, #13
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	4903      	ldr	r1, [pc, #12]	@ (8001464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001456:	5ccb      	ldrb	r3, [r1, r3]
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800145c:	4618      	mov	r0, r3
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	08003124 	.word	0x08003124

08001468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800146c:	b0ae      	sub	sp, #184	@ 0xb8
 800146e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800148e:	4bcb      	ldr	r3, [pc, #812]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b0c      	cmp	r3, #12
 8001498:	f200 8206 	bhi.w	80018a8 <HAL_RCC_GetSysClockFreq+0x440>
 800149c:	a201      	add	r2, pc, #4	@ (adr r2, 80014a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800149e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a2:	bf00      	nop
 80014a4:	080014d9 	.word	0x080014d9
 80014a8:	080018a9 	.word	0x080018a9
 80014ac:	080018a9 	.word	0x080018a9
 80014b0:	080018a9 	.word	0x080018a9
 80014b4:	080014e1 	.word	0x080014e1
 80014b8:	080018a9 	.word	0x080018a9
 80014bc:	080018a9 	.word	0x080018a9
 80014c0:	080018a9 	.word	0x080018a9
 80014c4:	080014e9 	.word	0x080014e9
 80014c8:	080018a9 	.word	0x080018a9
 80014cc:	080018a9 	.word	0x080018a9
 80014d0:	080018a9 	.word	0x080018a9
 80014d4:	080016d9 	.word	0x080016d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014d8:	4bb9      	ldr	r3, [pc, #740]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80014da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014de:	e1e7      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014e0:	4bb8      	ldr	r3, [pc, #736]	@ (80017c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014e6:	e1e3      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014e8:	4bb4      	ldr	r3, [pc, #720]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014f4:	4bb1      	ldr	r3, [pc, #708]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d071      	beq.n	80015e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001500:	4bae      	ldr	r3, [pc, #696]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	099b      	lsrs	r3, r3, #6
 8001506:	2200      	movs	r2, #0
 8001508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800150c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001510:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001518:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001522:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001526:	4622      	mov	r2, r4
 8001528:	462b      	mov	r3, r5
 800152a:	f04f 0000 	mov.w	r0, #0
 800152e:	f04f 0100 	mov.w	r1, #0
 8001532:	0159      	lsls	r1, r3, #5
 8001534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001538:	0150      	lsls	r0, r2, #5
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4621      	mov	r1, r4
 8001540:	1a51      	subs	r1, r2, r1
 8001542:	6439      	str	r1, [r7, #64]	@ 0x40
 8001544:	4629      	mov	r1, r5
 8001546:	eb63 0301 	sbc.w	r3, r3, r1
 800154a:	647b      	str	r3, [r7, #68]	@ 0x44
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001558:	4649      	mov	r1, r9
 800155a:	018b      	lsls	r3, r1, #6
 800155c:	4641      	mov	r1, r8
 800155e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001562:	4641      	mov	r1, r8
 8001564:	018a      	lsls	r2, r1, #6
 8001566:	4641      	mov	r1, r8
 8001568:	1a51      	subs	r1, r2, r1
 800156a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800156c:	4649      	mov	r1, r9
 800156e:	eb63 0301 	sbc.w	r3, r3, r1
 8001572:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001580:	4649      	mov	r1, r9
 8001582:	00cb      	lsls	r3, r1, #3
 8001584:	4641      	mov	r1, r8
 8001586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800158a:	4641      	mov	r1, r8
 800158c:	00ca      	lsls	r2, r1, #3
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	4603      	mov	r3, r0
 8001594:	4622      	mov	r2, r4
 8001596:	189b      	adds	r3, r3, r2
 8001598:	633b      	str	r3, [r7, #48]	@ 0x30
 800159a:	462b      	mov	r3, r5
 800159c:	460a      	mov	r2, r1
 800159e:	eb42 0303 	adc.w	r3, r2, r3
 80015a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80015b0:	4629      	mov	r1, r5
 80015b2:	024b      	lsls	r3, r1, #9
 80015b4:	4621      	mov	r1, r4
 80015b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015ba:	4621      	mov	r1, r4
 80015bc:	024a      	lsls	r2, r1, #9
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015c6:	2200      	movs	r2, #0
 80015c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80015d4:	f7fe fe16 	bl	8000204 <__aeabi_uldivmod>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4613      	mov	r3, r2
 80015de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015e2:	e067      	b.n	80016b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e4:	4b75      	ldr	r3, [pc, #468]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	099b      	lsrs	r3, r3, #6
 80015ea:	2200      	movs	r2, #0
 80015ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80015f0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80015f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80015fe:	2300      	movs	r3, #0
 8001600:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001602:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001606:	4622      	mov	r2, r4
 8001608:	462b      	mov	r3, r5
 800160a:	f04f 0000 	mov.w	r0, #0
 800160e:	f04f 0100 	mov.w	r1, #0
 8001612:	0159      	lsls	r1, r3, #5
 8001614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001618:	0150      	lsls	r0, r2, #5
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4621      	mov	r1, r4
 8001620:	1a51      	subs	r1, r2, r1
 8001622:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001624:	4629      	mov	r1, r5
 8001626:	eb63 0301 	sbc.w	r3, r3, r1
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001638:	4649      	mov	r1, r9
 800163a:	018b      	lsls	r3, r1, #6
 800163c:	4641      	mov	r1, r8
 800163e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001642:	4641      	mov	r1, r8
 8001644:	018a      	lsls	r2, r1, #6
 8001646:	4641      	mov	r1, r8
 8001648:	ebb2 0a01 	subs.w	sl, r2, r1
 800164c:	4649      	mov	r1, r9
 800164e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800165e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001662:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001666:	4692      	mov	sl, r2
 8001668:	469b      	mov	fp, r3
 800166a:	4623      	mov	r3, r4
 800166c:	eb1a 0303 	adds.w	r3, sl, r3
 8001670:	623b      	str	r3, [r7, #32]
 8001672:	462b      	mov	r3, r5
 8001674:	eb4b 0303 	adc.w	r3, fp, r3
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001686:	4629      	mov	r1, r5
 8001688:	028b      	lsls	r3, r1, #10
 800168a:	4621      	mov	r1, r4
 800168c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001690:	4621      	mov	r1, r4
 8001692:	028a      	lsls	r2, r1, #10
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800169c:	2200      	movs	r2, #0
 800169e:	673b      	str	r3, [r7, #112]	@ 0x70
 80016a0:	677a      	str	r2, [r7, #116]	@ 0x74
 80016a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016a6:	f7fe fdad 	bl	8000204 <__aeabi_uldivmod>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4613      	mov	r3, r2
 80016b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016b4:	4b41      	ldr	r3, [pc, #260]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	0c1b      	lsrs	r3, r3, #16
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	3301      	adds	r3, #1
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80016c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016d6:	e0eb      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d8:	4b38      	ldr	r3, [pc, #224]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016e4:	4b35      	ldr	r3, [pc, #212]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d06b      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f0:	4b32      	ldr	r3, [pc, #200]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	2200      	movs	r2, #0
 80016f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80016fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001702:	663b      	str	r3, [r7, #96]	@ 0x60
 8001704:	2300      	movs	r3, #0
 8001706:	667b      	str	r3, [r7, #100]	@ 0x64
 8001708:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800170c:	4622      	mov	r2, r4
 800170e:	462b      	mov	r3, r5
 8001710:	f04f 0000 	mov.w	r0, #0
 8001714:	f04f 0100 	mov.w	r1, #0
 8001718:	0159      	lsls	r1, r3, #5
 800171a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800171e:	0150      	lsls	r0, r2, #5
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4621      	mov	r1, r4
 8001726:	1a51      	subs	r1, r2, r1
 8001728:	61b9      	str	r1, [r7, #24]
 800172a:	4629      	mov	r1, r5
 800172c:	eb63 0301 	sbc.w	r3, r3, r1
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800173e:	4659      	mov	r1, fp
 8001740:	018b      	lsls	r3, r1, #6
 8001742:	4651      	mov	r1, sl
 8001744:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001748:	4651      	mov	r1, sl
 800174a:	018a      	lsls	r2, r1, #6
 800174c:	4651      	mov	r1, sl
 800174e:	ebb2 0801 	subs.w	r8, r2, r1
 8001752:	4659      	mov	r1, fp
 8001754:	eb63 0901 	sbc.w	r9, r3, r1
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001764:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001768:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800176c:	4690      	mov	r8, r2
 800176e:	4699      	mov	r9, r3
 8001770:	4623      	mov	r3, r4
 8001772:	eb18 0303 	adds.w	r3, r8, r3
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	462b      	mov	r3, r5
 800177a:	eb49 0303 	adc.w	r3, r9, r3
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800178c:	4629      	mov	r1, r5
 800178e:	024b      	lsls	r3, r1, #9
 8001790:	4621      	mov	r1, r4
 8001792:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001796:	4621      	mov	r1, r4
 8001798:	024a      	lsls	r2, r1, #9
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017a2:	2200      	movs	r2, #0
 80017a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80017a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017ac:	f7fe fd2a 	bl	8000204 <__aeabi_uldivmod>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4613      	mov	r3, r2
 80017b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80017ba:	e065      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x420>
 80017bc:	40023800 	.word	0x40023800
 80017c0:	00f42400 	.word	0x00f42400
 80017c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c8:	4b3d      	ldr	r3, [pc, #244]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	099b      	lsrs	r3, r3, #6
 80017ce:	2200      	movs	r2, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	4611      	mov	r1, r2
 80017d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80017da:	2300      	movs	r3, #0
 80017dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80017de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80017e2:	4642      	mov	r2, r8
 80017e4:	464b      	mov	r3, r9
 80017e6:	f04f 0000 	mov.w	r0, #0
 80017ea:	f04f 0100 	mov.w	r1, #0
 80017ee:	0159      	lsls	r1, r3, #5
 80017f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f4:	0150      	lsls	r0, r2, #5
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4641      	mov	r1, r8
 80017fc:	1a51      	subs	r1, r2, r1
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	4649      	mov	r1, r9
 8001802:	eb63 0301 	sbc.w	r3, r3, r1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001814:	4659      	mov	r1, fp
 8001816:	018b      	lsls	r3, r1, #6
 8001818:	4651      	mov	r1, sl
 800181a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800181e:	4651      	mov	r1, sl
 8001820:	018a      	lsls	r2, r1, #6
 8001822:	4651      	mov	r1, sl
 8001824:	1a54      	subs	r4, r2, r1
 8001826:	4659      	mov	r1, fp
 8001828:	eb63 0501 	sbc.w	r5, r3, r1
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	00eb      	lsls	r3, r5, #3
 8001836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800183a:	00e2      	lsls	r2, r4, #3
 800183c:	4614      	mov	r4, r2
 800183e:	461d      	mov	r5, r3
 8001840:	4643      	mov	r3, r8
 8001842:	18e3      	adds	r3, r4, r3
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	464b      	mov	r3, r9
 8001848:	eb45 0303 	adc.w	r3, r5, r3
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800185a:	4629      	mov	r1, r5
 800185c:	028b      	lsls	r3, r1, #10
 800185e:	4621      	mov	r1, r4
 8001860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001864:	4621      	mov	r1, r4
 8001866:	028a      	lsls	r2, r1, #10
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001870:	2200      	movs	r2, #0
 8001872:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001874:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001876:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800187a:	f7fe fcc3 	bl	8000204 <__aeabi_uldivmod>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4613      	mov	r3, r2
 8001884:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001888:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	0f1b      	lsrs	r3, r3, #28
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800189a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018a6:	e003      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80018aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	37b8      	adds	r7, #184	@ 0xb8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	00f42400 	.word	0x00f42400

080018c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e28d      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8083 	beq.w	80019ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018e8:	4b94      	ldr	r3, [pc, #592]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d019      	beq.n	8001928 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018f4:	4b91      	ldr	r3, [pc, #580]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 030c 	and.w	r3, r3, #12
        || \
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001900:	4b8e      	ldr	r3, [pc, #568]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001908:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800190c:	d00c      	beq.n	8001928 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001916:	2b0c      	cmp	r3, #12
 8001918:	d112      	bne.n	8001940 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800191a:	4b88      	ldr	r3, [pc, #544]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001926:	d10b      	bne.n	8001940 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	4b84      	ldr	r3, [pc, #528]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d05b      	beq.n	80019ec <HAL_RCC_OscConfig+0x124>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d157      	bne.n	80019ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e25a      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001948:	d106      	bne.n	8001958 <HAL_RCC_OscConfig+0x90>
 800194a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7b      	ldr	r2, [pc, #492]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e01d      	b.n	8001994 <HAL_RCC_OscConfig+0xcc>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0xb4>
 8001962:	4b76      	ldr	r3, [pc, #472]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a75      	ldr	r2, [pc, #468]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b73      	ldr	r3, [pc, #460]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a72      	ldr	r2, [pc, #456]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0xcc>
 800197c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a6e      	ldr	r2, [pc, #440]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b6c      	ldr	r3, [pc, #432]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6b      	ldr	r2, [pc, #428]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff f936 	bl	8000c0c <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff f932 	bl	8000c0c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	@ 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e21f      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b61      	ldr	r3, [pc, #388]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0xdc>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff f922 	bl	8000c0c <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff f91e 	bl	8000c0c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	@ 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e20b      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	4b57      	ldr	r3, [pc, #348]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x104>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d06f      	beq.n	8001ada <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019fa:	4b50      	ldr	r3, [pc, #320]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d017      	beq.n	8001a36 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a06:	4b4d      	ldr	r3, [pc, #308]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d105      	bne.n	8001a1e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a12:	4b4a      	ldr	r3, [pc, #296]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1e:	4b47      	ldr	r3, [pc, #284]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d11c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2a:	4b44      	ldr	r3, [pc, #272]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d116      	bne.n	8001a64 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	4b41      	ldr	r3, [pc, #260]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_RCC_OscConfig+0x186>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e1d3      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4937      	ldr	r1, [pc, #220]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	e03a      	b.n	8001ada <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d020      	beq.n	8001aae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a6c:	4b34      	ldr	r3, [pc, #208]	@ (8001b40 <HAL_RCC_OscConfig+0x278>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff f8cb 	bl	8000c0c <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f8c7 	bl	8000c0c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1b4      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b28      	ldr	r3, [pc, #160]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4925      	ldr	r1, [pc, #148]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
 8001aac:	e015      	b.n	8001ada <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aae:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <HAL_RCC_OscConfig+0x278>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f8aa 	bl	8000c0c <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abc:	f7ff f8a6 	bl	8000c0c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e193      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d036      	beq.n	8001b54 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d016      	beq.n	8001b1c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <HAL_RCC_OscConfig+0x27c>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff f88a 	bl	8000c0c <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff f886 	bl	8000c0c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e173      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x234>
 8001b1a:	e01b      	b.n	8001b54 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1c:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_RCC_OscConfig+0x27c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b22:	f7ff f873 	bl	8000c0c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b28:	e00e      	b.n	8001b48 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2a:	f7ff f86f 	bl	8000c0c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d907      	bls.n	8001b48 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e15c      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	42470000 	.word	0x42470000
 8001b44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	4b8a      	ldr	r3, [pc, #552]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1ea      	bne.n	8001b2a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 8097 	beq.w	8001c90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b66:	4b83      	ldr	r3, [pc, #524]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10f      	bne.n	8001b92 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	4b7f      	ldr	r3, [pc, #508]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b7c      	ldr	r3, [pc, #496]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b92:	4b79      	ldr	r3, [pc, #484]	@ (8001d78 <HAL_RCC_OscConfig+0x4b0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d118      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9e:	4b76      	ldr	r3, [pc, #472]	@ (8001d78 <HAL_RCC_OscConfig+0x4b0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a75      	ldr	r2, [pc, #468]	@ (8001d78 <HAL_RCC_OscConfig+0x4b0>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001baa:	f7ff f82f 	bl	8000c0c <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb2:	f7ff f82b 	bl	8000c0c <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e118      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc4:	4b6c      	ldr	r3, [pc, #432]	@ (8001d78 <HAL_RCC_OscConfig+0x4b0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x31e>
 8001bd8:	4b66      	ldr	r3, [pc, #408]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bdc:	4a65      	ldr	r2, [pc, #404]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be4:	e01c      	b.n	8001c20 <HAL_RCC_OscConfig+0x358>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b05      	cmp	r3, #5
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x340>
 8001bee:	4b61      	ldr	r3, [pc, #388]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf2:	4a60      	ldr	r2, [pc, #384]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bfa:	4b5e      	ldr	r3, [pc, #376]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfe:	4a5d      	ldr	r2, [pc, #372]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0x358>
 8001c08:	4b5a      	ldr	r3, [pc, #360]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c0c:	4a59      	ldr	r2, [pc, #356]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c14:	4b57      	ldr	r3, [pc, #348]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c18:	4a56      	ldr	r2, [pc, #344]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c1a:	f023 0304 	bic.w	r3, r3, #4
 8001c1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d015      	beq.n	8001c54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7fe fff0 	bl	8000c0c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c30:	f7fe ffec 	bl	8000c0c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e0d7      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c46:	4b4b      	ldr	r3, [pc, #300]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0ee      	beq.n	8001c30 <HAL_RCC_OscConfig+0x368>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7fe ffda 	bl	8000c0c <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7fe ffd6 	bl	8000c0c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e0c1      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c72:	4b40      	ldr	r3, [pc, #256]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ee      	bne.n	8001c5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c84:	4b3b      	ldr	r3, [pc, #236]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c88:	4a3a      	ldr	r2, [pc, #232]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80ad 	beq.w	8001df4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c9a:	4b36      	ldr	r3, [pc, #216]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d060      	beq.n	8001d68 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d145      	bne.n	8001d3a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cae:	4b33      	ldr	r3, [pc, #204]	@ (8001d7c <HAL_RCC_OscConfig+0x4b4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7fe ffaa 	bl	8000c0c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7fe ffa6 	bl	8000c0c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e093      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cce:	4b29      	ldr	r3, [pc, #164]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	041b      	lsls	r3, r3, #16
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d04:	071b      	lsls	r3, r3, #28
 8001d06:	491b      	ldr	r1, [pc, #108]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d7c <HAL_RCC_OscConfig+0x4b4>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7fe ff7b 	bl	8000c0c <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7fe ff77 	bl	8000c0c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e064      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x452>
 8001d38:	e05c      	b.n	8001df4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <HAL_RCC_OscConfig+0x4b4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7fe ff64 	bl	8000c0c <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe ff60 	bl	8000c0c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e04d      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x480>
 8001d66:	e045      	b.n	8001df4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e040      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d80:	4b1f      	ldr	r3, [pc, #124]	@ (8001e00 <HAL_RCC_OscConfig+0x538>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d030      	beq.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d129      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d122      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001db0:	4013      	ands	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001db6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d119      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d10f      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e041      	b.n	8001e9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe fd7c 	bl	8000928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3304      	adds	r3, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f000 fad8 	bl	80023f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e041      	b.n	8001f38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d106      	bne.n	8001ece <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f839 	bl	8001f40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3304      	adds	r3, #4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	f000 fa89 	bl	80023f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <HAL_TIM_PWM_Start+0x24>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	bf14      	ite	ne
 8001f70:	2301      	movne	r3, #1
 8001f72:	2300      	moveq	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	e022      	b.n	8001fbe <HAL_TIM_PWM_Start+0x6a>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d109      	bne.n	8001f92 <HAL_TIM_PWM_Start+0x3e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	bf14      	ite	ne
 8001f8a:	2301      	movne	r3, #1
 8001f8c:	2300      	moveq	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	e015      	b.n	8001fbe <HAL_TIM_PWM_Start+0x6a>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d109      	bne.n	8001fac <HAL_TIM_PWM_Start+0x58>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	bf14      	ite	ne
 8001fa4:	2301      	movne	r3, #1
 8001fa6:	2300      	moveq	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	e008      	b.n	8001fbe <HAL_TIM_PWM_Start+0x6a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e07c      	b.n	80020c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d104      	bne.n	8001fd6 <HAL_TIM_PWM_Start+0x82>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fd4:	e013      	b.n	8001ffe <HAL_TIM_PWM_Start+0xaa>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d104      	bne.n	8001fe6 <HAL_TIM_PWM_Start+0x92>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fe4:	e00b      	b.n	8001ffe <HAL_TIM_PWM_Start+0xaa>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d104      	bne.n	8001ff6 <HAL_TIM_PWM_Start+0xa2>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ff4:	e003      	b.n	8001ffe <HAL_TIM_PWM_Start+0xaa>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2201      	movs	r2, #1
 8002004:	6839      	ldr	r1, [r7, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fce6 	bl	80029d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a2d      	ldr	r2, [pc, #180]	@ (80020c8 <HAL_TIM_PWM_Start+0x174>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d004      	beq.n	8002020 <HAL_TIM_PWM_Start+0xcc>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a2c      	ldr	r2, [pc, #176]	@ (80020cc <HAL_TIM_PWM_Start+0x178>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d101      	bne.n	8002024 <HAL_TIM_PWM_Start+0xd0>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_TIM_PWM_Start+0xd2>
 8002024:	2300      	movs	r3, #0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002038:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a22      	ldr	r2, [pc, #136]	@ (80020c8 <HAL_TIM_PWM_Start+0x174>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d022      	beq.n	800208a <HAL_TIM_PWM_Start+0x136>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800204c:	d01d      	beq.n	800208a <HAL_TIM_PWM_Start+0x136>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1f      	ldr	r2, [pc, #124]	@ (80020d0 <HAL_TIM_PWM_Start+0x17c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d018      	beq.n	800208a <HAL_TIM_PWM_Start+0x136>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1d      	ldr	r2, [pc, #116]	@ (80020d4 <HAL_TIM_PWM_Start+0x180>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_TIM_PWM_Start+0x136>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1c      	ldr	r2, [pc, #112]	@ (80020d8 <HAL_TIM_PWM_Start+0x184>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00e      	beq.n	800208a <HAL_TIM_PWM_Start+0x136>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a16      	ldr	r2, [pc, #88]	@ (80020cc <HAL_TIM_PWM_Start+0x178>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d009      	beq.n	800208a <HAL_TIM_PWM_Start+0x136>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a18      	ldr	r2, [pc, #96]	@ (80020dc <HAL_TIM_PWM_Start+0x188>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d004      	beq.n	800208a <HAL_TIM_PWM_Start+0x136>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a16      	ldr	r2, [pc, #88]	@ (80020e0 <HAL_TIM_PWM_Start+0x18c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d111      	bne.n	80020ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b06      	cmp	r3, #6
 800209a:	d010      	beq.n	80020be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ac:	e007      	b.n	80020be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0201 	orr.w	r2, r2, #1
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40010000 	.word	0x40010000
 80020cc:	40010400 	.word	0x40010400
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40000c00 	.word	0x40000c00
 80020dc:	40014000 	.word	0x40014000
 80020e0:	40001800 	.word	0x40001800

080020e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020fe:	2302      	movs	r3, #2
 8002100:	e0ae      	b.n	8002260 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b0c      	cmp	r3, #12
 800210e:	f200 809f 	bhi.w	8002250 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002112:	a201      	add	r2, pc, #4	@ (adr r2, 8002118 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	0800214d 	.word	0x0800214d
 800211c:	08002251 	.word	0x08002251
 8002120:	08002251 	.word	0x08002251
 8002124:	08002251 	.word	0x08002251
 8002128:	0800218d 	.word	0x0800218d
 800212c:	08002251 	.word	0x08002251
 8002130:	08002251 	.word	0x08002251
 8002134:	08002251 	.word	0x08002251
 8002138:	080021cf 	.word	0x080021cf
 800213c:	08002251 	.word	0x08002251
 8002140:	08002251 	.word	0x08002251
 8002144:	08002251 	.word	0x08002251
 8002148:	0800220f 	.word	0x0800220f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f9f6 	bl	8002544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0208 	orr.w	r2, r2, #8
 8002166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0204 	bic.w	r2, r2, #4
 8002176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6999      	ldr	r1, [r3, #24]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	619a      	str	r2, [r3, #24]
      break;
 800218a:	e064      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fa46 	bl	8002624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6999      	ldr	r1, [r3, #24]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	021a      	lsls	r2, r3, #8
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	619a      	str	r2, [r3, #24]
      break;
 80021cc:	e043      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fa9b 	bl	8002710 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0208 	orr.w	r2, r2, #8
 80021e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0204 	bic.w	r2, r2, #4
 80021f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69d9      	ldr	r1, [r3, #28]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	61da      	str	r2, [r3, #28]
      break;
 800220c:	e023      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 faef 	bl	80027f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69d9      	ldr	r1, [r3, #28]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	021a      	lsls	r2, r3, #8
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	61da      	str	r2, [r3, #28]
      break;
 800224e:	e002      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	75fb      	strb	r3, [r7, #23]
      break;
 8002254:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800225e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_TIM_ConfigClockSource+0x1c>
 8002280:	2302      	movs	r3, #2
 8002282:	e0b4      	b.n	80023ee <HAL_TIM_ConfigClockSource+0x186>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80022a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022bc:	d03e      	beq.n	800233c <HAL_TIM_ConfigClockSource+0xd4>
 80022be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022c2:	f200 8087 	bhi.w	80023d4 <HAL_TIM_ConfigClockSource+0x16c>
 80022c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ca:	f000 8086 	beq.w	80023da <HAL_TIM_ConfigClockSource+0x172>
 80022ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022d2:	d87f      	bhi.n	80023d4 <HAL_TIM_ConfigClockSource+0x16c>
 80022d4:	2b70      	cmp	r3, #112	@ 0x70
 80022d6:	d01a      	beq.n	800230e <HAL_TIM_ConfigClockSource+0xa6>
 80022d8:	2b70      	cmp	r3, #112	@ 0x70
 80022da:	d87b      	bhi.n	80023d4 <HAL_TIM_ConfigClockSource+0x16c>
 80022dc:	2b60      	cmp	r3, #96	@ 0x60
 80022de:	d050      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0x11a>
 80022e0:	2b60      	cmp	r3, #96	@ 0x60
 80022e2:	d877      	bhi.n	80023d4 <HAL_TIM_ConfigClockSource+0x16c>
 80022e4:	2b50      	cmp	r3, #80	@ 0x50
 80022e6:	d03c      	beq.n	8002362 <HAL_TIM_ConfigClockSource+0xfa>
 80022e8:	2b50      	cmp	r3, #80	@ 0x50
 80022ea:	d873      	bhi.n	80023d4 <HAL_TIM_ConfigClockSource+0x16c>
 80022ec:	2b40      	cmp	r3, #64	@ 0x40
 80022ee:	d058      	beq.n	80023a2 <HAL_TIM_ConfigClockSource+0x13a>
 80022f0:	2b40      	cmp	r3, #64	@ 0x40
 80022f2:	d86f      	bhi.n	80023d4 <HAL_TIM_ConfigClockSource+0x16c>
 80022f4:	2b30      	cmp	r3, #48	@ 0x30
 80022f6:	d064      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0x15a>
 80022f8:	2b30      	cmp	r3, #48	@ 0x30
 80022fa:	d86b      	bhi.n	80023d4 <HAL_TIM_ConfigClockSource+0x16c>
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d060      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002300:	2b20      	cmp	r3, #32
 8002302:	d867      	bhi.n	80023d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002304:	2b00      	cmp	r3, #0
 8002306:	d05c      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002308:	2b10      	cmp	r3, #16
 800230a:	d05a      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0x15a>
 800230c:	e062      	b.n	80023d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800231e:	f000 fb3b 	bl	8002998 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002330:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	609a      	str	r2, [r3, #8]
      break;
 800233a:	e04f      	b.n	80023dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800234c:	f000 fb24 	bl	8002998 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800235e:	609a      	str	r2, [r3, #8]
      break;
 8002360:	e03c      	b.n	80023dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800236e:	461a      	mov	r2, r3
 8002370:	f000 fa98 	bl	80028a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2150      	movs	r1, #80	@ 0x50
 800237a:	4618      	mov	r0, r3
 800237c:	f000 faf1 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 8002380:	e02c      	b.n	80023dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800238e:	461a      	mov	r2, r3
 8002390:	f000 fab7 	bl	8002902 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2160      	movs	r1, #96	@ 0x60
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fae1 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 80023a0:	e01c      	b.n	80023dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ae:	461a      	mov	r2, r3
 80023b0:	f000 fa78 	bl	80028a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2140      	movs	r1, #64	@ 0x40
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fad1 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 80023c0:	e00c      	b.n	80023dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4619      	mov	r1, r3
 80023cc:	4610      	mov	r0, r2
 80023ce:	f000 fac8 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 80023d2:	e003      	b.n	80023dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
      break;
 80023d8:	e000      	b.n	80023dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a43      	ldr	r2, [pc, #268]	@ (8002518 <TIM_Base_SetConfig+0x120>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d013      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002416:	d00f      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a40      	ldr	r2, [pc, #256]	@ (800251c <TIM_Base_SetConfig+0x124>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d00b      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3f      	ldr	r2, [pc, #252]	@ (8002520 <TIM_Base_SetConfig+0x128>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d007      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a3e      	ldr	r2, [pc, #248]	@ (8002524 <TIM_Base_SetConfig+0x12c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d003      	beq.n	8002438 <TIM_Base_SetConfig+0x40>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a3d      	ldr	r2, [pc, #244]	@ (8002528 <TIM_Base_SetConfig+0x130>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d108      	bne.n	800244a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800243e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a32      	ldr	r2, [pc, #200]	@ (8002518 <TIM_Base_SetConfig+0x120>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d02b      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002458:	d027      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a2f      	ldr	r2, [pc, #188]	@ (800251c <TIM_Base_SetConfig+0x124>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d023      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a2e      	ldr	r2, [pc, #184]	@ (8002520 <TIM_Base_SetConfig+0x128>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01f      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a2d      	ldr	r2, [pc, #180]	@ (8002524 <TIM_Base_SetConfig+0x12c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01b      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a2c      	ldr	r2, [pc, #176]	@ (8002528 <TIM_Base_SetConfig+0x130>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d017      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a2b      	ldr	r2, [pc, #172]	@ (800252c <TIM_Base_SetConfig+0x134>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a2a      	ldr	r2, [pc, #168]	@ (8002530 <TIM_Base_SetConfig+0x138>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00f      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a29      	ldr	r2, [pc, #164]	@ (8002534 <TIM_Base_SetConfig+0x13c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00b      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a28      	ldr	r2, [pc, #160]	@ (8002538 <TIM_Base_SetConfig+0x140>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d007      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a27      	ldr	r2, [pc, #156]	@ (800253c <TIM_Base_SetConfig+0x144>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d003      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a26      	ldr	r2, [pc, #152]	@ (8002540 <TIM_Base_SetConfig+0x148>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d108      	bne.n	80024bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002518 <TIM_Base_SetConfig+0x120>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d003      	beq.n	80024ea <TIM_Base_SetConfig+0xf2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a10      	ldr	r2, [pc, #64]	@ (8002528 <TIM_Base_SetConfig+0x130>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d103      	bne.n	80024f2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f043 0204 	orr.w	r2, r3, #4
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	601a      	str	r2, [r3, #0]
}
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40010000 	.word	0x40010000
 800251c:	40000400 	.word	0x40000400
 8002520:	40000800 	.word	0x40000800
 8002524:	40000c00 	.word	0x40000c00
 8002528:	40010400 	.word	0x40010400
 800252c:	40014000 	.word	0x40014000
 8002530:	40014400 	.word	0x40014400
 8002534:	40014800 	.word	0x40014800
 8002538:	40001800 	.word	0x40001800
 800253c:	40001c00 	.word	0x40001c00
 8002540:	40002000 	.word	0x40002000

08002544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f023 0201 	bic.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f023 0302 	bic.w	r3, r3, #2
 800258c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a20      	ldr	r2, [pc, #128]	@ (800261c <TIM_OC1_SetConfig+0xd8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d003      	beq.n	80025a8 <TIM_OC1_SetConfig+0x64>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002620 <TIM_OC1_SetConfig+0xdc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d10c      	bne.n	80025c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f023 0308 	bic.w	r3, r3, #8
 80025ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f023 0304 	bic.w	r3, r3, #4
 80025c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a15      	ldr	r2, [pc, #84]	@ (800261c <TIM_OC1_SetConfig+0xd8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <TIM_OC1_SetConfig+0x8e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a14      	ldr	r2, [pc, #80]	@ (8002620 <TIM_OC1_SetConfig+0xdc>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d111      	bne.n	80025f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	621a      	str	r2, [r3, #32]
}
 8002610:	bf00      	nop
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	40010000 	.word	0x40010000
 8002620:	40010400 	.word	0x40010400

08002624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f023 0210 	bic.w	r2, r3, #16
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800265a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f023 0320 	bic.w	r3, r3, #32
 800266e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a22      	ldr	r2, [pc, #136]	@ (8002708 <TIM_OC2_SetConfig+0xe4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d003      	beq.n	800268c <TIM_OC2_SetConfig+0x68>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a21      	ldr	r2, [pc, #132]	@ (800270c <TIM_OC2_SetConfig+0xe8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d10d      	bne.n	80026a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a17      	ldr	r2, [pc, #92]	@ (8002708 <TIM_OC2_SetConfig+0xe4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d003      	beq.n	80026b8 <TIM_OC2_SetConfig+0x94>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a16      	ldr	r2, [pc, #88]	@ (800270c <TIM_OC2_SetConfig+0xe8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d113      	bne.n	80026e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80026c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	621a      	str	r2, [r3, #32]
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40010000 	.word	0x40010000
 800270c:	40010400 	.word	0x40010400

08002710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800273e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0303 	bic.w	r3, r3, #3
 8002746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a21      	ldr	r2, [pc, #132]	@ (80027f0 <TIM_OC3_SetConfig+0xe0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d003      	beq.n	8002776 <TIM_OC3_SetConfig+0x66>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a20      	ldr	r2, [pc, #128]	@ (80027f4 <TIM_OC3_SetConfig+0xe4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10d      	bne.n	8002792 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800277c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a16      	ldr	r2, [pc, #88]	@ (80027f0 <TIM_OC3_SetConfig+0xe0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d003      	beq.n	80027a2 <TIM_OC3_SetConfig+0x92>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a15      	ldr	r2, [pc, #84]	@ (80027f4 <TIM_OC3_SetConfig+0xe4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d113      	bne.n	80027ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	621a      	str	r2, [r3, #32]
}
 80027e4:	bf00      	nop
 80027e6:	371c      	adds	r7, #28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	40010000 	.word	0x40010000
 80027f4:	40010400 	.word	0x40010400

080027f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800282e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	031b      	lsls	r3, r3, #12
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a12      	ldr	r2, [pc, #72]	@ (800289c <TIM_OC4_SetConfig+0xa4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d003      	beq.n	8002860 <TIM_OC4_SetConfig+0x68>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a11      	ldr	r2, [pc, #68]	@ (80028a0 <TIM_OC4_SetConfig+0xa8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d109      	bne.n	8002874 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	621a      	str	r2, [r3, #32]
}
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40010000 	.word	0x40010000
 80028a0:	40010400 	.word	0x40010400

080028a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	f023 0201 	bic.w	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f023 030a 	bic.w	r3, r3, #10
 80028e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	621a      	str	r2, [r3, #32]
}
 80028f6:	bf00      	nop
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002902:	b480      	push	{r7}
 8002904:	b087      	sub	sp, #28
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f023 0210 	bic.w	r2, r3, #16
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800292c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	031b      	lsls	r3, r3, #12
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800293e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	621a      	str	r2, [r3, #32]
}
 8002956:	bf00      	nop
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	f043 0307 	orr.w	r3, r3, #7
 8002984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	021a      	lsls	r2, r3, #8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4313      	orrs	r3, r2
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	609a      	str	r2, [r3, #8]
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2201      	movs	r2, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1a      	ldr	r2, [r3, #32]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	401a      	ands	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a1a      	ldr	r2, [r3, #32]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	431a      	orrs	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	621a      	str	r2, [r3, #32]
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e05a      	b.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a21      	ldr	r2, [pc, #132]	@ (8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d022      	beq.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a88:	d01d      	beq.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002b04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d018      	beq.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1b      	ldr	r2, [pc, #108]	@ (8002b08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a18      	ldr	r2, [pc, #96]	@ (8002b10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a17      	ldr	r2, [pc, #92]	@ (8002b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a15      	ldr	r2, [pc, #84]	@ (8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40010000 	.word	0x40010000
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40000800 	.word	0x40000800
 8002b0c:	40000c00 	.word	0x40000c00
 8002b10:	40010400 	.word	0x40010400
 8002b14:	40014000 	.word	0x40014000
 8002b18:	40001800 	.word	0x40001800

08002b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e042      	b.n	8002bb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fd ff48 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2224      	movs	r2, #36	@ 0x24
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f82b 	bl	8002bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc0:	b0c0      	sub	sp, #256	@ 0x100
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd8:	68d9      	ldr	r1, [r3, #12]
 8002bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	ea40 0301 	orr.w	r3, r0, r1
 8002be4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c14:	f021 010c 	bic.w	r1, r1, #12
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c22:	430b      	orrs	r3, r1
 8002c24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c36:	6999      	ldr	r1, [r3, #24]
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	ea40 0301 	orr.w	r3, r0, r1
 8002c42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4b8f      	ldr	r3, [pc, #572]	@ (8002e88 <UART_SetConfig+0x2cc>)
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d005      	beq.n	8002c5c <UART_SetConfig+0xa0>
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	4b8d      	ldr	r3, [pc, #564]	@ (8002e8c <UART_SetConfig+0x2d0>)
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d104      	bne.n	8002c66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c5c:	f7fe fbf0 	bl	8001440 <HAL_RCC_GetPCLK2Freq>
 8002c60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c64:	e003      	b.n	8002c6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c66:	f7fe fbd7 	bl	8001418 <HAL_RCC_GetPCLK1Freq>
 8002c6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c78:	f040 810c 	bne.w	8002e94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c80:	2200      	movs	r2, #0
 8002c82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c8e:	4622      	mov	r2, r4
 8002c90:	462b      	mov	r3, r5
 8002c92:	1891      	adds	r1, r2, r2
 8002c94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c96:	415b      	adcs	r3, r3
 8002c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	eb12 0801 	adds.w	r8, r2, r1
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	eb43 0901 	adc.w	r9, r3, r1
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cbe:	4690      	mov	r8, r2
 8002cc0:	4699      	mov	r9, r3
 8002cc2:	4623      	mov	r3, r4
 8002cc4:	eb18 0303 	adds.w	r3, r8, r3
 8002cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ccc:	462b      	mov	r3, r5
 8002cce:	eb49 0303 	adc.w	r3, r9, r3
 8002cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ce2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ce6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cea:	460b      	mov	r3, r1
 8002cec:	18db      	adds	r3, r3, r3
 8002cee:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	eb42 0303 	adc.w	r3, r2, r3
 8002cf6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002cfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d00:	f7fd fa80 	bl	8000204 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4b61      	ldr	r3, [pc, #388]	@ (8002e90 <UART_SetConfig+0x2d4>)
 8002d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	011c      	lsls	r4, r3, #4
 8002d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d16:	2200      	movs	r2, #0
 8002d18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d24:	4642      	mov	r2, r8
 8002d26:	464b      	mov	r3, r9
 8002d28:	1891      	adds	r1, r2, r2
 8002d2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d2c:	415b      	adcs	r3, r3
 8002d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d34:	4641      	mov	r1, r8
 8002d36:	eb12 0a01 	adds.w	sl, r2, r1
 8002d3a:	4649      	mov	r1, r9
 8002d3c:	eb43 0b01 	adc.w	fp, r3, r1
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d54:	4692      	mov	sl, r2
 8002d56:	469b      	mov	fp, r3
 8002d58:	4643      	mov	r3, r8
 8002d5a:	eb1a 0303 	adds.w	r3, sl, r3
 8002d5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d62:	464b      	mov	r3, r9
 8002d64:	eb4b 0303 	adc.w	r3, fp, r3
 8002d68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d80:	460b      	mov	r3, r1
 8002d82:	18db      	adds	r3, r3, r3
 8002d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d86:	4613      	mov	r3, r2
 8002d88:	eb42 0303 	adc.w	r3, r2, r3
 8002d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d96:	f7fd fa35 	bl	8000204 <__aeabi_uldivmod>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4b3b      	ldr	r3, [pc, #236]	@ (8002e90 <UART_SetConfig+0x2d4>)
 8002da2:	fba3 2301 	umull	r2, r3, r3, r1
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2264      	movs	r2, #100	@ 0x64
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	1acb      	subs	r3, r1, r3
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002db6:	4b36      	ldr	r3, [pc, #216]	@ (8002e90 <UART_SetConfig+0x2d4>)
 8002db8:	fba3 2302 	umull	r2, r3, r3, r2
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002dc4:	441c      	add	r4, r3
 8002dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dd0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002dd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002dd8:	4642      	mov	r2, r8
 8002dda:	464b      	mov	r3, r9
 8002ddc:	1891      	adds	r1, r2, r2
 8002dde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002de0:	415b      	adcs	r3, r3
 8002de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002de4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002de8:	4641      	mov	r1, r8
 8002dea:	1851      	adds	r1, r2, r1
 8002dec:	6339      	str	r1, [r7, #48]	@ 0x30
 8002dee:	4649      	mov	r1, r9
 8002df0:	414b      	adcs	r3, r1
 8002df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e00:	4659      	mov	r1, fp
 8002e02:	00cb      	lsls	r3, r1, #3
 8002e04:	4651      	mov	r1, sl
 8002e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e0a:	4651      	mov	r1, sl
 8002e0c:	00ca      	lsls	r2, r1, #3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	4642      	mov	r2, r8
 8002e16:	189b      	adds	r3, r3, r2
 8002e18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e1c:	464b      	mov	r3, r9
 8002e1e:	460a      	mov	r2, r1
 8002e20:	eb42 0303 	adc.w	r3, r2, r3
 8002e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	18db      	adds	r3, r3, r3
 8002e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e42:	4613      	mov	r3, r2
 8002e44:	eb42 0303 	adc.w	r3, r2, r3
 8002e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e52:	f7fd f9d7 	bl	8000204 <__aeabi_uldivmod>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <UART_SetConfig+0x2d4>)
 8002e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	2164      	movs	r1, #100	@ 0x64
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	3332      	adds	r3, #50	@ 0x32
 8002e6e:	4a08      	ldr	r2, [pc, #32]	@ (8002e90 <UART_SetConfig+0x2d4>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	f003 0207 	and.w	r2, r3, #7
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4422      	add	r2, r4
 8002e82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e84:	e106      	b.n	8003094 <UART_SetConfig+0x4d8>
 8002e86:	bf00      	nop
 8002e88:	40011000 	.word	0x40011000
 8002e8c:	40011400 	.word	0x40011400
 8002e90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ea2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ea6:	4642      	mov	r2, r8
 8002ea8:	464b      	mov	r3, r9
 8002eaa:	1891      	adds	r1, r2, r2
 8002eac:	6239      	str	r1, [r7, #32]
 8002eae:	415b      	adcs	r3, r3
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002eb6:	4641      	mov	r1, r8
 8002eb8:	1854      	adds	r4, r2, r1
 8002eba:	4649      	mov	r1, r9
 8002ebc:	eb43 0501 	adc.w	r5, r3, r1
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	00eb      	lsls	r3, r5, #3
 8002eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ece:	00e2      	lsls	r2, r4, #3
 8002ed0:	4614      	mov	r4, r2
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	4643      	mov	r3, r8
 8002ed6:	18e3      	adds	r3, r4, r3
 8002ed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002edc:	464b      	mov	r3, r9
 8002ede:	eb45 0303 	adc.w	r3, r5, r3
 8002ee2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ef2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f02:	4629      	mov	r1, r5
 8002f04:	008b      	lsls	r3, r1, #2
 8002f06:	4621      	mov	r1, r4
 8002f08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	008a      	lsls	r2, r1, #2
 8002f10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f14:	f7fd f976 	bl	8000204 <__aeabi_uldivmod>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4b60      	ldr	r3, [pc, #384]	@ (80030a0 <UART_SetConfig+0x4e4>)
 8002f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	011c      	lsls	r4, r3, #4
 8002f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f38:	4642      	mov	r2, r8
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	1891      	adds	r1, r2, r2
 8002f3e:	61b9      	str	r1, [r7, #24]
 8002f40:	415b      	adcs	r3, r3
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f48:	4641      	mov	r1, r8
 8002f4a:	1851      	adds	r1, r2, r1
 8002f4c:	6139      	str	r1, [r7, #16]
 8002f4e:	4649      	mov	r1, r9
 8002f50:	414b      	adcs	r3, r1
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f60:	4659      	mov	r1, fp
 8002f62:	00cb      	lsls	r3, r1, #3
 8002f64:	4651      	mov	r1, sl
 8002f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f6a:	4651      	mov	r1, sl
 8002f6c:	00ca      	lsls	r2, r1, #3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	4619      	mov	r1, r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	4642      	mov	r2, r8
 8002f76:	189b      	adds	r3, r3, r2
 8002f78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f7c:	464b      	mov	r3, r9
 8002f7e:	460a      	mov	r2, r1
 8002f80:	eb42 0303 	adc.w	r3, r2, r3
 8002f84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002fa0:	4649      	mov	r1, r9
 8002fa2:	008b      	lsls	r3, r1, #2
 8002fa4:	4641      	mov	r1, r8
 8002fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002faa:	4641      	mov	r1, r8
 8002fac:	008a      	lsls	r2, r1, #2
 8002fae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002fb2:	f7fd f927 	bl	8000204 <__aeabi_uldivmod>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4b38      	ldr	r3, [pc, #224]	@ (80030a0 <UART_SetConfig+0x4e4>)
 8002fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2264      	movs	r2, #100	@ 0x64
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	1acb      	subs	r3, r1, r3
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	3332      	adds	r3, #50	@ 0x32
 8002fd0:	4a33      	ldr	r2, [pc, #204]	@ (80030a0 <UART_SetConfig+0x4e4>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fdc:	441c      	add	r4, r3
 8002fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fe6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002fe8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002fec:	4642      	mov	r2, r8
 8002fee:	464b      	mov	r3, r9
 8002ff0:	1891      	adds	r1, r2, r2
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	415b      	adcs	r3, r3
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ffc:	4641      	mov	r1, r8
 8002ffe:	1851      	adds	r1, r2, r1
 8003000:	6039      	str	r1, [r7, #0]
 8003002:	4649      	mov	r1, r9
 8003004:	414b      	adcs	r3, r1
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003014:	4659      	mov	r1, fp
 8003016:	00cb      	lsls	r3, r1, #3
 8003018:	4651      	mov	r1, sl
 800301a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800301e:	4651      	mov	r1, sl
 8003020:	00ca      	lsls	r2, r1, #3
 8003022:	4610      	mov	r0, r2
 8003024:	4619      	mov	r1, r3
 8003026:	4603      	mov	r3, r0
 8003028:	4642      	mov	r2, r8
 800302a:	189b      	adds	r3, r3, r2
 800302c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800302e:	464b      	mov	r3, r9
 8003030:	460a      	mov	r2, r1
 8003032:	eb42 0303 	adc.w	r3, r2, r3
 8003036:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	663b      	str	r3, [r7, #96]	@ 0x60
 8003042:	667a      	str	r2, [r7, #100]	@ 0x64
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003050:	4649      	mov	r1, r9
 8003052:	008b      	lsls	r3, r1, #2
 8003054:	4641      	mov	r1, r8
 8003056:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800305a:	4641      	mov	r1, r8
 800305c:	008a      	lsls	r2, r1, #2
 800305e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003062:	f7fd f8cf 	bl	8000204 <__aeabi_uldivmod>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4b0d      	ldr	r3, [pc, #52]	@ (80030a0 <UART_SetConfig+0x4e4>)
 800306c:	fba3 1302 	umull	r1, r3, r3, r2
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	2164      	movs	r1, #100	@ 0x64
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	3332      	adds	r3, #50	@ 0x32
 800307e:	4a08      	ldr	r2, [pc, #32]	@ (80030a0 <UART_SetConfig+0x4e4>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	f003 020f 	and.w	r2, r3, #15
 800308a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4422      	add	r2, r4
 8003092:	609a      	str	r2, [r3, #8]
}
 8003094:	bf00      	nop
 8003096:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800309a:	46bd      	mov	sp, r7
 800309c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030a0:	51eb851f 	.word	0x51eb851f

080030a4 <memset>:
 80030a4:	4402      	add	r2, r0
 80030a6:	4603      	mov	r3, r0
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d100      	bne.n	80030ae <memset+0xa>
 80030ac:	4770      	bx	lr
 80030ae:	f803 1b01 	strb.w	r1, [r3], #1
 80030b2:	e7f9      	b.n	80030a8 <memset+0x4>

080030b4 <__libc_init_array>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	4d0d      	ldr	r5, [pc, #52]	@ (80030ec <__libc_init_array+0x38>)
 80030b8:	4c0d      	ldr	r4, [pc, #52]	@ (80030f0 <__libc_init_array+0x3c>)
 80030ba:	1b64      	subs	r4, r4, r5
 80030bc:	10a4      	asrs	r4, r4, #2
 80030be:	2600      	movs	r6, #0
 80030c0:	42a6      	cmp	r6, r4
 80030c2:	d109      	bne.n	80030d8 <__libc_init_array+0x24>
 80030c4:	4d0b      	ldr	r5, [pc, #44]	@ (80030f4 <__libc_init_array+0x40>)
 80030c6:	4c0c      	ldr	r4, [pc, #48]	@ (80030f8 <__libc_init_array+0x44>)
 80030c8:	f000 f818 	bl	80030fc <_init>
 80030cc:	1b64      	subs	r4, r4, r5
 80030ce:	10a4      	asrs	r4, r4, #2
 80030d0:	2600      	movs	r6, #0
 80030d2:	42a6      	cmp	r6, r4
 80030d4:	d105      	bne.n	80030e2 <__libc_init_array+0x2e>
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030dc:	4798      	blx	r3
 80030de:	3601      	adds	r6, #1
 80030e0:	e7ee      	b.n	80030c0 <__libc_init_array+0xc>
 80030e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e6:	4798      	blx	r3
 80030e8:	3601      	adds	r6, #1
 80030ea:	e7f2      	b.n	80030d2 <__libc_init_array+0x1e>
 80030ec:	08003134 	.word	0x08003134
 80030f0:	08003134 	.word	0x08003134
 80030f4:	08003134 	.word	0x08003134
 80030f8:	08003138 	.word	0x08003138

080030fc <_init>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr

08003108 <_fini>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr
