
Slave_Request.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a30  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004bf4  08004bf4  00005bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c64  08004c64  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c64  08004c64  00005c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c6c  08004c6c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c6c  08004c6c  00005c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c70  08004c70  00005c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004c74  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000010  08004c84  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004c84  00006130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbf6  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7b  00000000  00000000  00011c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  000137b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fb  00000000  00000000  000141e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002144c  00000000  00000000  000149db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d955  00000000  00000000  00035e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cacc0  00000000  00000000  0004377c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e43c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a44  00000000  00000000  0010e480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00110ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004bdc 	.word	0x08004bdc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08004bdc 	.word	0x08004bdc

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fb91 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f821 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f905 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 8000552:	f000 f8e3 	bl	800071c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000556:	f000 f8b7 	bl	80006c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800055a:	f000 f887 	bl	800066c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  const char *start = "[Slave] Listening...\r\n";
 800055e:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <main+0x44>)
 8000560:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)start, strlen(start), HAL_MAX_DELAY);
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f7ff fe4e 	bl	8000204 <strlen>
 8000568:	4603      	mov	r3, r0
 800056a:	b29a      	uxth	r2, r3
 800056c:	f04f 33ff 	mov.w	r3, #4294967295
 8000570:	6879      	ldr	r1, [r7, #4]
 8000572:	4805      	ldr	r0, [pc, #20]	@ (8000588 <main+0x48>)
 8000574:	f003 ff4a 	bl	800440c <HAL_UART_Transmit>

  HAL_I2C_EnableListen_IT(&hi2c1);
 8000578:	4804      	ldr	r0, [pc, #16]	@ (800058c <main+0x4c>)
 800057a:	f001 fc02 	bl	8001d82 <HAL_I2C_EnableListen_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057e:	bf00      	nop
 8000580:	e7fd      	b.n	800057e <main+0x3e>
 8000582:	bf00      	nop
 8000584:	08004bf4 	.word	0x08004bf4
 8000588:	200000e0 	.word	0x200000e0
 800058c:	2000002c 	.word	0x2000002c

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2234      	movs	r2, #52	@ 0x34
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 faf0 	bl	8004b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000664 <SystemClock_Config+0xd4>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a29      	ldr	r2, [pc, #164]	@ (8000664 <SystemClock_Config+0xd4>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c4:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <SystemClock_Config+0xd4>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	4b24      	ldr	r3, [pc, #144]	@ (8000668 <SystemClock_Config+0xd8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005dc:	4a22      	ldr	r2, [pc, #136]	@ (8000668 <SystemClock_Config+0xd8>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <SystemClock_Config+0xd8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000604:	2310      	movs	r3, #16
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800060c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060e:	2304      	movs	r3, #4
 8000610:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fc06 	bl	8003e30 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800062a:	f000 f995 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2102      	movs	r1, #2
 800064a:	4618      	mov	r0, r3
 800064c:	f003 f8a6 	bl	800379c <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000656:	f000 f97f 	bl	8000958 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	@ 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	@ (80006c0 <MX_I2C1_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000678:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <MX_I2C1_Init+0x58>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 200;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000684:	22c8      	movs	r2, #200	@ 0xc8
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_I2C1_Init+0x50>)
 800068a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800068e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <MX_I2C1_Init+0x50>)
 80006aa:	f001 f92b 	bl	8001904 <HAL_I2C_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f950 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000002c 	.word	0x2000002c
 80006c0:	40005400 	.word	0x40005400
 80006c4:	000186a0 	.word	0x000186a0

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <MX_USART2_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 8000700:	f003 fe34 	bl	800436c <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f925 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000e0 	.word	0x200000e0
 8000718:	40004400 	.word	0x40004400

0800071c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_DMA_Init+0x3c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a0b      	ldr	r2, [pc, #44]	@ (8000758 <MX_DMA_Init+0x3c>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_DMA_Init+0x3c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	200b      	movs	r0, #11
 8000744:	f000 fbdf 	bl	8000f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000748:	200b      	movs	r0, #11
 800074a:	f000 fbf8 	bl	8000f3e <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b2d      	ldr	r3, [pc, #180]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a2c      	ldr	r2, [pc, #176]	@ (800082c <MX_GPIO_Init+0xd0>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b26      	ldr	r3, [pc, #152]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a25      	ldr	r2, [pc, #148]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b23      	ldr	r3, [pc, #140]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a1e      	ldr	r2, [pc, #120]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a17      	ldr	r2, [pc, #92]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	4812      	ldr	r0, [pc, #72]	@ (8000830 <MX_GPIO_Init+0xd4>)
 80007e8:	f001 f872 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	@ (8000834 <MX_GPIO_Init+0xd8>)
 8000804:	f000 fed0 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000808:	2320      	movs	r3, #32
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_GPIO_Init+0xd4>)
 8000820:	f000 fec2 	bl	80015a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	@ 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000
 8000834:	40020800 	.word	0x40020800

08000838 <HAL_I2C_AddrCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	70fb      	strb	r3, [r7, #3]
 8000844:	4613      	mov	r3, r2
 8000846:	803b      	strh	r3, [r7, #0]
  if (TransferDirection == I2C_DIRECTION_TRANSMIT)
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d106      	bne.n	800085c <HAL_I2C_AddrCallback+0x24>
  {
    HAL_I2C_Slave_Seq_Receive_IT(hi2c, rxBuffer, 1, I2C_NEXT_FRAME);
 800084e:	2304      	movs	r3, #4
 8000850:	2201      	movs	r2, #1
 8000852:	4914      	ldr	r1, [pc, #80]	@ (80008a4 <HAL_I2C_AddrCallback+0x6c>)
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f001 fa21 	bl	8001c9c <HAL_I2C_Slave_Seq_Receive_IT>
    {
      uint8_t errorReply = '?';
      HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &errorReply, 1, I2C_NEXT_FRAME);
    }
  }
}
 800085a:	e01f      	b.n	800089c <HAL_I2C_AddrCallback+0x64>
  else if (TransferDirection == I2C_DIRECTION_RECEIVE)
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d11c      	bne.n	800089c <HAL_I2C_AddrCallback+0x64>
    if (readyToReply)
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <HAL_I2C_AddrCallback+0x70>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d00e      	beq.n	800088a <HAL_I2C_AddrCallback+0x52>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	2120      	movs	r1, #32
 8000870:	480e      	ldr	r0, [pc, #56]	@ (80008ac <HAL_I2C_AddrCallback+0x74>)
 8000872:	f001 f82d 	bl	80018d0 <HAL_GPIO_WritePin>
      HAL_I2C_Slave_Seq_Transmit_IT(hi2c, txBuffer, 1, I2C_NEXT_FRAME);
 8000876:	2304      	movs	r3, #4
 8000878:	2201      	movs	r2, #1
 800087a:	490d      	ldr	r1, [pc, #52]	@ (80008b0 <HAL_I2C_AddrCallback+0x78>)
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f001 f99a 	bl	8001bb6 <HAL_I2C_Slave_Seq_Transmit_IT>
      readyToReply = 0;  // Only reset after successful reply
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <HAL_I2C_AddrCallback+0x70>)
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
}
 8000888:	e008      	b.n	800089c <HAL_I2C_AddrCallback+0x64>
      uint8_t errorReply = '?';
 800088a:	233f      	movs	r3, #63	@ 0x3f
 800088c:	73fb      	strb	r3, [r7, #15]
      HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &errorReply, 1, I2C_NEXT_FRAME);
 800088e:	f107 010f 	add.w	r1, r7, #15
 8000892:	2304      	movs	r3, #4
 8000894:	2201      	movs	r2, #1
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f001 f98d 	bl	8001bb6 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000128 	.word	0x20000128
 80008a8:	20000129 	.word	0x20000129
 80008ac:	40020000 	.word	0x40020000
 80008b0:	20000000 	.word	0x20000000

080008b4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if (rxBuffer[0] == 'A') {
 80008bc:	4b17      	ldr	r3, [pc, #92]	@ (800091c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b41      	cmp	r3, #65	@ 0x41
 80008c2:	d113      	bne.n	80008ec <HAL_I2C_SlaveRxCpltCallback+0x38>
    txBuffer[0] = 'B';
 80008c4:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80008c6:	2242      	movs	r2, #66	@ 0x42
 80008c8:	701a      	strb	r2, [r3, #0]
    readyToReply = 1;
 80008ca:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
    const char *msg = "[Slave] Got A, prepared B\r\n";
 80008d0:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 80008d2:	60bb      	str	r3, [r7, #8]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008d4:	68b8      	ldr	r0, [r7, #8]
 80008d6:	f7ff fc95 	bl	8000204 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	b29a      	uxth	r2, r3
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	68b9      	ldr	r1, [r7, #8]
 80008e4:	4811      	ldr	r0, [pc, #68]	@ (800092c <HAL_I2C_SlaveRxCpltCallback+0x78>)
 80008e6:	f003 fd91 	bl	800440c <HAL_UART_Transmit>
    txBuffer[0] = '?';
    readyToReply = 1;
    const char *msg = "[Slave] Unknown command\r\n";
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
  }
}
 80008ea:	e012      	b.n	8000912 <HAL_I2C_SlaveRxCpltCallback+0x5e>
    txBuffer[0] = '?';
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80008ee:	223f      	movs	r2, #63	@ 0x3f
 80008f0:	701a      	strb	r2, [r3, #0]
    readyToReply = 1;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
    const char *msg = "[Slave] Unknown command\r\n";
 80008f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 80008fa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f7ff fc81 	bl	8000204 <strlen>
 8000902:	4603      	mov	r3, r0
 8000904:	b29a      	uxth	r2, r3
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	68f9      	ldr	r1, [r7, #12]
 800090c:	4807      	ldr	r0, [pc, #28]	@ (800092c <HAL_I2C_SlaveRxCpltCallback+0x78>)
 800090e:	f003 fd7d 	bl	800440c <HAL_UART_Transmit>
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000128 	.word	0x20000128
 8000920:	20000000 	.word	0x20000000
 8000924:	20000129 	.word	0x20000129
 8000928:	08004c0c 	.word	0x08004c0c
 800092c:	200000e0 	.word	0x200000e0
 8000930:	08004c28 	.word	0x08004c28

08000934 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  HAL_I2C_EnableListen_IT(hi2c);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f001 fa20 	bl	8001d82 <HAL_I2C_EnableListen_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2120      	movs	r1, #32
 8000946:	4803      	ldr	r0, [pc, #12]	@ (8000954 <HAL_I2C_ListenCpltCallback+0x20>)
 8000948:	f000 ffc2 	bl	80018d0 <HAL_GPIO_WritePin>
  // NOTE: Do NOT reset readyToReply here anymore
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40020000 	.word	0x40020000

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <Error_Handler+0x8>

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000978:	6453      	str	r3, [r2, #68]	@ 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	@ 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009a2:	2007      	movs	r0, #7
 80009a4:	f000 faa4 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a38      	ldr	r2, [pc, #224]	@ (8000ab4 <HAL_I2C_MspInit+0x100>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d16a      	bne.n	8000aac <HAL_I2C_MspInit+0xf8>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b37      	ldr	r3, [pc, #220]	@ (8000ab8 <HAL_I2C_MspInit+0x104>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a36      	ldr	r2, [pc, #216]	@ (8000ab8 <HAL_I2C_MspInit+0x104>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b34      	ldr	r3, [pc, #208]	@ (8000ab8 <HAL_I2C_MspInit+0x104>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f8:	2312      	movs	r3, #18
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a04:	2304      	movs	r3, #4
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	482b      	ldr	r0, [pc, #172]	@ (8000abc <HAL_I2C_MspInit+0x108>)
 8000a10:	f000 fdca 	bl	80015a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	4b27      	ldr	r3, [pc, #156]	@ (8000ab8 <HAL_I2C_MspInit+0x104>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	4a26      	ldr	r2, [pc, #152]	@ (8000ab8 <HAL_I2C_MspInit+0x104>)
 8000a1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a24:	4b24      	ldr	r3, [pc, #144]	@ (8000ab8 <HAL_I2C_MspInit+0x104>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000a30:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <HAL_I2C_MspInit+0x10c>)
 8000a32:	4a24      	ldr	r2, [pc, #144]	@ (8000ac4 <HAL_I2C_MspInit+0x110>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000a36:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <HAL_I2C_MspInit+0x10c>)
 8000a38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a3c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <HAL_I2C_MspInit+0x10c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac0 <HAL_I2C_MspInit+0x10c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <HAL_I2C_MspInit+0x10c>)
 8000a4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a50:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <HAL_I2C_MspInit+0x10c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a58:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <HAL_I2C_MspInit+0x10c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <HAL_I2C_MspInit+0x10c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a64:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <HAL_I2C_MspInit+0x10c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <HAL_I2C_MspInit+0x10c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000a70:	4813      	ldr	r0, [pc, #76]	@ (8000ac0 <HAL_I2C_MspInit+0x10c>)
 8000a72:	f000 fa7f 	bl	8000f74 <HAL_DMA_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000a7c:	f7ff ff6c 	bl	8000958 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac0 <HAL_I2C_MspInit+0x10c>)
 8000a84:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac0 <HAL_I2C_MspInit+0x10c>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	201f      	movs	r0, #31
 8000a92:	f000 fa38 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a96:	201f      	movs	r0, #31
 8000a98:	f000 fa51 	bl	8000f3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2020      	movs	r0, #32
 8000aa2:	f000 fa30 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000aa6:	2020      	movs	r0, #32
 8000aa8:	f000 fa49 	bl	8000f3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	@ 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	20000080 	.word	0x20000080
 8000ac4:	40026010 	.word	0x40026010

08000ac8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	@ 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	@ (8000b4c <HAL_UART_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12b      	bne.n	8000b42 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	4a17      	ldr	r2, [pc, #92]	@ (8000b50 <HAL_UART_MspInit+0x88>)
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <HAL_UART_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a10      	ldr	r2, [pc, #64]	@ (8000b50 <HAL_UART_MspInit+0x88>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <HAL_UART_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b22:	230c      	movs	r3, #12
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b32:	2307      	movs	r3, #7
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <HAL_UART_MspInit+0x8c>)
 8000b3e:	f000 fd33 	bl	80015a8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	@ 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bae:	f000 f8af 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000bbc:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <DMA1_Stream0_IRQHandler+0x10>)
 8000bbe:	f000 faa9 	bl	8001114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000080 	.word	0x20000080

08000bcc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <I2C1_EV_IRQHandler+0x10>)
 8000bd2:	f001 f90c 	bl	8001dee <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000002c 	.word	0x2000002c

08000be0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <I2C1_ER_IRQHandler+0x10>)
 8000be6:	f001 fa73 	bl	80020d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000002c 	.word	0x2000002c

08000bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c1c:	f7ff ffea 	bl	8000bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	@ (8000c64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c46:	f003 ffa5 	bl	8004b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fc79 	bl	8000540 <main>
  bx  lr    
 8000c4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c5c:	08004c74 	.word	0x08004c74
  ldr r2, =_sbss
 8000c60:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c64:	20000130 	.word	0x20000130

08000c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <HAL_Init+0x40>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_Init+0x40>)
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	@ (8000cac <HAL_Init+0x40>)
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 f92b 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 f808 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca0:	f7ff fe60 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023c00 	.word	0x40023c00

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_InitTick+0x54>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_InitTick+0x58>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f943 	bl	8000f5a <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00e      	b.n	8000cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d80a      	bhi.n	8000cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f000 f90b 	bl	8000f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	@ (8000d0c <HAL_InitTick+0x5c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000004 	.word	0x20000004
 8000d08:	2000000c 	.word	0x2000000c
 8000d0c:	20000008 	.word	0x20000008

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	2000000c 	.word	0x2000000c
 8000d34:	2000012c 	.word	0x2000012c

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	2000012c 	.word	0x2000012c

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	@ (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	@ (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	@ (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	@ 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	@ 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff29 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff3e 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff8e 	bl	8000e44 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff31 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffa2 	bl	8000eac <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff feda 	bl	8000d38 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e099      	b.n	80010c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2202      	movs	r2, #2
 8000f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0201 	bic.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb0:	e00f      	b.n	8000fd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fb2:	f7ff fec1 	bl	8000d38 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b05      	cmp	r3, #5
 8000fbe:	d908      	bls.n	8000fd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2203      	movs	r2, #3
 8000fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e078      	b.n	80010c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1e8      	bne.n	8000fb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	4b38      	ldr	r3, [pc, #224]	@ (80010cc <HAL_DMA_Init+0x158>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800100a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4313      	orrs	r3, r2
 8001022:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001028:	2b04      	cmp	r3, #4
 800102a:	d107      	bne.n	800103c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001034:	4313      	orrs	r3, r2
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4313      	orrs	r3, r2
 800103a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f023 0307 	bic.w	r3, r3, #7
 8001052:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	4313      	orrs	r3, r2
 800105c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001062:	2b04      	cmp	r3, #4
 8001064:	d117      	bne.n	8001096 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4313      	orrs	r3, r2
 800106e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00e      	beq.n	8001096 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 fa19 	bl	80014b0 <DMA_CheckFifoParam>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d008      	beq.n	8001096 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2240      	movs	r2, #64	@ 0x40
 8001088:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001092:	2301      	movs	r3, #1
 8001094:	e016      	b.n	80010c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f9d0 	bl	8001444 <DMA_CalcBaseAndBitshift>
 80010a4:	4603      	mov	r3, r0
 80010a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010ac:	223f      	movs	r2, #63	@ 0x3f
 80010ae:	409a      	lsls	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	f010803f 	.word	0xf010803f

080010d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d004      	beq.n	80010ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2280      	movs	r2, #128	@ 0x80
 80010e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00c      	b.n	8001108 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2205      	movs	r2, #5
 80010f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0201 	bic.w	r2, r2, #1
 8001104:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001120:	4b8e      	ldr	r3, [pc, #568]	@ (800135c <HAL_DMA_IRQHandler+0x248>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a8e      	ldr	r2, [pc, #568]	@ (8001360 <HAL_DMA_IRQHandler+0x24c>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	0a9b      	lsrs	r3, r3, #10
 800112c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001132:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800113e:	2208      	movs	r2, #8
 8001140:	409a      	lsls	r2, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4013      	ands	r3, r2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d01a      	beq.n	8001180 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d013      	beq.n	8001180 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0204 	bic.w	r2, r2, #4
 8001166:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800116c:	2208      	movs	r2, #8
 800116e:	409a      	lsls	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001178:	f043 0201 	orr.w	r2, r3, #1
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001184:	2201      	movs	r2, #1
 8001186:	409a      	lsls	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4013      	ands	r3, r2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d012      	beq.n	80011b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a2:	2201      	movs	r2, #1
 80011a4:	409a      	lsls	r2, r3
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ae:	f043 0202 	orr.w	r2, r3, #2
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ba:	2204      	movs	r2, #4
 80011bc:	409a      	lsls	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d012      	beq.n	80011ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00b      	beq.n	80011ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d8:	2204      	movs	r2, #4
 80011da:	409a      	lsls	r2, r3
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011e4:	f043 0204 	orr.w	r2, r3, #4
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f0:	2210      	movs	r2, #16
 80011f2:	409a      	lsls	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d043      	beq.n	8001284 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d03c      	beq.n	8001284 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800120e:	2210      	movs	r2, #16
 8001210:	409a      	lsls	r2, r3
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d018      	beq.n	8001256 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d108      	bne.n	8001244 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	2b00      	cmp	r3, #0
 8001238:	d024      	beq.n	8001284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	4798      	blx	r3
 8001242:	e01f      	b.n	8001284 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001248:	2b00      	cmp	r3, #0
 800124a:	d01b      	beq.n	8001284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	4798      	blx	r3
 8001254:	e016      	b.n	8001284 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001260:	2b00      	cmp	r3, #0
 8001262:	d107      	bne.n	8001274 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0208 	bic.w	r2, r2, #8
 8001272:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001288:	2220      	movs	r2, #32
 800128a:	409a      	lsls	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4013      	ands	r3, r2
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 808f 	beq.w	80013b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 8087 	beq.w	80013b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012aa:	2220      	movs	r2, #32
 80012ac:	409a      	lsls	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	d136      	bne.n	800132c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0216 	bic.w	r2, r2, #22
 80012cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	695a      	ldr	r2, [r3, #20]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d103      	bne.n	80012ee <HAL_DMA_IRQHandler+0x1da>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0208 	bic.w	r2, r2, #8
 80012fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001302:	223f      	movs	r2, #63	@ 0x3f
 8001304:	409a      	lsls	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800131e:	2b00      	cmp	r3, #0
 8001320:	d07e      	beq.n	8001420 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	4798      	blx	r3
        }
        return;
 800132a:	e079      	b.n	8001420 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d01d      	beq.n	8001376 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10d      	bne.n	8001364 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134c:	2b00      	cmp	r3, #0
 800134e:	d031      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	4798      	blx	r3
 8001358:	e02c      	b.n	80013b4 <HAL_DMA_IRQHandler+0x2a0>
 800135a:	bf00      	nop
 800135c:	20000004 	.word	0x20000004
 8001360:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001368:	2b00      	cmp	r3, #0
 800136a:	d023      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	4798      	blx	r3
 8001374:	e01e      	b.n	80013b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10f      	bne.n	80013a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0210 	bic.w	r2, r2, #16
 8001392:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d032      	beq.n	8001422 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d022      	beq.n	800140e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2205      	movs	r2, #5
 80013cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3301      	adds	r3, #1
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d307      	bcc.n	80013fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f2      	bne.n	80013e0 <HAL_DMA_IRQHandler+0x2cc>
 80013fa:	e000      	b.n	80013fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80013fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	4798      	blx	r3
 800141e:	e000      	b.n	8001422 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001420:	bf00      	nop
    }
  }
}
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001436:	b2db      	uxtb	r3, r3
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	3b10      	subs	r3, #16
 8001454:	4a14      	ldr	r2, [pc, #80]	@ (80014a8 <DMA_CalcBaseAndBitshift+0x64>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800145e:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <DMA_CalcBaseAndBitshift+0x68>)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d909      	bls.n	8001486 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800147a:	f023 0303 	bic.w	r3, r3, #3
 800147e:	1d1a      	adds	r2, r3, #4
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	659a      	str	r2, [r3, #88]	@ 0x58
 8001484:	e007      	b.n	8001496 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800148e:	f023 0303 	bic.w	r3, r3, #3
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	aaaaaaab 	.word	0xaaaaaaab
 80014ac:	08004c5c 	.word	0x08004c5c

080014b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d11f      	bne.n	800150a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d856      	bhi.n	800157e <DMA_CheckFifoParam+0xce>
 80014d0:	a201      	add	r2, pc, #4	@ (adr r2, 80014d8 <DMA_CheckFifoParam+0x28>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	080014e9 	.word	0x080014e9
 80014dc:	080014fb 	.word	0x080014fb
 80014e0:	080014e9 	.word	0x080014e9
 80014e4:	0800157f 	.word	0x0800157f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d046      	beq.n	8001582 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014f8:	e043      	b.n	8001582 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001502:	d140      	bne.n	8001586 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001508:	e03d      	b.n	8001586 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001512:	d121      	bne.n	8001558 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b03      	cmp	r3, #3
 8001518:	d837      	bhi.n	800158a <DMA_CheckFifoParam+0xda>
 800151a:	a201      	add	r2, pc, #4	@ (adr r2, 8001520 <DMA_CheckFifoParam+0x70>)
 800151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001520:	08001531 	.word	0x08001531
 8001524:	08001537 	.word	0x08001537
 8001528:	08001531 	.word	0x08001531
 800152c:	08001549 	.word	0x08001549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
      break;
 8001534:	e030      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d025      	beq.n	800158e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001546:	e022      	b.n	800158e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001550:	d11f      	bne.n	8001592 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001556:	e01c      	b.n	8001592 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d903      	bls.n	8001566 <DMA_CheckFifoParam+0xb6>
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d003      	beq.n	800156c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001564:	e018      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
      break;
 800156a:	e015      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00e      	beq.n	8001596 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
      break;
 800157c:	e00b      	b.n	8001596 <DMA_CheckFifoParam+0xe6>
      break;
 800157e:	bf00      	nop
 8001580:	e00a      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      break;
 8001582:	bf00      	nop
 8001584:	e008      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      break;
 8001586:	bf00      	nop
 8001588:	e006      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      break;
 800158a:	bf00      	nop
 800158c:	e004      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      break;
 800158e:	bf00      	nop
 8001590:	e002      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      break;   
 8001592:	bf00      	nop
 8001594:	e000      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      break;
 8001596:	bf00      	nop
    }
  } 
  
  return status; 
 8001598:	7bfb      	ldrb	r3, [r7, #15]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	@ 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	e165      	b.n	8001890 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	429a      	cmp	r2, r3
 80015de:	f040 8154 	bne.w	800188a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d005      	beq.n	80015fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d130      	bne.n	800165c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b03      	cmp	r3, #3
 8001666:	d017      	beq.n	8001698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d123      	bne.n	80016ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0203 	and.w	r2, r3, #3
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80ae 	beq.w	800188a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b5d      	ldr	r3, [pc, #372]	@ (80018a8 <HAL_GPIO_Init+0x300>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	4a5c      	ldr	r2, [pc, #368]	@ (80018a8 <HAL_GPIO_Init+0x300>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800173c:	6453      	str	r3, [r2, #68]	@ 0x44
 800173e:	4b5a      	ldr	r3, [pc, #360]	@ (80018a8 <HAL_GPIO_Init+0x300>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800174a:	4a58      	ldr	r2, [pc, #352]	@ (80018ac <HAL_GPIO_Init+0x304>)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4f      	ldr	r2, [pc, #316]	@ (80018b0 <HAL_GPIO_Init+0x308>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d025      	beq.n	80017c2 <HAL_GPIO_Init+0x21a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4e      	ldr	r2, [pc, #312]	@ (80018b4 <HAL_GPIO_Init+0x30c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d01f      	beq.n	80017be <HAL_GPIO_Init+0x216>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4d      	ldr	r2, [pc, #308]	@ (80018b8 <HAL_GPIO_Init+0x310>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d019      	beq.n	80017ba <HAL_GPIO_Init+0x212>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4c      	ldr	r2, [pc, #304]	@ (80018bc <HAL_GPIO_Init+0x314>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0x20e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4b      	ldr	r2, [pc, #300]	@ (80018c0 <HAL_GPIO_Init+0x318>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00d      	beq.n	80017b2 <HAL_GPIO_Init+0x20a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4a      	ldr	r2, [pc, #296]	@ (80018c4 <HAL_GPIO_Init+0x31c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d007      	beq.n	80017ae <HAL_GPIO_Init+0x206>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a49      	ldr	r2, [pc, #292]	@ (80018c8 <HAL_GPIO_Init+0x320>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_GPIO_Init+0x202>
 80017a6:	2306      	movs	r3, #6
 80017a8:	e00c      	b.n	80017c4 <HAL_GPIO_Init+0x21c>
 80017aa:	2307      	movs	r3, #7
 80017ac:	e00a      	b.n	80017c4 <HAL_GPIO_Init+0x21c>
 80017ae:	2305      	movs	r3, #5
 80017b0:	e008      	b.n	80017c4 <HAL_GPIO_Init+0x21c>
 80017b2:	2304      	movs	r3, #4
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x21c>
 80017b6:	2303      	movs	r3, #3
 80017b8:	e004      	b.n	80017c4 <HAL_GPIO_Init+0x21c>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_Init+0x21c>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_GPIO_Init+0x21c>
 80017c2:	2300      	movs	r3, #0
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	f002 0203 	and.w	r2, r2, #3
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	4093      	lsls	r3, r2
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d4:	4935      	ldr	r1, [pc, #212]	@ (80018ac <HAL_GPIO_Init+0x304>)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017e2:	4b3a      	ldr	r3, [pc, #232]	@ (80018cc <HAL_GPIO_Init+0x324>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001806:	4a31      	ldr	r2, [pc, #196]	@ (80018cc <HAL_GPIO_Init+0x324>)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800180c:	4b2f      	ldr	r3, [pc, #188]	@ (80018cc <HAL_GPIO_Init+0x324>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001830:	4a26      	ldr	r2, [pc, #152]	@ (80018cc <HAL_GPIO_Init+0x324>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001836:	4b25      	ldr	r3, [pc, #148]	@ (80018cc <HAL_GPIO_Init+0x324>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800185a:	4a1c      	ldr	r2, [pc, #112]	@ (80018cc <HAL_GPIO_Init+0x324>)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001860:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <HAL_GPIO_Init+0x324>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001884:	4a11      	ldr	r2, [pc, #68]	@ (80018cc <HAL_GPIO_Init+0x324>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3301      	adds	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	2b0f      	cmp	r3, #15
 8001894:	f67f ae96 	bls.w	80015c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3724      	adds	r7, #36	@ 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40013800 	.word	0x40013800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40020c00 	.word	0x40020c00
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40021400 	.word	0x40021400
 80018c8:	40021800 	.word	0x40021800
 80018cc:	40013c00 	.word	0x40013c00

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018ec:	e003      	b.n	80018f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	619a      	str	r2, [r3, #24]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e12b      	b.n	8001b6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff f842 	bl	80009b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2224      	movs	r2, #36	@ 0x24
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001956:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001966:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001968:	f002 f80a 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 800196c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a81      	ldr	r2, [pc, #516]	@ (8001b78 <HAL_I2C_Init+0x274>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d807      	bhi.n	8001988 <HAL_I2C_Init+0x84>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4a80      	ldr	r2, [pc, #512]	@ (8001b7c <HAL_I2C_Init+0x278>)
 800197c:	4293      	cmp	r3, r2
 800197e:	bf94      	ite	ls
 8001980:	2301      	movls	r3, #1
 8001982:	2300      	movhi	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	e006      	b.n	8001996 <HAL_I2C_Init+0x92>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4a7d      	ldr	r2, [pc, #500]	@ (8001b80 <HAL_I2C_Init+0x27c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	bf94      	ite	ls
 8001990:	2301      	movls	r3, #1
 8001992:	2300      	movhi	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e0e7      	b.n	8001b6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4a78      	ldr	r2, [pc, #480]	@ (8001b84 <HAL_I2C_Init+0x280>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	0c9b      	lsrs	r3, r3, #18
 80019a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4a6a      	ldr	r2, [pc, #424]	@ (8001b78 <HAL_I2C_Init+0x274>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d802      	bhi.n	80019d8 <HAL_I2C_Init+0xd4>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	3301      	adds	r3, #1
 80019d6:	e009      	b.n	80019ec <HAL_I2C_Init+0xe8>
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	4a69      	ldr	r2, [pc, #420]	@ (8001b88 <HAL_I2C_Init+0x284>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	3301      	adds	r3, #1
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	430b      	orrs	r3, r1
 80019f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	495c      	ldr	r1, [pc, #368]	@ (8001b78 <HAL_I2C_Init+0x274>)
 8001a08:	428b      	cmp	r3, r1
 8001a0a:	d819      	bhi.n	8001a40 <HAL_I2C_Init+0x13c>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1e59      	subs	r1, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a1a:	1c59      	adds	r1, r3, #1
 8001a1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a20:	400b      	ands	r3, r1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00a      	beq.n	8001a3c <HAL_I2C_Init+0x138>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1e59      	subs	r1, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3a:	e051      	b.n	8001ae0 <HAL_I2C_Init+0x1dc>
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	e04f      	b.n	8001ae0 <HAL_I2C_Init+0x1dc>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d111      	bne.n	8001a6c <HAL_I2C_Init+0x168>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	1e58      	subs	r0, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	440b      	add	r3, r1
 8001a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf0c      	ite	eq
 8001a64:	2301      	moveq	r3, #1
 8001a66:	2300      	movne	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	e012      	b.n	8001a92 <HAL_I2C_Init+0x18e>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1e58      	subs	r0, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6859      	ldr	r1, [r3, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	0099      	lsls	r1, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_I2C_Init+0x196>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e022      	b.n	8001ae0 <HAL_I2C_Init+0x1dc>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_I2C_Init+0x1bc>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1e58      	subs	r0, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6859      	ldr	r1, [r3, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	440b      	add	r3, r1
 8001ab0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001abe:	e00f      	b.n	8001ae0 <HAL_I2C_Init+0x1dc>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1e58      	subs	r0, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	0099      	lsls	r1, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001adc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	6809      	ldr	r1, [r1, #0]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69da      	ldr	r2, [r3, #28]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6911      	ldr	r1, [r2, #16]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68d2      	ldr	r2, [r2, #12]
 8001b1a:	4311      	orrs	r1, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	000186a0 	.word	0x000186a0
 8001b7c:	001e847f 	.word	0x001e847f
 8001b80:	003d08ff 	.word	0x003d08ff
 8001b84:	431bde83 	.word	0x431bde83
 8001b88:	10624dd3 	.word	0x10624dd3

08001b8c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9e:	2b80      	cmp	r3, #128	@ 0x80
 8001ba0:	d103      	bne.n	8001baa <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  }
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b087      	sub	sp, #28
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001bd2:	2b28      	cmp	r3, #40	@ 0x28
 8001bd4:	d15b      	bne.n	8001c8e <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e054      	b.n	8001c90 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e04d      	b.n	8001c90 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d007      	beq.n	8001c1a <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c28:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2229      	movs	r2, #41	@ 0x29
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2220      	movs	r2, #32
 8001c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	88fa      	ldrh	r2, [r7, #6]
 8001c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001c88:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001c8e:	2302      	movs	r3, #2
  }
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001cb8:	2b28      	cmp	r3, #40	@ 0x28
 8001cba:	d15b      	bne.n	8001d74 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e054      	b.n	8001d76 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e04d      	b.n	8001d76 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d007      	beq.n	8001d00 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	222a      	movs	r2, #42	@ 0x2a
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	88fa      	ldrh	r2, [r7, #6]
 8001d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001d6e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e000      	b.n	8001d76 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001d74:	2302      	movs	r3, #2
  }
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	371c      	adds	r7, #28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	d124      	bne.n	8001de0 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2228      	movs	r2, #40	@ 0x28
 8001d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d007      	beq.n	8001dbc <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001dca:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001dda:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e000      	b.n	8001de2 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001de0:	2302      	movs	r3, #2
  }
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b088      	sub	sp, #32
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e06:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e16:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d003      	beq.n	8001e26 <HAL_I2C_EV_IRQHandler+0x38>
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	2b40      	cmp	r3, #64	@ 0x40
 8001e22:	f040 80c1 	bne.w	8001fa8 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10d      	bne.n	8001e5c <HAL_I2C_EV_IRQHandler+0x6e>
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001e46:	d003      	beq.n	8001e50 <HAL_I2C_EV_IRQHandler+0x62>
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001e4e:	d101      	bne.n	8001e54 <HAL_I2C_EV_IRQHandler+0x66>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_I2C_EV_IRQHandler+0x68>
 8001e54:	2300      	movs	r3, #0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	f000 8132 	beq.w	80020c0 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00c      	beq.n	8001e80 <HAL_I2C_EV_IRQHandler+0x92>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	0a5b      	lsrs	r3, r3, #9
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d006      	beq.n	8001e80 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f001 fc76 	bl	8003764 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fd79 	bl	8002970 <I2C_Master_SB>
 8001e7e:	e092      	b.n	8001fa6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <HAL_I2C_EV_IRQHandler+0xb2>
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	0a5b      	lsrs	r3, r3, #9
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fdef 	bl	8002a7c <I2C_Master_ADD10>
 8001e9e:	e082      	b.n	8001fa6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	085b      	lsrs	r3, r3, #1
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <HAL_I2C_EV_IRQHandler+0xd2>
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	0a5b      	lsrs	r3, r3, #9
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fe09 	bl	8002ad0 <I2C_Master_ADDR>
 8001ebe:	e072      	b.n	8001fa6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d03b      	beq.n	8001f44 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ed6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001eda:	f000 80f3 	beq.w	80020c4 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	09db      	lsrs	r3, r3, #7
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00f      	beq.n	8001f0a <HAL_I2C_EV_IRQHandler+0x11c>
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	0a9b      	lsrs	r3, r3, #10
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_I2C_EV_IRQHandler+0x11c>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f9d1 	bl	80022aa <I2C_MasterTransmit_TXE>
 8001f08:	e04d      	b.n	8001fa6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80d6 	beq.w	80020c4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	0a5b      	lsrs	r3, r3, #9
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80cf 	beq.w	80020c4 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001f26:	7bbb      	ldrb	r3, [r7, #14]
 8001f28:	2b21      	cmp	r3, #33	@ 0x21
 8001f2a:	d103      	bne.n	8001f34 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fa58 	bl	80023e2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f32:	e0c7      	b.n	80020c4 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	2b40      	cmp	r3, #64	@ 0x40
 8001f38:	f040 80c4 	bne.w	80020c4 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fac6 	bl	80024ce <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f42:	e0bf      	b.n	80020c4 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f52:	f000 80b7 	beq.w	80020c4 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	099b      	lsrs	r3, r3, #6
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00f      	beq.n	8001f82 <HAL_I2C_EV_IRQHandler+0x194>
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	0a9b      	lsrs	r3, r3, #10
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d009      	beq.n	8001f82 <HAL_I2C_EV_IRQHandler+0x194>
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d103      	bne.n	8001f82 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fb3f 	bl	80025fe <I2C_MasterReceive_RXNE>
 8001f80:	e011      	b.n	8001fa6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 809a 	beq.w	80020c4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	0a5b      	lsrs	r3, r3, #9
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8093 	beq.w	80020c4 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fbf5 	bl	800278e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fa4:	e08e      	b.n	80020c4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001fa6:	e08d      	b.n	80020c4 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d004      	beq.n	8001fba <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	e007      	b.n	8001fca <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d012      	beq.n	8001ffc <HAL_I2C_EV_IRQHandler+0x20e>
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	0a5b      	lsrs	r3, r3, #9
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001ff2:	69b9      	ldr	r1, [r7, #24]
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 ffba 	bl	8002f6e <I2C_Slave_ADDR>
 8001ffa:	e066      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d009      	beq.n	800201c <HAL_I2C_EV_IRQHandler+0x22e>
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	0a5b      	lsrs	r3, r3, #9
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fff5 	bl	8003004 <I2C_Slave_STOPF>
 800201a:	e056      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800201c:	7bbb      	ldrb	r3, [r7, #14]
 800201e:	2b21      	cmp	r3, #33	@ 0x21
 8002020:	d002      	beq.n	8002028 <HAL_I2C_EV_IRQHandler+0x23a>
 8002022:	7bbb      	ldrb	r3, [r7, #14]
 8002024:	2b29      	cmp	r3, #41	@ 0x29
 8002026:	d125      	bne.n	8002074 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	09db      	lsrs	r3, r3, #7
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00f      	beq.n	8002054 <HAL_I2C_EV_IRQHandler+0x266>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	0a9b      	lsrs	r3, r3, #10
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d009      	beq.n	8002054 <HAL_I2C_EV_IRQHandler+0x266>
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fed0 	bl	8002df2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002052:	e039      	b.n	80020c8 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d033      	beq.n	80020c8 <HAL_I2C_EV_IRQHandler+0x2da>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	0a5b      	lsrs	r3, r3, #9
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d02d      	beq.n	80020c8 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fefd 	bl	8002e6c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002072:	e029      	b.n	80020c8 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00f      	beq.n	80020a0 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	0a9b      	lsrs	r3, r3, #10
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d009      	beq.n	80020a0 <HAL_I2C_EV_IRQHandler+0x2b2>
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d103      	bne.n	80020a0 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 ff08 	bl	8002eae <I2C_SlaveReceive_RXNE>
 800209e:	e014      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00e      	beq.n	80020ca <HAL_I2C_EV_IRQHandler+0x2dc>
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	0a5b      	lsrs	r3, r3, #9
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 ff36 	bl	8002f2a <I2C_SlaveReceive_BTF>
 80020be:	e004      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80020c0:	bf00      	nop
 80020c2:	e002      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020c4:	bf00      	nop
 80020c6:	e000      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020c8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80020ca:	3720      	adds	r7, #32
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	@ 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020f2:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	0a1b      	lsrs	r3, r3, #8
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00e      	beq.n	800211e <HAL_I2C_ER_IRQHandler+0x4e>
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	0a1b      	lsrs	r3, r3, #8
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800211c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	0a5b      	lsrs	r3, r3, #9
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00e      	beq.n	8002148 <HAL_I2C_ER_IRQHandler+0x78>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002146:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	0a9b      	lsrs	r3, r3, #10
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d03f      	beq.n	80021d4 <HAL_I2C_ER_IRQHandler+0x104>
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d039      	beq.n	80021d4 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002160:	7efb      	ldrb	r3, [r7, #27]
 8002162:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002168:	b29b      	uxth	r3, r3
 800216a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002172:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002178:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800217a:	7ebb      	ldrb	r3, [r7, #26]
 800217c:	2b20      	cmp	r3, #32
 800217e:	d112      	bne.n	80021a6 <HAL_I2C_ER_IRQHandler+0xd6>
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10f      	bne.n	80021a6 <HAL_I2C_ER_IRQHandler+0xd6>
 8002186:	7cfb      	ldrb	r3, [r7, #19]
 8002188:	2b21      	cmp	r3, #33	@ 0x21
 800218a:	d008      	beq.n	800219e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800218c:	7cfb      	ldrb	r3, [r7, #19]
 800218e:	2b29      	cmp	r3, #41	@ 0x29
 8002190:	d005      	beq.n	800219e <HAL_I2C_ER_IRQHandler+0xce>
 8002192:	7cfb      	ldrb	r3, [r7, #19]
 8002194:	2b28      	cmp	r3, #40	@ 0x28
 8002196:	d106      	bne.n	80021a6 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b21      	cmp	r3, #33	@ 0x21
 800219c:	d103      	bne.n	80021a6 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f001 f860 	bl	8003264 <I2C_Slave_AF>
 80021a4:	e016      	b.n	80021d4 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021ae:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80021b8:	7efb      	ldrb	r3, [r7, #27]
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d002      	beq.n	80021c4 <HAL_I2C_ER_IRQHandler+0xf4>
 80021be:	7efb      	ldrb	r3, [r7, #27]
 80021c0:	2b40      	cmp	r3, #64	@ 0x40
 80021c2:	d107      	bne.n	80021d4 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021d2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	0adb      	lsrs	r3, r3, #11
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00e      	beq.n	80021fe <HAL_I2C_ER_IRQHandler+0x12e>
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	f043 0308 	orr.w	r3, r3, #8
 80021f2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80021fc:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f001 f89b 	bl	800334c <I2C_ITError>
  }
}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	@ 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022c0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d150      	bne.n	8002372 <I2C_MasterTransmit_TXE+0xc8>
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b21      	cmp	r3, #33	@ 0x21
 80022d4:	d14d      	bne.n	8002372 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d01d      	beq.n	8002318 <I2C_MasterTransmit_TXE+0x6e>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d01a      	beq.n	8002318 <I2C_MasterTransmit_TXE+0x6e>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022e8:	d016      	beq.n	8002318 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80022f8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2211      	movs	r2, #17
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff84 	bl	800221e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002316:	e060      	b.n	80023da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002326:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002336:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b40      	cmp	r3, #64	@ 0x40
 8002350:	d107      	bne.n	8002362 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ff7d 	bl	800225a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002360:	e03b      	b.n	80023da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ff57 	bl	800221e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002370:	e033      	b.n	80023da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	2b21      	cmp	r3, #33	@ 0x21
 8002376:	d005      	beq.n	8002384 <I2C_MasterTransmit_TXE+0xda>
 8002378:	7bbb      	ldrb	r3, [r7, #14]
 800237a:	2b40      	cmp	r3, #64	@ 0x40
 800237c:	d12d      	bne.n	80023da <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	2b22      	cmp	r3, #34	@ 0x22
 8002382:	d12a      	bne.n	80023da <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d108      	bne.n	80023a0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800239c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800239e:	e01c      	b.n	80023da <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b40      	cmp	r3, #64	@ 0x40
 80023aa:	d103      	bne.n	80023b4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f88e 	bl	80024ce <I2C_MemoryTransmit_TXE_BTF>
}
 80023b2:	e012      	b.n	80023da <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80023d8:	e7ff      	b.n	80023da <I2C_MasterTransmit_TXE+0x130>
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b21      	cmp	r3, #33	@ 0x21
 80023fa:	d164      	bne.n	80024c6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d012      	beq.n	800242c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800242a:	e04c      	b.n	80024c6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b08      	cmp	r3, #8
 8002430:	d01d      	beq.n	800246e <I2C_MasterTransmit_BTF+0x8c>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b20      	cmp	r3, #32
 8002436:	d01a      	beq.n	800246e <I2C_MasterTransmit_BTF+0x8c>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800243e:	d016      	beq.n	800246e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800244e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2211      	movs	r2, #17
 8002454:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fed9 	bl	800221e <HAL_I2C_MasterTxCpltCallback>
}
 800246c:	e02b      	b.n	80024c6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800247c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800248c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b40      	cmp	r3, #64	@ 0x40
 80024a6:	d107      	bne.n	80024b8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fed2 	bl	800225a <HAL_I2C_MemTxCpltCallback>
}
 80024b6:	e006      	b.n	80024c6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff feac 	bl	800221e <HAL_I2C_MasterTxCpltCallback>
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d11d      	bne.n	8002522 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d10b      	bne.n	8002506 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024fe:	1c9a      	adds	r2, r3, #2
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002504:	e077      	b.n	80025f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250a:	b29b      	uxth	r3, r3
 800250c:	121b      	asrs	r3, r3, #8
 800250e:	b2da      	uxtb	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002520:	e069      	b.n	80025f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002526:	2b01      	cmp	r3, #1
 8002528:	d10b      	bne.n	8002542 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800252e:	b2da      	uxtb	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002540:	e059      	b.n	80025f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002546:	2b02      	cmp	r3, #2
 8002548:	d152      	bne.n	80025f0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	2b22      	cmp	r3, #34	@ 0x22
 800254e:	d10d      	bne.n	800256c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800255e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800256a:	e044      	b.n	80025f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d015      	beq.n	80025a2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b21      	cmp	r3, #33	@ 0x21
 800257a:	d112      	bne.n	80025a2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80025a0:	e029      	b.n	80025f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d124      	bne.n	80025f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b21      	cmp	r3, #33	@ 0x21
 80025b0:	d121      	bne.n	80025f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025c0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025d0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fe36 	bl	800225a <HAL_I2C_MemTxCpltCallback>
}
 80025ee:	e002      	b.n	80025f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff facb 	bl	8001b8c <I2C_Flush_DR>
}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b22      	cmp	r3, #34	@ 0x22
 8002610:	f040 80b9 	bne.w	8002786 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002618:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d921      	bls.n	800266c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b03      	cmp	r3, #3
 8002656:	f040 8096 	bne.w	8002786 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002668:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800266a:	e08c      	b.n	8002786 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002670:	2b02      	cmp	r3, #2
 8002672:	d07f      	beq.n	8002774 <I2C_MasterReceive_RXNE+0x176>
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d002      	beq.n	8002680 <I2C_MasterReceive_RXNE+0x82>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d179      	bne.n	8002774 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f001 f83d 	bl	8003700 <I2C_WaitOnSTOPRequestThroughIT>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d14c      	bne.n	8002726 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800269a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b40      	cmp	r3, #64	@ 0x40
 80026e4:	d10a      	bne.n	80026fc <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff fdba 	bl	800226e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026fa:	e044      	b.n	8002786 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b08      	cmp	r3, #8
 8002708:	d002      	beq.n	8002710 <I2C_MasterReceive_RXNE+0x112>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b20      	cmp	r3, #32
 800270e:	d103      	bne.n	8002718 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	631a      	str	r2, [r3, #48]	@ 0x30
 8002716:	e002      	b.n	800271e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2212      	movs	r2, #18
 800271c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff fd87 	bl	8002232 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002724:	e02f      	b.n	8002786 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002734:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fd88 	bl	8002282 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002772:	e008      	b.n	8002786 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002782:	605a      	str	r2, [r3, #4]
}
 8002784:	e7ff      	b.n	8002786 <I2C_MasterReceive_RXNE+0x188>
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d11b      	bne.n	80027de <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027b4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80027dc:	e0c4      	b.n	8002968 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d129      	bne.n	800283c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027f6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d00a      	beq.n	8002814 <I2C_MasterReceive_BTF+0x86>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d007      	beq.n	8002814 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002812:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800283a:	e095      	b.n	8002968 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d17d      	bne.n	8002942 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d002      	beq.n	8002852 <I2C_MasterReceive_BTF+0xc4>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b10      	cmp	r3, #16
 8002850:	d108      	bne.n	8002864 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e016      	b.n	8002892 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b04      	cmp	r3, #4
 8002868:	d002      	beq.n	8002870 <I2C_MasterReceive_BTF+0xe2>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d108      	bne.n	8002882 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	e007      	b.n	8002892 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002890:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80028ec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b40      	cmp	r3, #64	@ 0x40
 8002900:	d10a      	bne.n	8002918 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff fcac 	bl	800226e <HAL_I2C_MemRxCpltCallback>
}
 8002916:	e027      	b.n	8002968 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b08      	cmp	r3, #8
 8002924:	d002      	beq.n	800292c <I2C_MasterReceive_BTF+0x19e>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b20      	cmp	r3, #32
 800292a:	d103      	bne.n	8002934 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	631a      	str	r2, [r3, #48]	@ 0x30
 8002932:	e002      	b.n	800293a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2212      	movs	r2, #18
 8002938:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff fc79 	bl	8002232 <HAL_I2C_MasterRxCpltCallback>
}
 8002940:	e012      	b.n	8002968 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b40      	cmp	r3, #64	@ 0x40
 8002982:	d117      	bne.n	80029b4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002988:	2b00      	cmp	r3, #0
 800298a:	d109      	bne.n	80029a0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800299c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800299e:	e067      	b.n	8002a70 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	611a      	str	r2, [r3, #16]
}
 80029b2:	e05d      	b.n	8002a70 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029bc:	d133      	bne.n	8002a26 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b21      	cmp	r3, #33	@ 0x21
 80029c8:	d109      	bne.n	80029de <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029da:	611a      	str	r2, [r3, #16]
 80029dc:	e008      	b.n	80029f0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d004      	beq.n	8002a02 <I2C_Master_SB+0x92>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d108      	bne.n	8002a14 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d032      	beq.n	8002a70 <I2C_Master_SB+0x100>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d02d      	beq.n	8002a70 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a22:	605a      	str	r2, [r3, #4]
}
 8002a24:	e024      	b.n	8002a70 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10e      	bne.n	8002a4c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	11db      	asrs	r3, r3, #7
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f003 0306 	and.w	r3, r3, #6
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f063 030f 	orn	r3, r3, #15
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	611a      	str	r2, [r3, #16]
}
 8002a4a:	e011      	b.n	8002a70 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d10d      	bne.n	8002a70 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	11db      	asrs	r3, r3, #7
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f003 0306 	and.w	r3, r3, #6
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f063 030e 	orn	r3, r3, #14
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d004      	beq.n	8002aa2 <I2C_Master_ADD10+0x26>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d108      	bne.n	8002ab4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00c      	beq.n	8002ac4 <I2C_Master_ADD10+0x48>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d007      	beq.n	8002ac4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ac2:	605a      	str	r2, [r3, #4]
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b091      	sub	sp, #68	@ 0x44
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ade:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b22      	cmp	r3, #34	@ 0x22
 8002af8:	f040 8169 	bne.w	8002dce <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10f      	bne.n	8002b24 <I2C_Master_ADDR+0x54>
 8002b04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b08:	2b40      	cmp	r3, #64	@ 0x40
 8002b0a:	d10b      	bne.n	8002b24 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b22:	e160      	b.n	8002de6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11d      	bne.n	8002b68 <I2C_Master_ADDR+0x98>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002b34:	d118      	bne.n	8002b68 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b36:	2300      	movs	r3, #0
 8002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b5a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b66:	e13e      	b.n	8002de6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d113      	bne.n	8002b9a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b72:	2300      	movs	r3, #0
 8002b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	e115      	b.n	8002dc6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	f040 808a 	bne.w	8002cba <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bac:	d137      	bne.n	8002c1e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bbc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bcc:	d113      	bne.n	8002bf6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bdc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	e0e7      	b.n	8002dc6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	623b      	str	r3, [r7, #32]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	623b      	str	r3, [r7, #32]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	623b      	str	r3, [r7, #32]
 8002c0a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e0d3      	b.n	8002dc6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d02e      	beq.n	8002c82 <I2C_Master_ADDR+0x1b2>
 8002c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d02b      	beq.n	8002c82 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2c:	2b12      	cmp	r3, #18
 8002c2e:	d102      	bne.n	8002c36 <I2C_Master_ADDR+0x166>
 8002c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d125      	bne.n	8002c82 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d00e      	beq.n	8002c5a <I2C_Master_ADDR+0x18a>
 8002c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d00b      	beq.n	8002c5a <I2C_Master_ADDR+0x18a>
 8002c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c44:	2b10      	cmp	r3, #16
 8002c46:	d008      	beq.n	8002c5a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e007      	b.n	8002c6a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c68:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	e0a1      	b.n	8002dc6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c90:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e085      	b.n	8002dc6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d14d      	bne.n	8002d60 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d016      	beq.n	8002cf8 <I2C_Master_ADDR+0x228>
 8002cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d013      	beq.n	8002cf8 <I2C_Master_ADDR+0x228>
 8002cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd2:	2b10      	cmp	r3, #16
 8002cd4:	d010      	beq.n	8002cf8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	e007      	b.n	8002d08 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d06:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d16:	d117      	bne.n	8002d48 <I2C_Master_ADDR+0x278>
 8002d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d1e:	d00b      	beq.n	8002d38 <I2C_Master_ADDR+0x268>
 8002d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d008      	beq.n	8002d38 <I2C_Master_ADDR+0x268>
 8002d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d005      	beq.n	8002d38 <I2C_Master_ADDR+0x268>
 8002d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d002      	beq.n	8002d38 <I2C_Master_ADDR+0x268>
 8002d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d107      	bne.n	8002d48 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d46:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	e032      	b.n	8002dc6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d6e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d7e:	d117      	bne.n	8002db0 <I2C_Master_ADDR+0x2e0>
 8002d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d86:	d00b      	beq.n	8002da0 <I2C_Master_ADDR+0x2d0>
 8002d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d008      	beq.n	8002da0 <I2C_Master_ADDR+0x2d0>
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d005      	beq.n	8002da0 <I2C_Master_ADDR+0x2d0>
 8002d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d002      	beq.n	8002da0 <I2C_Master_ADDR+0x2d0>
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d107      	bne.n	8002db0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002dae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002dcc:	e00b      	b.n	8002de6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
}
 8002de4:	e7ff      	b.n	8002de6 <I2C_Master_ADDR+0x316>
 8002de6:	bf00      	nop
 8002de8:	3744      	adds	r7, #68	@ 0x44
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e00:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d02b      	beq.n	8002e64 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d114      	bne.n	8002e64 <I2C_SlaveTransmit_TXE+0x72>
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b29      	cmp	r3, #41	@ 0x29
 8002e3e:	d111      	bne.n	8002e64 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e4e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2221      	movs	r2, #33	@ 0x21
 8002e54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2228      	movs	r2, #40	@ 0x28
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff f9f1 	bl	8002246 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d011      	beq.n	8002ea2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ebc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d02c      	beq.n	8002f22 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d114      	bne.n	8002f22 <I2C_SlaveReceive_RXNE+0x74>
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b2a      	cmp	r3, #42	@ 0x2a
 8002efc:	d111      	bne.n	8002f22 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f0c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2222      	movs	r2, #34	@ 0x22
 8002f12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2228      	movs	r2, #40	@ 0x28
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7fd fcc9 	bl	80008b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d012      	beq.n	8002f62 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f88:	2b28      	cmp	r3, #40	@ 0x28
 8002f8a:	d127      	bne.n	8002fdc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f9a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	09db      	lsrs	r3, r3, #7
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d103      	bne.n	8002fc0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	81bb      	strh	r3, [r7, #12]
 8002fbe:	e002      	b.n	8002fc6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002fce:	89ba      	ldrh	r2, [r7, #12]
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7fd fc2f 	bl	8000838 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002fda:	e00e      	b.n	8002ffa <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003012:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003022:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003024:	2300      	movs	r3, #0
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003050:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800305c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003060:	d172      	bne.n	8003148 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	2b22      	cmp	r3, #34	@ 0x22
 8003066:	d002      	beq.n	800306e <I2C_Slave_STOPF+0x6a>
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b2a      	cmp	r3, #42	@ 0x2a
 800306c:	d135      	bne.n	80030da <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	b29a      	uxth	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	f043 0204 	orr.w	r2, r3, #4
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe f9be 	bl	8001428 <HAL_DMA_GetState>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d049      	beq.n	8003146 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b6:	4a69      	ldr	r2, [pc, #420]	@ (800325c <I2C_Slave_STOPF+0x258>)
 80030b8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe f806 	bl	80010d0 <HAL_DMA_Abort_IT>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d03d      	beq.n	8003146 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030d4:	4610      	mov	r0, r2
 80030d6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030d8:	e035      	b.n	8003146 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	f043 0204 	orr.w	r2, r3, #4
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800310c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe f988 	bl	8001428 <HAL_DMA_GetState>
 8003118:	4603      	mov	r3, r0
 800311a:	2b01      	cmp	r3, #1
 800311c:	d014      	beq.n	8003148 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003122:	4a4e      	ldr	r2, [pc, #312]	@ (800325c <I2C_Slave_STOPF+0x258>)
 8003124:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd ffd0 	bl	80010d0 <HAL_DMA_Abort_IT>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800313a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003140:	4610      	mov	r0, r2
 8003142:	4798      	blx	r3
 8003144:	e000      	b.n	8003148 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003146:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d03e      	beq.n	80031d0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b04      	cmp	r3, #4
 800315e:	d112      	bne.n	8003186 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003190:	2b40      	cmp	r3, #64	@ 0x40
 8003192:	d112      	bne.n	80031ba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	f043 0204 	orr.w	r2, r3, #4
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f8b7 	bl	800334c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80031de:	e039      	b.n	8003254 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80031e4:	d109      	bne.n	80031fa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2228      	movs	r2, #40	@ 0x28
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7fd fb5d 	bl	80008b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b28      	cmp	r3, #40	@ 0x28
 8003204:	d111      	bne.n	800322a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a15      	ldr	r2, [pc, #84]	@ (8003260 <I2C_Slave_STOPF+0x25c>)
 800320a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fd fb86 	bl	8000934 <HAL_I2C_ListenCpltCallback>
}
 8003228:	e014      	b.n	8003254 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	2b22      	cmp	r3, #34	@ 0x22
 8003230:	d002      	beq.n	8003238 <I2C_Slave_STOPF+0x234>
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	2b22      	cmp	r3, #34	@ 0x22
 8003236:	d10d      	bne.n	8003254 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fd fb30 	bl	80008b4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	080035b1 	.word	0x080035b1
 8003260:	ffff0000 	.word	0xffff0000

08003264 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003272:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003278:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d002      	beq.n	8003286 <I2C_Slave_AF+0x22>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b20      	cmp	r3, #32
 8003284:	d129      	bne.n	80032da <I2C_Slave_AF+0x76>
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	2b28      	cmp	r3, #40	@ 0x28
 800328a:	d126      	bne.n	80032da <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a2e      	ldr	r2, [pc, #184]	@ (8003348 <I2C_Slave_AF+0xe4>)
 8003290:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032a0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032aa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ba:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fd fb2e 	bl	8000934 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80032d8:	e031      	b.n	800333e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	2b21      	cmp	r3, #33	@ 0x21
 80032de:	d129      	bne.n	8003334 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a19      	ldr	r2, [pc, #100]	@ (8003348 <I2C_Slave_AF+0xe4>)
 80032e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2221      	movs	r2, #33	@ 0x21
 80032ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800330a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003314:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003324:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fe fc30 	bl	8001b8c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7fe ff8a 	bl	8002246 <HAL_I2C_SlaveTxCpltCallback>
}
 8003332:	e004      	b.n	800333e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800333c:	615a      	str	r2, [r3, #20]
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	ffff0000 	.word	0xffff0000

0800334c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800335a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003362:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003364:	7bbb      	ldrb	r3, [r7, #14]
 8003366:	2b10      	cmp	r3, #16
 8003368:	d002      	beq.n	8003370 <I2C_ITError+0x24>
 800336a:	7bbb      	ldrb	r3, [r7, #14]
 800336c:	2b40      	cmp	r3, #64	@ 0x40
 800336e:	d10a      	bne.n	8003386 <I2C_ITError+0x3a>
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	2b22      	cmp	r3, #34	@ 0x22
 8003374:	d107      	bne.n	8003386 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003384:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800338c:	2b28      	cmp	r3, #40	@ 0x28
 800338e:	d107      	bne.n	80033a0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2228      	movs	r2, #40	@ 0x28
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800339e:	e015      	b.n	80033cc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033ae:	d00a      	beq.n	80033c6 <I2C_ITError+0x7a>
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b60      	cmp	r3, #96	@ 0x60
 80033b4:	d007      	beq.n	80033c6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033da:	d162      	bne.n	80034a2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d020      	beq.n	800343c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fe:	4a6a      	ldr	r2, [pc, #424]	@ (80035a8 <I2C_ITError+0x25c>)
 8003400:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003406:	4618      	mov	r0, r3
 8003408:	f7fd fe62 	bl	80010d0 <HAL_DMA_Abort_IT>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8089 	beq.w	8003526 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003436:	4610      	mov	r0, r2
 8003438:	4798      	blx	r3
 800343a:	e074      	b.n	8003526 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003440:	4a59      	ldr	r2, [pc, #356]	@ (80035a8 <I2C_ITError+0x25c>)
 8003442:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd fe41 	bl	80010d0 <HAL_DMA_Abort_IT>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d068      	beq.n	8003526 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345e:	2b40      	cmp	r3, #64	@ 0x40
 8003460:	d10b      	bne.n	800347a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0201 	bic.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800349c:	4610      	mov	r0, r2
 800349e:	4798      	blx	r3
 80034a0:	e041      	b.n	8003526 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b60      	cmp	r3, #96	@ 0x60
 80034ac:	d125      	bne.n	80034fa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c6:	2b40      	cmp	r3, #64	@ 0x40
 80034c8:	d10b      	bne.n	80034e2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fe fecf 	bl	8002296 <HAL_I2C_AbortCpltCallback>
 80034f8:	e015      	b.n	8003526 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003504:	2b40      	cmp	r3, #64	@ 0x40
 8003506:	d10b      	bne.n	8003520 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7fe feae 	bl	8002282 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10e      	bne.n	8003554 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800353c:	2b00      	cmp	r3, #0
 800353e:	d109      	bne.n	8003554 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003546:	2b00      	cmp	r3, #0
 8003548:	d104      	bne.n	8003554 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003562:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b04      	cmp	r3, #4
 8003576:	d113      	bne.n	80035a0 <I2C_ITError+0x254>
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b28      	cmp	r3, #40	@ 0x28
 800357c:	d110      	bne.n	80035a0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a0a      	ldr	r2, [pc, #40]	@ (80035ac <I2C_ITError+0x260>)
 8003582:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fd f9ca 	bl	8000934 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	080035b1 	.word	0x080035b1
 80035ac:	ffff0000 	.word	0xffff0000

080035b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80035ca:	4b4b      	ldr	r3, [pc, #300]	@ (80036f8 <I2C_DMAAbort+0x148>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	08db      	lsrs	r3, r3, #3
 80035d0:	4a4a      	ldr	r2, [pc, #296]	@ (80036fc <I2C_DMAAbort+0x14c>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	0a1a      	lsrs	r2, r3, #8
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	00da      	lsls	r2, r3, #3
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80035f6:	e00a      	b.n	800360e <I2C_DMAAbort+0x5e>
    }
    count--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800360c:	d0ea      	beq.n	80035e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800361a:	2200      	movs	r2, #0
 800361c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800362a:	2200      	movs	r2, #0
 800362c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800363c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2200      	movs	r2, #0
 8003642:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003650:	2200      	movs	r2, #0
 8003652:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003660:	2200      	movs	r2, #0
 8003662:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b60      	cmp	r3, #96	@ 0x60
 800367e:	d10e      	bne.n	800369e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2200      	movs	r2, #0
 8003694:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003696:	6978      	ldr	r0, [r7, #20]
 8003698:	f7fe fdfd 	bl	8002296 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800369c:	e027      	b.n	80036ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036a4:	2b28      	cmp	r3, #40	@ 0x28
 80036a6:	d117      	bne.n	80036d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2200      	movs	r2, #0
 80036cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2228      	movs	r2, #40	@ 0x28
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80036d6:	e007      	b.n	80036e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80036e8:	6978      	ldr	r0, [r7, #20]
 80036ea:	f7fe fdca 	bl	8002282 <HAL_I2C_ErrorCallback>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000004 	.word	0x20000004
 80036fc:	14f8b589 	.word	0x14f8b589

08003700 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800370c:	4b13      	ldr	r3, [pc, #76]	@ (800375c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	08db      	lsrs	r3, r3, #3
 8003712:	4a13      	ldr	r2, [pc, #76]	@ (8003760 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	0a1a      	lsrs	r2, r3, #8
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3b01      	subs	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d107      	bne.n	800373e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e008      	b.n	8003750 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800374c:	d0e9      	beq.n	8003722 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	20000004 	.word	0x20000004
 8003760:	14f8b589 	.word	0x14f8b589

08003764 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003774:	d103      	bne.n	800377e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800377c:	e007      	b.n	800378e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003786:	d102      	bne.n	800378e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2208      	movs	r2, #8
 800378c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0cc      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b68      	ldr	r3, [pc, #416]	@ (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d90c      	bls.n	80037d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b65      	ldr	r3, [pc, #404]	@ (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b63      	ldr	r3, [pc, #396]	@ (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0b8      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d020      	beq.n	8003826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f0:	4b59      	ldr	r3, [pc, #356]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a58      	ldr	r2, [pc, #352]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003808:	4b53      	ldr	r3, [pc, #332]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a52      	ldr	r2, [pc, #328]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b50      	ldr	r3, [pc, #320]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	494d      	ldr	r1, [pc, #308]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d044      	beq.n	80038bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b47      	ldr	r3, [pc, #284]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d119      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e07f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d003      	beq.n	800385a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003856:	2b03      	cmp	r3, #3
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385a:	4b3f      	ldr	r3, [pc, #252]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e06f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386a:	4b3b      	ldr	r3, [pc, #236]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e067      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387a:	4b37      	ldr	r3, [pc, #220]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 0203 	bic.w	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4934      	ldr	r1, [pc, #208]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800388c:	f7fd fa54 	bl	8000d38 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	e00a      	b.n	80038aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003894:	f7fd fa50 	bl	8000d38 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e04f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 020c 	and.w	r2, r3, #12
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d1eb      	bne.n	8003894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038bc:	4b25      	ldr	r3, [pc, #148]	@ (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d20c      	bcs.n	80038e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b22      	ldr	r3, [pc, #136]	@ (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e032      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f0:	4b19      	ldr	r3, [pc, #100]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4916      	ldr	r1, [pc, #88]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800390e:	4b12      	ldr	r3, [pc, #72]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	490e      	ldr	r1, [pc, #56]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003922:	f000 f855 	bl	80039d0 <HAL_RCC_GetSysClockFreq>
 8003926:	4602      	mov	r2, r0
 8003928:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	490a      	ldr	r1, [pc, #40]	@ (800395c <HAL_RCC_ClockConfig+0x1c0>)
 8003934:	5ccb      	ldrb	r3, [r1, r3]
 8003936:	fa22 f303 	lsr.w	r3, r2, r3
 800393a:	4a09      	ldr	r2, [pc, #36]	@ (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800393e:	4b09      	ldr	r3, [pc, #36]	@ (8003964 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd f9b4 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023c00 	.word	0x40023c00
 8003958:	40023800 	.word	0x40023800
 800395c:	08004c44 	.word	0x08004c44
 8003960:	20000004 	.word	0x20000004
 8003964:	20000008 	.word	0x20000008

08003968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800396c:	4b03      	ldr	r3, [pc, #12]	@ (800397c <HAL_RCC_GetHCLKFreq+0x14>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000004 	.word	0x20000004

08003980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003984:	f7ff fff0 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8003988:	4602      	mov	r2, r0
 800398a:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	0a9b      	lsrs	r3, r3, #10
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	4903      	ldr	r1, [pc, #12]	@ (80039a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003996:	5ccb      	ldrb	r3, [r1, r3]
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40023800 	.word	0x40023800
 80039a4:	08004c54 	.word	0x08004c54

080039a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039ac:	f7ff ffdc 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 80039b0:	4602      	mov	r2, r0
 80039b2:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	0b5b      	lsrs	r3, r3, #13
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	4903      	ldr	r1, [pc, #12]	@ (80039cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039be:	5ccb      	ldrb	r3, [r1, r3]
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40023800 	.word	0x40023800
 80039cc:	08004c54 	.word	0x08004c54

080039d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d4:	b0ae      	sub	sp, #184	@ 0xb8
 80039d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f6:	4bcb      	ldr	r3, [pc, #812]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x354>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b0c      	cmp	r3, #12
 8003a00:	f200 8206 	bhi.w	8003e10 <HAL_RCC_GetSysClockFreq+0x440>
 8003a04:	a201      	add	r2, pc, #4	@ (adr r2, 8003a0c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003a41 	.word	0x08003a41
 8003a10:	08003e11 	.word	0x08003e11
 8003a14:	08003e11 	.word	0x08003e11
 8003a18:	08003e11 	.word	0x08003e11
 8003a1c:	08003a49 	.word	0x08003a49
 8003a20:	08003e11 	.word	0x08003e11
 8003a24:	08003e11 	.word	0x08003e11
 8003a28:	08003e11 	.word	0x08003e11
 8003a2c:	08003a51 	.word	0x08003a51
 8003a30:	08003e11 	.word	0x08003e11
 8003a34:	08003e11 	.word	0x08003e11
 8003a38:	08003e11 	.word	0x08003e11
 8003a3c:	08003c41 	.word	0x08003c41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a40:	4bb9      	ldr	r3, [pc, #740]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a46:	e1e7      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a48:	4bb8      	ldr	r3, [pc, #736]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a4e:	e1e3      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a50:	4bb4      	ldr	r3, [pc, #720]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a5c:	4bb1      	ldr	r3, [pc, #708]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d071      	beq.n	8003b4c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a68:	4bae      	ldr	r3, [pc, #696]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	099b      	lsrs	r3, r3, #6
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a74:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a84:	2300      	movs	r3, #0
 8003a86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a8e:	4622      	mov	r2, r4
 8003a90:	462b      	mov	r3, r5
 8003a92:	f04f 0000 	mov.w	r0, #0
 8003a96:	f04f 0100 	mov.w	r1, #0
 8003a9a:	0159      	lsls	r1, r3, #5
 8003a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa0:	0150      	lsls	r0, r2, #5
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	1a51      	subs	r1, r2, r1
 8003aaa:	6439      	str	r1, [r7, #64]	@ 0x40
 8003aac:	4629      	mov	r1, r5
 8003aae:	eb63 0301 	sbc.w	r3, r3, r1
 8003ab2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	018b      	lsls	r3, r1, #6
 8003ac4:	4641      	mov	r1, r8
 8003ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aca:	4641      	mov	r1, r8
 8003acc:	018a      	lsls	r2, r1, #6
 8003ace:	4641      	mov	r1, r8
 8003ad0:	1a51      	subs	r1, r2, r1
 8003ad2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ad4:	4649      	mov	r1, r9
 8003ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8003ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003ae8:	4649      	mov	r1, r9
 8003aea:	00cb      	lsls	r3, r1, #3
 8003aec:	4641      	mov	r1, r8
 8003aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003af2:	4641      	mov	r1, r8
 8003af4:	00ca      	lsls	r2, r1, #3
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	4622      	mov	r2, r4
 8003afe:	189b      	adds	r3, r3, r2
 8003b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b02:	462b      	mov	r3, r5
 8003b04:	460a      	mov	r2, r1
 8003b06:	eb42 0303 	adc.w	r3, r2, r3
 8003b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b18:	4629      	mov	r1, r5
 8003b1a:	024b      	lsls	r3, r1, #9
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b22:	4621      	mov	r1, r4
 8003b24:	024a      	lsls	r2, r1, #9
 8003b26:	4610      	mov	r0, r2
 8003b28:	4619      	mov	r1, r3
 8003b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b38:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003b3c:	f7fc fb6a 	bl	8000214 <__aeabi_uldivmod>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4613      	mov	r3, r2
 8003b46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b4a:	e067      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4c:	4b75      	ldr	r3, [pc, #468]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	099b      	lsrs	r3, r3, #6
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b58:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b66:	2300      	movs	r3, #0
 8003b68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003b6e:	4622      	mov	r2, r4
 8003b70:	462b      	mov	r3, r5
 8003b72:	f04f 0000 	mov.w	r0, #0
 8003b76:	f04f 0100 	mov.w	r1, #0
 8003b7a:	0159      	lsls	r1, r3, #5
 8003b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b80:	0150      	lsls	r0, r2, #5
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4621      	mov	r1, r4
 8003b88:	1a51      	subs	r1, r2, r1
 8003b8a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	018b      	lsls	r3, r1, #6
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003baa:	4641      	mov	r1, r8
 8003bac:	018a      	lsls	r2, r1, #6
 8003bae:	4641      	mov	r1, r8
 8003bb0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bb4:	4649      	mov	r1, r9
 8003bb6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bc6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bce:	4692      	mov	sl, r2
 8003bd0:	469b      	mov	fp, r3
 8003bd2:	4623      	mov	r3, r4
 8003bd4:	eb1a 0303 	adds.w	r3, sl, r3
 8003bd8:	623b      	str	r3, [r7, #32]
 8003bda:	462b      	mov	r3, r5
 8003bdc:	eb4b 0303 	adc.w	r3, fp, r3
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003bee:	4629      	mov	r1, r5
 8003bf0:	028b      	lsls	r3, r1, #10
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	028a      	lsls	r2, r1, #10
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4619      	mov	r1, r3
 8003c00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c04:	2200      	movs	r2, #0
 8003c06:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c08:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c0e:	f7fc fb01 	bl	8000214 <__aeabi_uldivmod>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4613      	mov	r3, r2
 8003c18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c1c:	4b41      	ldr	r3, [pc, #260]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	0c1b      	lsrs	r3, r3, #16
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	3301      	adds	r3, #1
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003c2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c3e:	e0eb      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c40:	4b38      	ldr	r3, [pc, #224]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c4c:	4b35      	ldr	r3, [pc, #212]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d06b      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c58:	4b32      	ldr	r3, [pc, #200]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	099b      	lsrs	r3, r3, #6
 8003c5e:	2200      	movs	r2, #0
 8003c60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c70:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003c74:	4622      	mov	r2, r4
 8003c76:	462b      	mov	r3, r5
 8003c78:	f04f 0000 	mov.w	r0, #0
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	0159      	lsls	r1, r3, #5
 8003c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c86:	0150      	lsls	r0, r2, #5
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	1a51      	subs	r1, r2, r1
 8003c90:	61b9      	str	r1, [r7, #24]
 8003c92:	4629      	mov	r1, r5
 8003c94:	eb63 0301 	sbc.w	r3, r3, r1
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ca6:	4659      	mov	r1, fp
 8003ca8:	018b      	lsls	r3, r1, #6
 8003caa:	4651      	mov	r1, sl
 8003cac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cb0:	4651      	mov	r1, sl
 8003cb2:	018a      	lsls	r2, r1, #6
 8003cb4:	4651      	mov	r1, sl
 8003cb6:	ebb2 0801 	subs.w	r8, r2, r1
 8003cba:	4659      	mov	r1, fp
 8003cbc:	eb63 0901 	sbc.w	r9, r3, r1
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ccc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cd4:	4690      	mov	r8, r2
 8003cd6:	4699      	mov	r9, r3
 8003cd8:	4623      	mov	r3, r4
 8003cda:	eb18 0303 	adds.w	r3, r8, r3
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	462b      	mov	r3, r5
 8003ce2:	eb49 0303 	adc.w	r3, r9, r3
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	024b      	lsls	r3, r1, #9
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cfe:	4621      	mov	r1, r4
 8003d00:	024a      	lsls	r2, r1, #9
 8003d02:	4610      	mov	r0, r2
 8003d04:	4619      	mov	r1, r3
 8003d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d0e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003d10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d14:	f7fc fa7e 	bl	8000214 <__aeabi_uldivmod>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d22:	e065      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x420>
 8003d24:	40023800 	.word	0x40023800
 8003d28:	00f42400 	.word	0x00f42400
 8003d2c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d30:	4b3d      	ldr	r3, [pc, #244]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	2200      	movs	r2, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d40:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d42:	2300      	movs	r3, #0
 8003d44:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d46:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003d4a:	4642      	mov	r2, r8
 8003d4c:	464b      	mov	r3, r9
 8003d4e:	f04f 0000 	mov.w	r0, #0
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	0159      	lsls	r1, r3, #5
 8003d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5c:	0150      	lsls	r0, r2, #5
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4641      	mov	r1, r8
 8003d64:	1a51      	subs	r1, r2, r1
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	4649      	mov	r1, r9
 8003d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d7c:	4659      	mov	r1, fp
 8003d7e:	018b      	lsls	r3, r1, #6
 8003d80:	4651      	mov	r1, sl
 8003d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d86:	4651      	mov	r1, sl
 8003d88:	018a      	lsls	r2, r1, #6
 8003d8a:	4651      	mov	r1, sl
 8003d8c:	1a54      	subs	r4, r2, r1
 8003d8e:	4659      	mov	r1, fp
 8003d90:	eb63 0501 	sbc.w	r5, r3, r1
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	00eb      	lsls	r3, r5, #3
 8003d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003da2:	00e2      	lsls	r2, r4, #3
 8003da4:	4614      	mov	r4, r2
 8003da6:	461d      	mov	r5, r3
 8003da8:	4643      	mov	r3, r8
 8003daa:	18e3      	adds	r3, r4, r3
 8003dac:	603b      	str	r3, [r7, #0]
 8003dae:	464b      	mov	r3, r9
 8003db0:	eb45 0303 	adc.w	r3, r5, r3
 8003db4:	607b      	str	r3, [r7, #4]
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	028b      	lsls	r3, r1, #10
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dcc:	4621      	mov	r1, r4
 8003dce:	028a      	lsls	r2, r1, #10
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dd8:	2200      	movs	r2, #0
 8003dda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ddc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003dde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003de2:	f7fc fa17 	bl	8000214 <__aeabi_uldivmod>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4613      	mov	r3, r2
 8003dec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003df0:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x458>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	0f1b      	lsrs	r3, r3, #28
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003dfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e0e:	e003      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e10:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	37b8      	adds	r7, #184	@ 0xb8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	00f42400 	.word	0x00f42400

08003e30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e28d      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 8083 	beq.w	8003f56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e50:	4b94      	ldr	r3, [pc, #592]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d019      	beq.n	8003e90 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e5c:	4b91      	ldr	r3, [pc, #580]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e68:	4b8e      	ldr	r3, [pc, #568]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e74:	d00c      	beq.n	8003e90 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e76:	4b8b      	ldr	r3, [pc, #556]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e7e:	2b0c      	cmp	r3, #12
 8003e80:	d112      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e82:	4b88      	ldr	r3, [pc, #544]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e8e:	d10b      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e90:	4b84      	ldr	r3, [pc, #528]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d05b      	beq.n	8003f54 <HAL_RCC_OscConfig+0x124>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d157      	bne.n	8003f54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e25a      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb0:	d106      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x90>
 8003eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a7b      	ldr	r2, [pc, #492]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e01d      	b.n	8003efc <HAL_RCC_OscConfig+0xcc>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0xb4>
 8003eca:	4b76      	ldr	r3, [pc, #472]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a75      	ldr	r2, [pc, #468]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b73      	ldr	r3, [pc, #460]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a72      	ldr	r2, [pc, #456]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e00b      	b.n	8003efc <HAL_RCC_OscConfig+0xcc>
 8003ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a6e      	ldr	r2, [pc, #440]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	4b6c      	ldr	r3, [pc, #432]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a6b      	ldr	r2, [pc, #428]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d013      	beq.n	8003f2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f04:	f7fc ff18 	bl	8000d38 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f0c:	f7fc ff14 	bl	8000d38 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	@ 0x64
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e21f      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	4b61      	ldr	r3, [pc, #388]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0xdc>
 8003f2a:	e014      	b.n	8003f56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fc ff04 	bl	8000d38 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f34:	f7fc ff00 	bl	8000d38 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b64      	cmp	r3, #100	@ 0x64
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e20b      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f46:	4b57      	ldr	r3, [pc, #348]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x104>
 8003f52:	e000      	b.n	8003f56 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d06f      	beq.n	8004042 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f62:	4b50      	ldr	r3, [pc, #320]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d017      	beq.n	8003f9e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f6e:	4b4d      	ldr	r3, [pc, #308]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d105      	bne.n	8003f86 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f86:	4b47      	ldr	r3, [pc, #284]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f8e:	2b0c      	cmp	r3, #12
 8003f90:	d11c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f92:	4b44      	ldr	r3, [pc, #272]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d116      	bne.n	8003fcc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9e:	4b41      	ldr	r3, [pc, #260]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x186>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d001      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e1d3      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4937      	ldr	r1, [pc, #220]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fca:	e03a      	b.n	8004042 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d020      	beq.n	8004016 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd4:	4b34      	ldr	r3, [pc, #208]	@ (80040a8 <HAL_RCC_OscConfig+0x278>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fda:	f7fc fead 	bl	8000d38 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe2:	f7fc fea9 	bl	8000d38 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e1b4      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004000:	4b28      	ldr	r3, [pc, #160]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4925      	ldr	r1, [pc, #148]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8004010:	4313      	orrs	r3, r2
 8004012:	600b      	str	r3, [r1, #0]
 8004014:	e015      	b.n	8004042 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004016:	4b24      	ldr	r3, [pc, #144]	@ (80040a8 <HAL_RCC_OscConfig+0x278>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fc fe8c 	bl	8000d38 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004024:	f7fc fe88 	bl	8000d38 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e193      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004036:	4b1b      	ldr	r3, [pc, #108]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d036      	beq.n	80040bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d016      	beq.n	8004084 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004056:	4b15      	ldr	r3, [pc, #84]	@ (80040ac <HAL_RCC_OscConfig+0x27c>)
 8004058:	2201      	movs	r2, #1
 800405a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405c:	f7fc fe6c 	bl	8000d38 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004064:	f7fc fe68 	bl	8000d38 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e173      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004076:	4b0b      	ldr	r3, [pc, #44]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8004078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0x234>
 8004082:	e01b      	b.n	80040bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004084:	4b09      	ldr	r3, [pc, #36]	@ (80040ac <HAL_RCC_OscConfig+0x27c>)
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408a:	f7fc fe55 	bl	8000d38 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004090:	e00e      	b.n	80040b0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004092:	f7fc fe51 	bl	8000d38 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d907      	bls.n	80040b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e15c      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
 80040a4:	40023800 	.word	0x40023800
 80040a8:	42470000 	.word	0x42470000
 80040ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b0:	4b8a      	ldr	r3, [pc, #552]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 80040b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1ea      	bne.n	8004092 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8097 	beq.w	80041f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ca:	2300      	movs	r3, #0
 80040cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ce:	4b83      	ldr	r3, [pc, #524]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10f      	bne.n	80040fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	4b7f      	ldr	r3, [pc, #508]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	4a7e      	ldr	r2, [pc, #504]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 80040e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ea:	4b7c      	ldr	r3, [pc, #496]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f6:	2301      	movs	r3, #1
 80040f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fa:	4b79      	ldr	r3, [pc, #484]	@ (80042e0 <HAL_RCC_OscConfig+0x4b0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d118      	bne.n	8004138 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004106:	4b76      	ldr	r3, [pc, #472]	@ (80042e0 <HAL_RCC_OscConfig+0x4b0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a75      	ldr	r2, [pc, #468]	@ (80042e0 <HAL_RCC_OscConfig+0x4b0>)
 800410c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004112:	f7fc fe11 	bl	8000d38 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411a:	f7fc fe0d 	bl	8000d38 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e118      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412c:	4b6c      	ldr	r3, [pc, #432]	@ (80042e0 <HAL_RCC_OscConfig+0x4b0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d106      	bne.n	800414e <HAL_RCC_OscConfig+0x31e>
 8004140:	4b66      	ldr	r3, [pc, #408]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 8004142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004144:	4a65      	ldr	r2, [pc, #404]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	6713      	str	r3, [r2, #112]	@ 0x70
 800414c:	e01c      	b.n	8004188 <HAL_RCC_OscConfig+0x358>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b05      	cmp	r3, #5
 8004154:	d10c      	bne.n	8004170 <HAL_RCC_OscConfig+0x340>
 8004156:	4b61      	ldr	r3, [pc, #388]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415a:	4a60      	ldr	r2, [pc, #384]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 800415c:	f043 0304 	orr.w	r3, r3, #4
 8004160:	6713      	str	r3, [r2, #112]	@ 0x70
 8004162:	4b5e      	ldr	r3, [pc, #376]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004166:	4a5d      	ldr	r2, [pc, #372]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	6713      	str	r3, [r2, #112]	@ 0x70
 800416e:	e00b      	b.n	8004188 <HAL_RCC_OscConfig+0x358>
 8004170:	4b5a      	ldr	r3, [pc, #360]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 8004172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004174:	4a59      	ldr	r2, [pc, #356]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	6713      	str	r3, [r2, #112]	@ 0x70
 800417c:	4b57      	ldr	r3, [pc, #348]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004180:	4a56      	ldr	r2, [pc, #344]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 8004182:	f023 0304 	bic.w	r3, r3, #4
 8004186:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d015      	beq.n	80041bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004190:	f7fc fdd2 	bl	8000d38 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004196:	e00a      	b.n	80041ae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004198:	f7fc fdce 	bl	8000d38 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e0d7      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ae:	4b4b      	ldr	r3, [pc, #300]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0ee      	beq.n	8004198 <HAL_RCC_OscConfig+0x368>
 80041ba:	e014      	b.n	80041e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fc fdbc 	bl	8000d38 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c2:	e00a      	b.n	80041da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c4:	f7fc fdb8 	bl	8000d38 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e0c1      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041da:	4b40      	ldr	r3, [pc, #256]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1ee      	bne.n	80041c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d105      	bne.n	80041f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ec:	4b3b      	ldr	r3, [pc, #236]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	4a3a      	ldr	r2, [pc, #232]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 80041f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80ad 	beq.w	800435c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004202:	4b36      	ldr	r3, [pc, #216]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b08      	cmp	r3, #8
 800420c:	d060      	beq.n	80042d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d145      	bne.n	80042a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004216:	4b33      	ldr	r3, [pc, #204]	@ (80042e4 <HAL_RCC_OscConfig+0x4b4>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fc fd8c 	bl	8000d38 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004224:	f7fc fd88 	bl	8000d38 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e093      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004236:	4b29      	ldr	r3, [pc, #164]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69da      	ldr	r2, [r3, #28]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	019b      	lsls	r3, r3, #6
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	3b01      	subs	r3, #1
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004264:	061b      	lsls	r3, r3, #24
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426c:	071b      	lsls	r3, r3, #28
 800426e:	491b      	ldr	r1, [pc, #108]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 8004270:	4313      	orrs	r3, r2
 8004272:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004274:	4b1b      	ldr	r3, [pc, #108]	@ (80042e4 <HAL_RCC_OscConfig+0x4b4>)
 8004276:	2201      	movs	r2, #1
 8004278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427a:	f7fc fd5d 	bl	8000d38 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004282:	f7fc fd59 	bl	8000d38 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e064      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004294:	4b11      	ldr	r3, [pc, #68]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <HAL_RCC_OscConfig+0x452>
 80042a0:	e05c      	b.n	800435c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a2:	4b10      	ldr	r3, [pc, #64]	@ (80042e4 <HAL_RCC_OscConfig+0x4b4>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fc fd46 	bl	8000d38 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b0:	f7fc fd42 	bl	8000d38 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e04d      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c2:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <HAL_RCC_OscConfig+0x4ac>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x480>
 80042ce:	e045      	b.n	800435c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e040      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40007000 	.word	0x40007000
 80042e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004368 <HAL_RCC_OscConfig+0x538>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d030      	beq.n	8004358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004300:	429a      	cmp	r2, r3
 8004302:	d129      	bne.n	8004358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430e:	429a      	cmp	r2, r3
 8004310:	d122      	bne.n	8004358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004318:	4013      	ands	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800431e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004320:	4293      	cmp	r3, r2
 8004322:	d119      	bne.n	8004358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	3b01      	subs	r3, #1
 8004332:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d10f      	bne.n	8004358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004342:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d107      	bne.n	8004358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004352:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e000      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40023800 	.word	0x40023800

0800436c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e042      	b.n	8004404 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc fb98 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2224      	movs	r2, #36	@ 0x24
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f973 	bl	800469c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	@ 0x28
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b20      	cmp	r3, #32
 800442a:	d175      	bne.n	8004518 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_UART_Transmit+0x2c>
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e06e      	b.n	800451a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2221      	movs	r2, #33	@ 0x21
 8004446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800444a:	f7fc fc75 	bl	8000d38 <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	88fa      	ldrh	r2, [r7, #6]
 800445a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004464:	d108      	bne.n	8004478 <HAL_UART_Transmit+0x6c>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d104      	bne.n	8004478 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	e003      	b.n	8004480 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004480:	e02e      	b.n	80044e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2200      	movs	r2, #0
 800448a:	2180      	movs	r1, #128	@ 0x80
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f848 	bl	8004522 <UART_WaitOnFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e03a      	b.n	800451a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10b      	bne.n	80044c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	3302      	adds	r3, #2
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	e007      	b.n	80044d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	781a      	ldrb	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	3301      	adds	r3, #1
 80044d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1cb      	bne.n	8004482 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2140      	movs	r1, #64	@ 0x40
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f814 	bl	8004522 <UART_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e006      	b.n	800451a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3720      	adds	r7, #32
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b086      	sub	sp, #24
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	4613      	mov	r3, r2
 8004530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004532:	e03b      	b.n	80045ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453a:	d037      	beq.n	80045ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453c:	f7fc fbfc 	bl	8000d38 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	6a3a      	ldr	r2, [r7, #32]
 8004548:	429a      	cmp	r2, r3
 800454a:	d302      	bcc.n	8004552 <UART_WaitOnFlagUntilTimeout+0x30>
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e03a      	b.n	80045cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d023      	beq.n	80045ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b80      	cmp	r3, #128	@ 0x80
 8004568:	d020      	beq.n	80045ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b40      	cmp	r3, #64	@ 0x40
 800456e:	d01d      	beq.n	80045ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b08      	cmp	r3, #8
 800457c:	d116      	bne.n	80045ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f81d 	bl	80045d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2208      	movs	r2, #8
 800459e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e00f      	b.n	80045cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4013      	ands	r3, r2
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d0b4      	beq.n	8004534 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b095      	sub	sp, #84	@ 0x54
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	330c      	adds	r3, #12
 80045e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	330c      	adds	r3, #12
 80045fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80045fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004602:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800460a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e5      	bne.n	80045dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3314      	adds	r3, #20
 8004616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f023 0301 	bic.w	r3, r3, #1
 8004626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3314      	adds	r3, #20
 800462e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004630:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004632:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e5      	bne.n	8004610 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004648:	2b01      	cmp	r3, #1
 800464a:	d119      	bne.n	8004680 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	60bb      	str	r3, [r7, #8]
   return(result);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f023 0310 	bic.w	r3, r3, #16
 8004662:	647b      	str	r3, [r7, #68]	@ 0x44
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800466c:	61ba      	str	r2, [r7, #24]
 800466e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6979      	ldr	r1, [r7, #20]
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	613b      	str	r3, [r7, #16]
   return(result);
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e5      	bne.n	800464c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800468e:	bf00      	nop
 8004690:	3754      	adds	r7, #84	@ 0x54
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800469c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a0:	b0c0      	sub	sp, #256	@ 0x100
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b8:	68d9      	ldr	r1, [r3, #12]
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	ea40 0301 	orr.w	r3, r0, r1
 80046c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	431a      	orrs	r2, r3
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046f4:	f021 010c 	bic.w	r1, r1, #12
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004702:	430b      	orrs	r3, r1
 8004704:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004716:	6999      	ldr	r1, [r3, #24]
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	ea40 0301 	orr.w	r3, r0, r1
 8004722:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b8f      	ldr	r3, [pc, #572]	@ (8004968 <UART_SetConfig+0x2cc>)
 800472c:	429a      	cmp	r2, r3
 800472e:	d005      	beq.n	800473c <UART_SetConfig+0xa0>
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4b8d      	ldr	r3, [pc, #564]	@ (800496c <UART_SetConfig+0x2d0>)
 8004738:	429a      	cmp	r2, r3
 800473a:	d104      	bne.n	8004746 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800473c:	f7ff f934 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8004740:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004744:	e003      	b.n	800474e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004746:	f7ff f91b 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 800474a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004758:	f040 810c 	bne.w	8004974 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800475c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004760:	2200      	movs	r2, #0
 8004762:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004766:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800476a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800476e:	4622      	mov	r2, r4
 8004770:	462b      	mov	r3, r5
 8004772:	1891      	adds	r1, r2, r2
 8004774:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004776:	415b      	adcs	r3, r3
 8004778:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800477a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800477e:	4621      	mov	r1, r4
 8004780:	eb12 0801 	adds.w	r8, r2, r1
 8004784:	4629      	mov	r1, r5
 8004786:	eb43 0901 	adc.w	r9, r3, r1
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800479a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800479e:	4690      	mov	r8, r2
 80047a0:	4699      	mov	r9, r3
 80047a2:	4623      	mov	r3, r4
 80047a4:	eb18 0303 	adds.w	r3, r8, r3
 80047a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047ac:	462b      	mov	r3, r5
 80047ae:	eb49 0303 	adc.w	r3, r9, r3
 80047b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80047c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80047c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80047ca:	460b      	mov	r3, r1
 80047cc:	18db      	adds	r3, r3, r3
 80047ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80047d0:	4613      	mov	r3, r2
 80047d2:	eb42 0303 	adc.w	r3, r2, r3
 80047d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80047d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80047dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80047e0:	f7fb fd18 	bl	8000214 <__aeabi_uldivmod>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4b61      	ldr	r3, [pc, #388]	@ (8004970 <UART_SetConfig+0x2d4>)
 80047ea:	fba3 2302 	umull	r2, r3, r3, r2
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	011c      	lsls	r4, r3, #4
 80047f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004800:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004804:	4642      	mov	r2, r8
 8004806:	464b      	mov	r3, r9
 8004808:	1891      	adds	r1, r2, r2
 800480a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800480c:	415b      	adcs	r3, r3
 800480e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004810:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004814:	4641      	mov	r1, r8
 8004816:	eb12 0a01 	adds.w	sl, r2, r1
 800481a:	4649      	mov	r1, r9
 800481c:	eb43 0b01 	adc.w	fp, r3, r1
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800482c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004834:	4692      	mov	sl, r2
 8004836:	469b      	mov	fp, r3
 8004838:	4643      	mov	r3, r8
 800483a:	eb1a 0303 	adds.w	r3, sl, r3
 800483e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004842:	464b      	mov	r3, r9
 8004844:	eb4b 0303 	adc.w	r3, fp, r3
 8004848:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004858:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800485c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004860:	460b      	mov	r3, r1
 8004862:	18db      	adds	r3, r3, r3
 8004864:	643b      	str	r3, [r7, #64]	@ 0x40
 8004866:	4613      	mov	r3, r2
 8004868:	eb42 0303 	adc.w	r3, r2, r3
 800486c:	647b      	str	r3, [r7, #68]	@ 0x44
 800486e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004872:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004876:	f7fb fccd 	bl	8000214 <__aeabi_uldivmod>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4611      	mov	r1, r2
 8004880:	4b3b      	ldr	r3, [pc, #236]	@ (8004970 <UART_SetConfig+0x2d4>)
 8004882:	fba3 2301 	umull	r2, r3, r3, r1
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	2264      	movs	r2, #100	@ 0x64
 800488a:	fb02 f303 	mul.w	r3, r2, r3
 800488e:	1acb      	subs	r3, r1, r3
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004896:	4b36      	ldr	r3, [pc, #216]	@ (8004970 <UART_SetConfig+0x2d4>)
 8004898:	fba3 2302 	umull	r2, r3, r3, r2
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80048a4:	441c      	add	r4, r3
 80048a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80048b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80048b8:	4642      	mov	r2, r8
 80048ba:	464b      	mov	r3, r9
 80048bc:	1891      	adds	r1, r2, r2
 80048be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048c0:	415b      	adcs	r3, r3
 80048c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80048c8:	4641      	mov	r1, r8
 80048ca:	1851      	adds	r1, r2, r1
 80048cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80048ce:	4649      	mov	r1, r9
 80048d0:	414b      	adcs	r3, r1
 80048d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80048e0:	4659      	mov	r1, fp
 80048e2:	00cb      	lsls	r3, r1, #3
 80048e4:	4651      	mov	r1, sl
 80048e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ea:	4651      	mov	r1, sl
 80048ec:	00ca      	lsls	r2, r1, #3
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	4642      	mov	r2, r8
 80048f6:	189b      	adds	r3, r3, r2
 80048f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048fc:	464b      	mov	r3, r9
 80048fe:	460a      	mov	r2, r1
 8004900:	eb42 0303 	adc.w	r3, r2, r3
 8004904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004914:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004918:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800491c:	460b      	mov	r3, r1
 800491e:	18db      	adds	r3, r3, r3
 8004920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004922:	4613      	mov	r3, r2
 8004924:	eb42 0303 	adc.w	r3, r2, r3
 8004928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800492a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800492e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004932:	f7fb fc6f 	bl	8000214 <__aeabi_uldivmod>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4b0d      	ldr	r3, [pc, #52]	@ (8004970 <UART_SetConfig+0x2d4>)
 800493c:	fba3 1302 	umull	r1, r3, r3, r2
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	2164      	movs	r1, #100	@ 0x64
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	3332      	adds	r3, #50	@ 0x32
 800494e:	4a08      	ldr	r2, [pc, #32]	@ (8004970 <UART_SetConfig+0x2d4>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	f003 0207 	and.w	r2, r3, #7
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4422      	add	r2, r4
 8004962:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004964:	e106      	b.n	8004b74 <UART_SetConfig+0x4d8>
 8004966:	bf00      	nop
 8004968:	40011000 	.word	0x40011000
 800496c:	40011400 	.word	0x40011400
 8004970:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004978:	2200      	movs	r2, #0
 800497a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800497e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004982:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004986:	4642      	mov	r2, r8
 8004988:	464b      	mov	r3, r9
 800498a:	1891      	adds	r1, r2, r2
 800498c:	6239      	str	r1, [r7, #32]
 800498e:	415b      	adcs	r3, r3
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24
 8004992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004996:	4641      	mov	r1, r8
 8004998:	1854      	adds	r4, r2, r1
 800499a:	4649      	mov	r1, r9
 800499c:	eb43 0501 	adc.w	r5, r3, r1
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	00eb      	lsls	r3, r5, #3
 80049aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ae:	00e2      	lsls	r2, r4, #3
 80049b0:	4614      	mov	r4, r2
 80049b2:	461d      	mov	r5, r3
 80049b4:	4643      	mov	r3, r8
 80049b6:	18e3      	adds	r3, r4, r3
 80049b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049bc:	464b      	mov	r3, r9
 80049be:	eb45 0303 	adc.w	r3, r5, r3
 80049c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049e2:	4629      	mov	r1, r5
 80049e4:	008b      	lsls	r3, r1, #2
 80049e6:	4621      	mov	r1, r4
 80049e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ec:	4621      	mov	r1, r4
 80049ee:	008a      	lsls	r2, r1, #2
 80049f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049f4:	f7fb fc0e 	bl	8000214 <__aeabi_uldivmod>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4b60      	ldr	r3, [pc, #384]	@ (8004b80 <UART_SetConfig+0x4e4>)
 80049fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	011c      	lsls	r4, r3, #4
 8004a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a18:	4642      	mov	r2, r8
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	1891      	adds	r1, r2, r2
 8004a1e:	61b9      	str	r1, [r7, #24]
 8004a20:	415b      	adcs	r3, r3
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a28:	4641      	mov	r1, r8
 8004a2a:	1851      	adds	r1, r2, r1
 8004a2c:	6139      	str	r1, [r7, #16]
 8004a2e:	4649      	mov	r1, r9
 8004a30:	414b      	adcs	r3, r1
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a40:	4659      	mov	r1, fp
 8004a42:	00cb      	lsls	r3, r1, #3
 8004a44:	4651      	mov	r1, sl
 8004a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a4a:	4651      	mov	r1, sl
 8004a4c:	00ca      	lsls	r2, r1, #3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	4619      	mov	r1, r3
 8004a52:	4603      	mov	r3, r0
 8004a54:	4642      	mov	r2, r8
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	460a      	mov	r2, r1
 8004a60:	eb42 0303 	adc.w	r3, r2, r3
 8004a64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a80:	4649      	mov	r1, r9
 8004a82:	008b      	lsls	r3, r1, #2
 8004a84:	4641      	mov	r1, r8
 8004a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a8a:	4641      	mov	r1, r8
 8004a8c:	008a      	lsls	r2, r1, #2
 8004a8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a92:	f7fb fbbf 	bl	8000214 <__aeabi_uldivmod>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4b38      	ldr	r3, [pc, #224]	@ (8004b80 <UART_SetConfig+0x4e4>)
 8004a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2264      	movs	r2, #100	@ 0x64
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	1acb      	subs	r3, r1, r3
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	3332      	adds	r3, #50	@ 0x32
 8004ab0:	4a33      	ldr	r2, [pc, #204]	@ (8004b80 <UART_SetConfig+0x4e4>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004abc:	441c      	add	r4, r3
 8004abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ac6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ac8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	1891      	adds	r1, r2, r2
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	415b      	adcs	r3, r3
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004adc:	4641      	mov	r1, r8
 8004ade:	1851      	adds	r1, r2, r1
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	414b      	adcs	r3, r1
 8004ae6:	607b      	str	r3, [r7, #4]
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004af4:	4659      	mov	r1, fp
 8004af6:	00cb      	lsls	r3, r1, #3
 8004af8:	4651      	mov	r1, sl
 8004afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afe:	4651      	mov	r1, sl
 8004b00:	00ca      	lsls	r2, r1, #3
 8004b02:	4610      	mov	r0, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	4642      	mov	r2, r8
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b0e:	464b      	mov	r3, r9
 8004b10:	460a      	mov	r2, r1
 8004b12:	eb42 0303 	adc.w	r3, r2, r3
 8004b16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b22:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b30:	4649      	mov	r1, r9
 8004b32:	008b      	lsls	r3, r1, #2
 8004b34:	4641      	mov	r1, r8
 8004b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	008a      	lsls	r2, r1, #2
 8004b3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b42:	f7fb fb67 	bl	8000214 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <UART_SetConfig+0x4e4>)
 8004b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	2164      	movs	r1, #100	@ 0x64
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	3332      	adds	r3, #50	@ 0x32
 8004b5e:	4a08      	ldr	r2, [pc, #32]	@ (8004b80 <UART_SetConfig+0x4e4>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	f003 020f 	and.w	r2, r3, #15
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4422      	add	r2, r4
 8004b72:	609a      	str	r2, [r3, #8]
}
 8004b74:	bf00      	nop
 8004b76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b80:	51eb851f 	.word	0x51eb851f

08004b84 <memset>:
 8004b84:	4402      	add	r2, r0
 8004b86:	4603      	mov	r3, r0
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d100      	bne.n	8004b8e <memset+0xa>
 8004b8c:	4770      	bx	lr
 8004b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b92:	e7f9      	b.n	8004b88 <memset+0x4>

08004b94 <__libc_init_array>:
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	4d0d      	ldr	r5, [pc, #52]	@ (8004bcc <__libc_init_array+0x38>)
 8004b98:	4c0d      	ldr	r4, [pc, #52]	@ (8004bd0 <__libc_init_array+0x3c>)
 8004b9a:	1b64      	subs	r4, r4, r5
 8004b9c:	10a4      	asrs	r4, r4, #2
 8004b9e:	2600      	movs	r6, #0
 8004ba0:	42a6      	cmp	r6, r4
 8004ba2:	d109      	bne.n	8004bb8 <__libc_init_array+0x24>
 8004ba4:	4d0b      	ldr	r5, [pc, #44]	@ (8004bd4 <__libc_init_array+0x40>)
 8004ba6:	4c0c      	ldr	r4, [pc, #48]	@ (8004bd8 <__libc_init_array+0x44>)
 8004ba8:	f000 f818 	bl	8004bdc <_init>
 8004bac:	1b64      	subs	r4, r4, r5
 8004bae:	10a4      	asrs	r4, r4, #2
 8004bb0:	2600      	movs	r6, #0
 8004bb2:	42a6      	cmp	r6, r4
 8004bb4:	d105      	bne.n	8004bc2 <__libc_init_array+0x2e>
 8004bb6:	bd70      	pop	{r4, r5, r6, pc}
 8004bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bbc:	4798      	blx	r3
 8004bbe:	3601      	adds	r6, #1
 8004bc0:	e7ee      	b.n	8004ba0 <__libc_init_array+0xc>
 8004bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc6:	4798      	blx	r3
 8004bc8:	3601      	adds	r6, #1
 8004bca:	e7f2      	b.n	8004bb2 <__libc_init_array+0x1e>
 8004bcc:	08004c6c 	.word	0x08004c6c
 8004bd0:	08004c6c 	.word	0x08004c6c
 8004bd4:	08004c6c 	.word	0x08004c6c
 8004bd8:	08004c70 	.word	0x08004c70

08004bdc <_init>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	bf00      	nop
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr

08004be8 <_fini>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	bf00      	nop
 8004bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bee:	bc08      	pop	{r3}
 8004bf0:	469e      	mov	lr, r3
 8004bf2:	4770      	bx	lr
