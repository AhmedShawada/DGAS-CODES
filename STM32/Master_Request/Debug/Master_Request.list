
Master_Request.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fdc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080061ac  080061ac  000071ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800624c  0800624c  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800624c  0800624c  0000724c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006254  08006254  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006254  08006254  00007254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006258  08006258  00007258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800625c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000060  080062bc  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  080062bc  000082cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd49  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c0b  00000000  00000000  00013dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  000159e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fc  00000000  00000000  00016418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002179a  00000000  00000000  00016c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de85  00000000  00000000  000383ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb1b4  00000000  00000000  00046233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001113e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f54  00000000  00000000  0011142c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00114380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006194 	.word	0x08006194

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006194 	.word	0x08006194

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b096      	sub	sp, #88	@ 0x58
 80005f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fb97 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f881 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f965 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fe:	f000 f943 	bl	8000888 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000602:	f000 f917 	bl	8000834 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000606:	f000 f8e7 	bl	80007d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   const char *start = "[Master] Running...\r\n";
 800060a:	4b32      	ldr	r3, [pc, #200]	@ (80006d4 <main+0xe8>)
 800060c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   HAL_UART_Transmit(&huart2, (uint8_t*)start, strlen(start), HAL_MAX_DELAY);
 800060e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000610:	f7ff fdfe 	bl	8000210 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800061e:	482e      	ldr	r0, [pc, #184]	@ (80006d8 <main+0xec>)
 8000620:	f004 fd48 	bl	80050b4 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t now = HAL_GetTick();
 8000624:	f000 fbe4 	bl	8000df0 <HAL_GetTick>
 8000628:	64b8      	str	r0, [r7, #72]	@ 0x48

	      // 1. Send A every 1000ms
	      if (now - lastSendTime >= 1000) {
 800062a:	4b2c      	ldr	r3, [pc, #176]	@ (80006dc <main+0xf0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000636:	d318      	bcc.n	800066a <main+0x7e>
	          HAL_I2C_Master_Transmit(&hi2c1, (0x64 << 1), &txData, 1, HAL_MAX_DELAY);
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	4a27      	ldr	r2, [pc, #156]	@ (80006e0 <main+0xf4>)
 8000642:	21c8      	movs	r1, #200	@ 0xc8
 8000644:	4827      	ldr	r0, [pc, #156]	@ (80006e4 <main+0xf8>)
 8000646:	f001 fb4f 	bl	8001ce8 <HAL_I2C_Master_Transmit>
	          const char *msg = "[Master] Sent: A\r\n";
 800064a:	4b27      	ldr	r3, [pc, #156]	@ (80006e8 <main+0xfc>)
 800064c:	647b      	str	r3, [r7, #68]	@ 0x44
	          HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800064e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000650:	f7ff fdde 	bl	8000210 <strlen>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
 800065c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800065e:	481e      	ldr	r0, [pc, #120]	@ (80006d8 <main+0xec>)
 8000660:	f004 fd28 	bl	80050b4 <HAL_UART_Transmit>
	          lastSendTime = now;
 8000664:	4a1d      	ldr	r2, [pc, #116]	@ (80006dc <main+0xf0>)
 8000666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000668:	6013      	str	r3, [r2, #0]
	      }

	      // 2. Check User Button (active low)
	      GPIO_PinState currentState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800066a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800066e:	481f      	ldr	r0, [pc, #124]	@ (80006ec <main+0x100>)
 8000670:	f001 f9ae 	bl	80019d0 <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	      if (lastButtonState == GPIO_PIN_SET && currentState == GPIO_PIN_RESET)
 800067a:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <main+0x104>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d123      	bne.n	80006ca <main+0xde>
 8000682:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000686:	2b00      	cmp	r3, #0
 8000688:	d11f      	bne.n	80006ca <main+0xde>
	      {
	          // Button pressed
	          HAL_I2C_Master_Receive(&hi2c1, (0x64 << 1), &rxData, 1, HAL_MAX_DELAY);
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2301      	movs	r3, #1
 8000692:	4a18      	ldr	r2, [pc, #96]	@ (80006f4 <main+0x108>)
 8000694:	21c8      	movs	r1, #200	@ 0xc8
 8000696:	4813      	ldr	r0, [pc, #76]	@ (80006e4 <main+0xf8>)
 8000698:	f001 fc24 	bl	8001ee4 <HAL_I2C_Master_Receive>

	          char msg[64];
	          snprintf(msg, sizeof(msg), "[Master] Slave replied: %c\r\n", rxData);
 800069c:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <main+0x108>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4638      	mov	r0, r7
 80006a2:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <main+0x10c>)
 80006a4:	2140      	movs	r1, #64	@ 0x40
 80006a6:	f005 f8c1 	bl	800582c <sniprintf>
	          HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006aa:	463b      	mov	r3, r7
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fdaf 	bl	8000210 <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4639      	mov	r1, r7
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295
 80006bc:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <main+0xec>)
 80006be:	f004 fcf9 	bl	80050b4 <HAL_UART_Transmit>

	          HAL_Delay(300); // Debounce delay
 80006c2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80006c6:	f000 fb9f 	bl	8000e08 <HAL_Delay>
	      }

	      lastButtonState = currentState;
 80006ca:	4a09      	ldr	r2, [pc, #36]	@ (80006f0 <main+0x104>)
 80006cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80006d0:	7013      	strb	r3, [r2, #0]
  {
 80006d2:	e7a7      	b.n	8000624 <main+0x38>
 80006d4:	080061ac 	.word	0x080061ac
 80006d8:	20000130 	.word	0x20000130
 80006dc:	20000178 	.word	0x20000178
 80006e0:	20000000 	.word	0x20000000
 80006e4:	2000007c 	.word	0x2000007c
 80006e8:	080061c4 	.word	0x080061c4
 80006ec:	40020800 	.word	0x40020800
 80006f0:	20000002 	.word	0x20000002
 80006f4:	20000001 	.word	0x20000001
 80006f8:	080061d8 	.word	0x080061d8

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2234      	movs	r2, #52	@ 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f005 f8c4 	bl	8005898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b2a      	ldr	r3, [pc, #168]	@ (80007d0 <SystemClock_Config+0xd4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	4a29      	ldr	r2, [pc, #164]	@ (80007d0 <SystemClock_Config+0xd4>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000730:	4b27      	ldr	r3, [pc, #156]	@ (80007d0 <SystemClock_Config+0xd4>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <SystemClock_Config+0xd8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000748:	4a22      	ldr	r2, [pc, #136]	@ (80007d4 <SystemClock_Config+0xd8>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b20      	ldr	r3, [pc, #128]	@ (80007d4 <SystemClock_Config+0xd8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000770:	2310      	movs	r3, #16
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000774:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000778:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077a:	2304      	movs	r3, #4
 800077c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4618      	mov	r0, r3
 800078c:	f004 f9a4 	bl	8004ad8 <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000796:	f000 f905 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2102      	movs	r1, #2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 fe44 	bl	8004444 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007c2:	f000 f8ef 	bl	80009a4 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	@ 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007de:	4a13      	ldr	r2, [pc, #76]	@ (800082c <MX_I2C1_Init+0x54>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007e4:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <MX_I2C1_Init+0x58>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_I2C1_Init+0x50>)
 8000816:	f001 f90d 	bl	8001a34 <HAL_I2C_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000820:	f000 f8c0 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000007c 	.word	0x2000007c
 800082c:	40005400 	.word	0x40005400
 8000830:	000186a0 	.word	0x000186a0

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	@ (8000884 <MX_USART2_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 800086c:	f004 fbd2 	bl	8005014 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000876:	f000 f895 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000130 	.word	0x20000130
 8000884:	40004400 	.word	0x40004400

08000888 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_DMA_Init+0x3c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a0b      	ldr	r2, [pc, #44]	@ (80008c4 <MX_DMA_Init+0x3c>)
 8000898:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_DMA_Init+0x3c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2011      	movs	r0, #17
 80008b0:	f000 fba9 	bl	8001006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80008b4:	2011      	movs	r0, #17
 80008b6:	f000 fbc2 	bl	800103e <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	@ 0x28
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000998 <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a2c      	ldr	r2, [pc, #176]	@ (8000998 <MX_GPIO_Init+0xd0>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <MX_GPIO_Init+0xd0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a25      	ldr	r2, [pc, #148]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b23      	ldr	r3, [pc, #140]	@ (8000998 <MX_GPIO_Init+0xd0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <MX_GPIO_Init+0xd0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a1e      	ldr	r2, [pc, #120]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <MX_GPIO_Init+0xd0>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	4812      	ldr	r0, [pc, #72]	@ (800099c <MX_GPIO_Init+0xd4>)
 8000954:	f001 f854 	bl	8001a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800095e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <MX_GPIO_Init+0xd8>)
 8000970:	f000 fe9a 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000974:	2320      	movs	r3, #32
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4804      	ldr	r0, [pc, #16]	@ (800099c <MX_GPIO_Init+0xd4>)
 800098c:	f000 fe8c 	bl	80016a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	@ 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000
 80009a0:	40020800 	.word	0x40020800

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <Error_Handler+0x8>

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	4a0f      	ldr	r2, [pc, #60]	@ (80009fc <HAL_MspInit+0x4c>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <HAL_MspInit+0x4c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ee:	2007      	movs	r0, #7
 80009f0:	f000 fafe 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	@ 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a38      	ldr	r2, [pc, #224]	@ (8000b00 <HAL_I2C_MspInit+0x100>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d16a      	bne.n	8000af8 <HAL_I2C_MspInit+0xf8>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b37      	ldr	r3, [pc, #220]	@ (8000b04 <HAL_I2C_MspInit+0x104>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a36      	ldr	r2, [pc, #216]	@ (8000b04 <HAL_I2C_MspInit+0x104>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b34      	ldr	r3, [pc, #208]	@ (8000b04 <HAL_I2C_MspInit+0x104>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a44:	2312      	movs	r3, #18
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a50:	2304      	movs	r3, #4
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	482b      	ldr	r0, [pc, #172]	@ (8000b08 <HAL_I2C_MspInit+0x108>)
 8000a5c:	f000 fe24 	bl	80016a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b27      	ldr	r3, [pc, #156]	@ (8000b04 <HAL_I2C_MspInit+0x104>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	4a26      	ldr	r2, [pc, #152]	@ (8000b04 <HAL_I2C_MspInit+0x104>)
 8000a6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a70:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <HAL_I2C_MspInit+0x104>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000a7c:	4b23      	ldr	r3, [pc, #140]	@ (8000b0c <HAL_I2C_MspInit+0x10c>)
 8000a7e:	4a24      	ldr	r2, [pc, #144]	@ (8000b10 <HAL_I2C_MspInit+0x110>)
 8000a80:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000a82:	4b22      	ldr	r3, [pc, #136]	@ (8000b0c <HAL_I2C_MspInit+0x10c>)
 8000a84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a88:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <HAL_I2C_MspInit+0x10c>)
 8000a8c:	2240      	movs	r2, #64	@ 0x40
 8000a8e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a90:	4b1e      	ldr	r3, [pc, #120]	@ (8000b0c <HAL_I2C_MspInit+0x10c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a96:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <HAL_I2C_MspInit+0x10c>)
 8000a98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a9c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <HAL_I2C_MspInit+0x10c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <HAL_I2C_MspInit+0x10c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <HAL_I2C_MspInit+0x10c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <HAL_I2C_MspInit+0x10c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <HAL_I2C_MspInit+0x10c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000abc:	4813      	ldr	r0, [pc, #76]	@ (8000b0c <HAL_I2C_MspInit+0x10c>)
 8000abe:	f000 fad9 	bl	8001074 <HAL_DMA_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000ac8:	f7ff ff6c 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a0f      	ldr	r2, [pc, #60]	@ (8000b0c <HAL_I2C_MspInit+0x10c>)
 8000ad0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b0c <HAL_I2C_MspInit+0x10c>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	201f      	movs	r0, #31
 8000ade:	f000 fa92 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ae2:	201f      	movs	r0, #31
 8000ae4:	f000 faab 	bl	800103e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2100      	movs	r1, #0
 8000aec:	2020      	movs	r0, #32
 8000aee:	f000 fa8a 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000af2:	2020      	movs	r0, #32
 8000af4:	f000 faa3 	bl	800103e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	@ 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40005400 	.word	0x40005400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020400 	.word	0x40020400
 8000b0c:	200000d0 	.word	0x200000d0
 8000b10:	400260a0 	.word	0x400260a0

08000b14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	@ 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	@ (8000b98 <HAL_UART_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12b      	bne.n	8000b8e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_UART_MspInit+0x88>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3e:	4a17      	ldr	r2, [pc, #92]	@ (8000b9c <HAL_UART_MspInit+0x88>)
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <HAL_UART_MspInit+0x88>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <HAL_UART_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a10      	ldr	r2, [pc, #64]	@ (8000b9c <HAL_UART_MspInit+0x88>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <HAL_UART_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b6e:	230c      	movs	r3, #12
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7e:	2307      	movs	r3, #7
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <HAL_UART_MspInit+0x8c>)
 8000b8a:	f000 fd8d 	bl	80016a8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	@ 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <NMI_Handler+0x4>

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfa:	f000 f8e5 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000c08:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <DMA1_Stream6_IRQHandler+0x10>)
 8000c0a:	f000 fb03 	bl	8001214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000d0 	.word	0x200000d0

08000c18 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c1c:	4802      	ldr	r0, [pc, #8]	@ (8000c28 <I2C1_EV_IRQHandler+0x10>)
 8000c1e:	f001 fb93 	bl	8002348 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000007c 	.word	0x2000007c

08000c2c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c30:	4802      	ldr	r0, [pc, #8]	@ (8000c3c <I2C1_ER_IRQHandler+0x10>)
 8000c32:	f001 fcfa 	bl	800262a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000007c 	.word	0x2000007c

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	@ (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f004 fe1a 	bl	80058a8 <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20020000 	.word	0x20020000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	2000017c 	.word	0x2000017c
 8000ca8:	200002d0 	.word	0x200002d0

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cd4:	f7ff ffea 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	@ (8000d10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f004 fdd9 	bl	80058b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fc73 	bl	80005ec <main>
  bx  lr    
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d14:	0800625c 	.word	0x0800625c
  ldr r2, =_sbss
 8000d18:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d1c:	200002cc 	.word	0x200002cc

08000d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d64 <HAL_Init+0x40>)
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d34:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <HAL_Init+0x40>)
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <HAL_Init+0x40>)
 8000d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f94f 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 f808 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fe2a 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023c00 	.word	0x40023c00

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f967 	bl	800105a <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 f92f 	bl	8001006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	@ (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000004 	.word	0x20000004
 8000dc0:	2000000c 	.word	0x2000000c
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	2000000c 	.word	0x2000000c
 8000dec:	20000180 	.word	0x20000180

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	@ (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000180 	.word	0x20000180

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <HAL_Delay+0x44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffde 	bl	8000df0 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000000c 	.word	0x2000000c

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	@ (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	@ (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	@ (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	@ 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	@ 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff29 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff3e 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff8e 	bl	8000f44 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5d 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff31 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa2 	bl	8000fac <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff feb6 	bl	8000df0 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e099      	b.n	80011c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2202      	movs	r2, #2
 8001094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0201 	bic.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b0:	e00f      	b.n	80010d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010b2:	f7ff fe9d 	bl	8000df0 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b05      	cmp	r3, #5
 80010be:	d908      	bls.n	80010d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2220      	movs	r2, #32
 80010c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2203      	movs	r2, #3
 80010ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e078      	b.n	80011c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1e8      	bne.n	80010b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	4b38      	ldr	r3, [pc, #224]	@ (80011cc <HAL_DMA_Init+0x158>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001116:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4313      	orrs	r3, r2
 8001122:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001128:	2b04      	cmp	r3, #4
 800112a:	d107      	bne.n	800113c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001134:	4313      	orrs	r3, r2
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4313      	orrs	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f023 0307 	bic.w	r3, r3, #7
 8001152:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	4313      	orrs	r3, r2
 800115c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001162:	2b04      	cmp	r3, #4
 8001164:	d117      	bne.n	8001196 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4313      	orrs	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00e      	beq.n	8001196 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 fa19 	bl	80015b0 <DMA_CheckFifoParam>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2240      	movs	r2, #64	@ 0x40
 8001188:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001192:	2301      	movs	r3, #1
 8001194:	e016      	b.n	80011c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f9d0 	bl	8001544 <DMA_CalcBaseAndBitshift>
 80011a4:	4603      	mov	r3, r0
 80011a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ac:	223f      	movs	r2, #63	@ 0x3f
 80011ae:	409a      	lsls	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	f010803f 	.word	0xf010803f

080011d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d004      	beq.n	80011ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2280      	movs	r2, #128	@ 0x80
 80011e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00c      	b.n	8001208 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2205      	movs	r2, #5
 80011f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001220:	4b8e      	ldr	r3, [pc, #568]	@ (800145c <HAL_DMA_IRQHandler+0x248>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a8e      	ldr	r2, [pc, #568]	@ (8001460 <HAL_DMA_IRQHandler+0x24c>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0a9b      	lsrs	r3, r3, #10
 800122c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001232:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800123e:	2208      	movs	r2, #8
 8001240:	409a      	lsls	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4013      	ands	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d01a      	beq.n	8001280 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0204 	bic.w	r2, r2, #4
 8001266:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800126c:	2208      	movs	r2, #8
 800126e:	409a      	lsls	r2, r3
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001278:	f043 0201 	orr.w	r2, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001284:	2201      	movs	r2, #1
 8001286:	409a      	lsls	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4013      	ands	r3, r2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d012      	beq.n	80012b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00b      	beq.n	80012b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012a2:	2201      	movs	r2, #1
 80012a4:	409a      	lsls	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ae:	f043 0202 	orr.w	r2, r3, #2
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ba:	2204      	movs	r2, #4
 80012bc:	409a      	lsls	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d012      	beq.n	80012ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00b      	beq.n	80012ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d8:	2204      	movs	r2, #4
 80012da:	409a      	lsls	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f0:	2210      	movs	r2, #16
 80012f2:	409a      	lsls	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d043      	beq.n	8001384 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d03c      	beq.n	8001384 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800130e:	2210      	movs	r2, #16
 8001310:	409a      	lsls	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d018      	beq.n	8001356 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d108      	bne.n	8001344 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	2b00      	cmp	r3, #0
 8001338:	d024      	beq.n	8001384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	4798      	blx	r3
 8001342:	e01f      	b.n	8001384 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001348:	2b00      	cmp	r3, #0
 800134a:	d01b      	beq.n	8001384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	4798      	blx	r3
 8001354:	e016      	b.n	8001384 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001360:	2b00      	cmp	r3, #0
 8001362:	d107      	bne.n	8001374 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0208 	bic.w	r2, r2, #8
 8001372:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001388:	2220      	movs	r2, #32
 800138a:	409a      	lsls	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 808f 	beq.w	80014b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 8087 	beq.w	80014b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013aa:	2220      	movs	r2, #32
 80013ac:	409a      	lsls	r2, r3
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	d136      	bne.n	800142c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0216 	bic.w	r2, r2, #22
 80013cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	695a      	ldr	r2, [r3, #20]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d103      	bne.n	80013ee <HAL_DMA_IRQHandler+0x1da>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d007      	beq.n	80013fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0208 	bic.w	r2, r2, #8
 80013fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001402:	223f      	movs	r2, #63	@ 0x3f
 8001404:	409a      	lsls	r2, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800141e:	2b00      	cmp	r3, #0
 8001420:	d07e      	beq.n	8001520 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	4798      	blx	r3
        }
        return;
 800142a:	e079      	b.n	8001520 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d01d      	beq.n	8001476 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10d      	bne.n	8001464 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144c:	2b00      	cmp	r3, #0
 800144e:	d031      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	4798      	blx	r3
 8001458:	e02c      	b.n	80014b4 <HAL_DMA_IRQHandler+0x2a0>
 800145a:	bf00      	nop
 800145c:	20000004 	.word	0x20000004
 8001460:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001468:	2b00      	cmp	r3, #0
 800146a:	d023      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	4798      	blx	r3
 8001474:	e01e      	b.n	80014b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10f      	bne.n	80014a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0210 	bic.w	r2, r2, #16
 8001492:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d032      	beq.n	8001522 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d022      	beq.n	800150e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2205      	movs	r2, #5
 80014cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0201 	bic.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	3301      	adds	r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d307      	bcc.n	80014fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f2      	bne.n	80014e0 <HAL_DMA_IRQHandler+0x2cc>
 80014fa:	e000      	b.n	80014fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80014fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	4798      	blx	r3
 800151e:	e000      	b.n	8001522 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001520:	bf00      	nop
    }
  }
}
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001536:	b2db      	uxtb	r3, r3
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3b10      	subs	r3, #16
 8001554:	4a14      	ldr	r2, [pc, #80]	@ (80015a8 <DMA_CalcBaseAndBitshift+0x64>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800155e:	4a13      	ldr	r2, [pc, #76]	@ (80015ac <DMA_CalcBaseAndBitshift+0x68>)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d909      	bls.n	8001586 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800157a:	f023 0303 	bic.w	r3, r3, #3
 800157e:	1d1a      	adds	r2, r3, #4
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	659a      	str	r2, [r3, #88]	@ 0x58
 8001584:	e007      	b.n	8001596 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800158e:	f023 0303 	bic.w	r3, r3, #3
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	aaaaaaab 	.word	0xaaaaaaab
 80015ac:	08006210 	.word	0x08006210

080015b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d11f      	bne.n	800160a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d856      	bhi.n	800167e <DMA_CheckFifoParam+0xce>
 80015d0:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <DMA_CheckFifoParam+0x28>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	080015e9 	.word	0x080015e9
 80015dc:	080015fb 	.word	0x080015fb
 80015e0:	080015e9 	.word	0x080015e9
 80015e4:	0800167f 	.word	0x0800167f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d046      	beq.n	8001682 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015f8:	e043      	b.n	8001682 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001602:	d140      	bne.n	8001686 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001608:	e03d      	b.n	8001686 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001612:	d121      	bne.n	8001658 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b03      	cmp	r3, #3
 8001618:	d837      	bhi.n	800168a <DMA_CheckFifoParam+0xda>
 800161a:	a201      	add	r2, pc, #4	@ (adr r2, 8001620 <DMA_CheckFifoParam+0x70>)
 800161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001620:	08001631 	.word	0x08001631
 8001624:	08001637 	.word	0x08001637
 8001628:	08001631 	.word	0x08001631
 800162c:	08001649 	.word	0x08001649
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
      break;
 8001634:	e030      	b.n	8001698 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d025      	beq.n	800168e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001646:	e022      	b.n	800168e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001650:	d11f      	bne.n	8001692 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001656:	e01c      	b.n	8001692 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d903      	bls.n	8001666 <DMA_CheckFifoParam+0xb6>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d003      	beq.n	800166c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001664:	e018      	b.n	8001698 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
      break;
 800166a:	e015      	b.n	8001698 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001670:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00e      	beq.n	8001696 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	73fb      	strb	r3, [r7, #15]
      break;
 800167c:	e00b      	b.n	8001696 <DMA_CheckFifoParam+0xe6>
      break;
 800167e:	bf00      	nop
 8001680:	e00a      	b.n	8001698 <DMA_CheckFifoParam+0xe8>
      break;
 8001682:	bf00      	nop
 8001684:	e008      	b.n	8001698 <DMA_CheckFifoParam+0xe8>
      break;
 8001686:	bf00      	nop
 8001688:	e006      	b.n	8001698 <DMA_CheckFifoParam+0xe8>
      break;
 800168a:	bf00      	nop
 800168c:	e004      	b.n	8001698 <DMA_CheckFifoParam+0xe8>
      break;
 800168e:	bf00      	nop
 8001690:	e002      	b.n	8001698 <DMA_CheckFifoParam+0xe8>
      break;   
 8001692:	bf00      	nop
 8001694:	e000      	b.n	8001698 <DMA_CheckFifoParam+0xe8>
      break;
 8001696:	bf00      	nop
    }
  } 
  
  return status; 
 8001698:	7bfb      	ldrb	r3, [r7, #15]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	@ 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e165      	b.n	8001990 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 8154 	bne.w	800198a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d005      	beq.n	80016fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d130      	bne.n	800175c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 0201 	and.w	r2, r3, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b03      	cmp	r3, #3
 8001766:	d017      	beq.n	8001798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d123      	bne.n	80017ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3208      	adds	r2, #8
 80017ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	220f      	movs	r2, #15
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	08da      	lsrs	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3208      	adds	r2, #8
 80017e6:	69b9      	ldr	r1, [r7, #24]
 80017e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0203 	and.w	r2, r3, #3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80ae 	beq.w	800198a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b5d      	ldr	r3, [pc, #372]	@ (80019a8 <HAL_GPIO_Init+0x300>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001836:	4a5c      	ldr	r2, [pc, #368]	@ (80019a8 <HAL_GPIO_Init+0x300>)
 8001838:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800183c:	6453      	str	r3, [r2, #68]	@ 0x44
 800183e:	4b5a      	ldr	r3, [pc, #360]	@ (80019a8 <HAL_GPIO_Init+0x300>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800184a:	4a58      	ldr	r2, [pc, #352]	@ (80019ac <HAL_GPIO_Init+0x304>)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3302      	adds	r3, #2
 8001852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4f      	ldr	r2, [pc, #316]	@ (80019b0 <HAL_GPIO_Init+0x308>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d025      	beq.n	80018c2 <HAL_GPIO_Init+0x21a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4e      	ldr	r2, [pc, #312]	@ (80019b4 <HAL_GPIO_Init+0x30c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d01f      	beq.n	80018be <HAL_GPIO_Init+0x216>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4d      	ldr	r2, [pc, #308]	@ (80019b8 <HAL_GPIO_Init+0x310>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d019      	beq.n	80018ba <HAL_GPIO_Init+0x212>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4c      	ldr	r2, [pc, #304]	@ (80019bc <HAL_GPIO_Init+0x314>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0x20e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4b      	ldr	r2, [pc, #300]	@ (80019c0 <HAL_GPIO_Init+0x318>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00d      	beq.n	80018b2 <HAL_GPIO_Init+0x20a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4a      	ldr	r2, [pc, #296]	@ (80019c4 <HAL_GPIO_Init+0x31c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d007      	beq.n	80018ae <HAL_GPIO_Init+0x206>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a49      	ldr	r2, [pc, #292]	@ (80019c8 <HAL_GPIO_Init+0x320>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_GPIO_Init+0x202>
 80018a6:	2306      	movs	r3, #6
 80018a8:	e00c      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018aa:	2307      	movs	r3, #7
 80018ac:	e00a      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018ae:	2305      	movs	r3, #5
 80018b0:	e008      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018b2:	2304      	movs	r3, #4
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018c2:	2300      	movs	r3, #0
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d4:	4935      	ldr	r1, [pc, #212]	@ (80019ac <HAL_GPIO_Init+0x304>)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e2:	4b3a      	ldr	r3, [pc, #232]	@ (80019cc <HAL_GPIO_Init+0x324>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001906:	4a31      	ldr	r2, [pc, #196]	@ (80019cc <HAL_GPIO_Init+0x324>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800190c:	4b2f      	ldr	r3, [pc, #188]	@ (80019cc <HAL_GPIO_Init+0x324>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001930:	4a26      	ldr	r2, [pc, #152]	@ (80019cc <HAL_GPIO_Init+0x324>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001936:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <HAL_GPIO_Init+0x324>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195a:	4a1c      	ldr	r2, [pc, #112]	@ (80019cc <HAL_GPIO_Init+0x324>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001960:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <HAL_GPIO_Init+0x324>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001984:	4a11      	ldr	r2, [pc, #68]	@ (80019cc <HAL_GPIO_Init+0x324>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	f67f ae96 	bls.w	80016c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3724      	adds	r7, #36	@ 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40013800 	.word	0x40013800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40021400 	.word	0x40021400
 80019c8:	40021800 	.word	0x40021800
 80019cc:	40013c00 	.word	0x40013c00

080019d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	887b      	ldrh	r3, [r7, #2]
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e001      	b.n	80019f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a10:	787b      	ldrb	r3, [r7, #1]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a16:	887a      	ldrh	r2, [r7, #2]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a1c:	e003      	b.n	8001a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	041a      	lsls	r2, r3, #16
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	619a      	str	r2, [r3, #24]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e12b      	b.n	8001c9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7fe ffd0 	bl	8000a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2224      	movs	r2, #36	@ 0x24
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a98:	f002 fdc6 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 8001a9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4a81      	ldr	r2, [pc, #516]	@ (8001ca8 <HAL_I2C_Init+0x274>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d807      	bhi.n	8001ab8 <HAL_I2C_Init+0x84>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4a80      	ldr	r2, [pc, #512]	@ (8001cac <HAL_I2C_Init+0x278>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	bf94      	ite	ls
 8001ab0:	2301      	movls	r3, #1
 8001ab2:	2300      	movhi	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	e006      	b.n	8001ac6 <HAL_I2C_Init+0x92>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4a7d      	ldr	r2, [pc, #500]	@ (8001cb0 <HAL_I2C_Init+0x27c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	bf94      	ite	ls
 8001ac0:	2301      	movls	r3, #1
 8001ac2:	2300      	movhi	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0e7      	b.n	8001c9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4a78      	ldr	r2, [pc, #480]	@ (8001cb4 <HAL_I2C_Init+0x280>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9b      	lsrs	r3, r3, #18
 8001ad8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a6a      	ldr	r2, [pc, #424]	@ (8001ca8 <HAL_I2C_Init+0x274>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d802      	bhi.n	8001b08 <HAL_I2C_Init+0xd4>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	3301      	adds	r3, #1
 8001b06:	e009      	b.n	8001b1c <HAL_I2C_Init+0xe8>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	4a69      	ldr	r2, [pc, #420]	@ (8001cb8 <HAL_I2C_Init+0x284>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	099b      	lsrs	r3, r3, #6
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	495c      	ldr	r1, [pc, #368]	@ (8001ca8 <HAL_I2C_Init+0x274>)
 8001b38:	428b      	cmp	r3, r1
 8001b3a:	d819      	bhi.n	8001b70 <HAL_I2C_Init+0x13c>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1e59      	subs	r1, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b4a:	1c59      	adds	r1, r3, #1
 8001b4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b50:	400b      	ands	r3, r1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00a      	beq.n	8001b6c <HAL_I2C_Init+0x138>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1e59      	subs	r1, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b6a:	e051      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	e04f      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d111      	bne.n	8001b9c <HAL_I2C_Init+0x168>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1e58      	subs	r0, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6859      	ldr	r1, [r3, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	440b      	add	r3, r1
 8001b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bf0c      	ite	eq
 8001b94:	2301      	moveq	r3, #1
 8001b96:	2300      	movne	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	e012      	b.n	8001bc2 <HAL_I2C_Init+0x18e>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e58      	subs	r0, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	0099      	lsls	r1, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_I2C_Init+0x196>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e022      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10e      	bne.n	8001bf0 <HAL_I2C_Init+0x1bc>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1e58      	subs	r0, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6859      	ldr	r1, [r3, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	440b      	add	r3, r1
 8001be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bee:	e00f      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1e58      	subs	r0, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	0099      	lsls	r1, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c06:	3301      	adds	r3, #1
 8001c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	6809      	ldr	r1, [r1, #0]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6911      	ldr	r1, [r2, #16]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68d2      	ldr	r2, [r2, #12]
 8001c4a:	4311      	orrs	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	430b      	orrs	r3, r1
 8001c52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	000186a0 	.word	0x000186a0
 8001cac:	001e847f 	.word	0x001e847f
 8001cb0:	003d08ff 	.word	0x003d08ff
 8001cb4:	431bde83 	.word	0x431bde83
 8001cb8:	10624dd3 	.word	0x10624dd3

08001cbc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cce:	2b80      	cmp	r3, #128	@ 0x80
 8001cd0:	d103      	bne.n	8001cda <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  }
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	817b      	strh	r3, [r7, #10]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff f878 	bl	8000df0 <HAL_GetTick>
 8001d00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b20      	cmp	r3, #32
 8001d0c:	f040 80e0 	bne.w	8001ed0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2319      	movs	r3, #25
 8001d16:	2201      	movs	r2, #1
 8001d18:	4970      	ldr	r1, [pc, #448]	@ (8001edc <HAL_I2C_Master_Transmit+0x1f4>)
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f002 f90e 	bl	8003f3c <I2C_WaitOnFlagUntilTimeout>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d26:	2302      	movs	r3, #2
 8001d28:	e0d3      	b.n	8001ed2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_I2C_Master_Transmit+0x50>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e0cc      	b.n	8001ed2 <HAL_I2C_Master_Transmit+0x1ea>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d007      	beq.n	8001d5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0201 	orr.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2221      	movs	r2, #33	@ 0x21
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2210      	movs	r2, #16
 8001d7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	893a      	ldrh	r2, [r7, #8]
 8001d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4a50      	ldr	r2, [pc, #320]	@ (8001ee0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001da0:	8979      	ldrh	r1, [r7, #10]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	6a3a      	ldr	r2, [r7, #32]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f001 fed0 	bl	8003b4c <I2C_MasterRequestWrite>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e08d      	b.n	8001ed2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001dcc:	e066      	b.n	8001e9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	6a39      	ldr	r1, [r7, #32]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f002 f9cc 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00d      	beq.n	8001dfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d107      	bne.n	8001df6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001df4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e06b      	b.n	8001ed2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d11b      	bne.n	8001e70 <HAL_I2C_Master_Transmit+0x188>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d017      	beq.n	8001e70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	6a39      	ldr	r1, [r7, #32]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f002 f9c3 	bl	8004200 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00d      	beq.n	8001e9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d107      	bne.n	8001e98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e01a      	b.n	8001ed2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d194      	bne.n	8001dce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e000      	b.n	8001ed2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ed0:	2302      	movs	r3, #2
  }
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	00100002 	.word	0x00100002
 8001ee0:	ffff0000 	.word	0xffff0000

08001ee4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	@ 0x30
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	817b      	strh	r3, [r7, #10]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7fe ff7a 	bl	8000df0 <HAL_GetTick>
 8001efc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	f040 8217 	bne.w	800233a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2319      	movs	r3, #25
 8001f12:	2201      	movs	r2, #1
 8001f14:	497c      	ldr	r1, [pc, #496]	@ (8002108 <HAL_I2C_Master_Receive+0x224>)
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f002 f810 	bl	8003f3c <I2C_WaitOnFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
 8001f24:	e20a      	b.n	800233c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_I2C_Master_Receive+0x50>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e203      	b.n	800233c <HAL_I2C_Master_Receive+0x458>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d007      	beq.n	8001f5a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2222      	movs	r2, #34	@ 0x22
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2210      	movs	r2, #16
 8001f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	893a      	ldrh	r2, [r7, #8]
 8001f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4a5c      	ldr	r2, [pc, #368]	@ (800210c <HAL_I2C_Master_Receive+0x228>)
 8001f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f9c:	8979      	ldrh	r1, [r7, #10]
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f001 fe54 	bl	8003c50 <I2C_MasterRequestRead>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e1c4      	b.n	800233c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d113      	bne.n	8001fe2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	623b      	str	r3, [r7, #32]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	623b      	str	r3, [r7, #32]
 8001fce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e198      	b.n	8002314 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d11b      	bne.n	8002022 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ff8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e178      	b.n	8002314 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002026:	2b02      	cmp	r3, #2
 8002028:	d11b      	bne.n	8002062 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002038:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002048:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	e158      	b.n	8002314 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002070:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002088:	e144      	b.n	8002314 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208e:	2b03      	cmp	r3, #3
 8002090:	f200 80f1 	bhi.w	8002276 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002098:	2b01      	cmp	r3, #1
 800209a:	d123      	bne.n	80020e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800209e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f002 f927 	bl	80042f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e145      	b.n	800233c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020e2:	e117      	b.n	8002314 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d14e      	bne.n	800218a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f2:	2200      	movs	r2, #0
 80020f4:	4906      	ldr	r1, [pc, #24]	@ (8002110 <HAL_I2C_Master_Receive+0x22c>)
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f001 ff20 	bl	8003f3c <I2C_WaitOnFlagUntilTimeout>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d008      	beq.n	8002114 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e11a      	b.n	800233c <HAL_I2C_Master_Receive+0x458>
 8002106:	bf00      	nop
 8002108:	00100002 	.word	0x00100002
 800210c:	ffff0000 	.word	0xffff0000
 8002110:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002172:	3b01      	subs	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002188:	e0c4      	b.n	8002314 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002190:	2200      	movs	r2, #0
 8002192:	496c      	ldr	r1, [pc, #432]	@ (8002344 <HAL_I2C_Master_Receive+0x460>)
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f001 fed1 	bl	8003f3c <I2C_WaitOnFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0cb      	b.n	800233c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691a      	ldr	r2, [r3, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ec:	2200      	movs	r2, #0
 80021ee:	4955      	ldr	r1, [pc, #340]	@ (8002344 <HAL_I2C_Master_Receive+0x460>)
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f001 fea3 	bl	8003f3c <I2C_WaitOnFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e09d      	b.n	800233c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800220e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002274:	e04e      	b.n	8002314 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002278:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f002 f83a 	bl	80042f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e058      	b.n	800233c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d124      	bne.n	8002314 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d107      	bne.n	80022e2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022e0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002318:	2b00      	cmp	r3, #0
 800231a:	f47f aeb6 	bne.w	800208a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800233a:	2302      	movs	r3, #2
  }
}
 800233c:	4618      	mov	r0, r3
 800233e:	3728      	adds	r7, #40	@ 0x28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	00010004 	.word	0x00010004

08002348 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002368:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002370:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	2b10      	cmp	r3, #16
 8002376:	d003      	beq.n	8002380 <HAL_I2C_EV_IRQHandler+0x38>
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	2b40      	cmp	r3, #64	@ 0x40
 800237c:	f040 80c1 	bne.w	8002502 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10d      	bne.n	80023b6 <HAL_I2C_EV_IRQHandler+0x6e>
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80023a0:	d003      	beq.n	80023aa <HAL_I2C_EV_IRQHandler+0x62>
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_EV_IRQHandler+0x66>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_I2C_EV_IRQHandler+0x68>
 80023ae:	2300      	movs	r3, #0
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	f000 8132 	beq.w	800261a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00c      	beq.n	80023da <HAL_I2C_EV_IRQHandler+0x92>
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	0a5b      	lsrs	r3, r3, #9
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f002 f81d 	bl	800440c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fd9b 	bl	8002f0e <I2C_Master_SB>
 80023d8:	e092      	b.n	8002500 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	08db      	lsrs	r3, r3, #3
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_I2C_EV_IRQHandler+0xb2>
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	0a5b      	lsrs	r3, r3, #9
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fe11 	bl	800301a <I2C_Master_ADD10>
 80023f8:	e082      	b.n	8002500 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	085b      	lsrs	r3, r3, #1
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_I2C_EV_IRQHandler+0xd2>
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	0a5b      	lsrs	r3, r3, #9
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fe2b 	bl	800306e <I2C_Master_ADDR>
 8002418:	e072      	b.n	8002500 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d03b      	beq.n	800249e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002434:	f000 80f3 	beq.w	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	09db      	lsrs	r3, r3, #7
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00f      	beq.n	8002464 <HAL_I2C_EV_IRQHandler+0x11c>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	0a9b      	lsrs	r3, r3, #10
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <HAL_I2C_EV_IRQHandler+0x11c>
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d103      	bne.n	8002464 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f9f3 	bl	8002848 <I2C_MasterTransmit_TXE>
 8002462:	e04d      	b.n	8002500 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80d6 	beq.w	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	0a5b      	lsrs	r3, r3, #9
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80cf 	beq.w	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002480:	7bbb      	ldrb	r3, [r7, #14]
 8002482:	2b21      	cmp	r3, #33	@ 0x21
 8002484:	d103      	bne.n	800248e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fa7a 	bl	8002980 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800248c:	e0c7      	b.n	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	2b40      	cmp	r3, #64	@ 0x40
 8002492:	f040 80c4 	bne.w	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fae8 	bl	8002a6c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800249c:	e0bf      	b.n	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024ac:	f000 80b7 	beq.w	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00f      	beq.n	80024dc <HAL_I2C_EV_IRQHandler+0x194>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	0a9b      	lsrs	r3, r3, #10
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <HAL_I2C_EV_IRQHandler+0x194>
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d103      	bne.n	80024dc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fb61 	bl	8002b9c <I2C_MasterReceive_RXNE>
 80024da:	e011      	b.n	8002500 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 809a 	beq.w	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	0a5b      	lsrs	r3, r3, #9
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8093 	beq.w	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fc17 	bl	8002d2c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024fe:	e08e      	b.n	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002500:	e08d      	b.n	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	e007      	b.n	8002524 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d012      	beq.n	8002556 <HAL_I2C_EV_IRQHandler+0x20e>
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	0a5b      	lsrs	r3, r3, #9
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00c      	beq.n	8002556 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800254c:	69b9      	ldr	r1, [r7, #24]
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 ffdc 	bl	800350c <I2C_Slave_ADDR>
 8002554:	e066      	b.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0x22e>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	0a5b      	lsrs	r3, r3, #9
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f001 f816 	bl	80035a0 <I2C_Slave_STOPF>
 8002574:	e056      	b.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002576:	7bbb      	ldrb	r3, [r7, #14]
 8002578:	2b21      	cmp	r3, #33	@ 0x21
 800257a:	d002      	beq.n	8002582 <HAL_I2C_EV_IRQHandler+0x23a>
 800257c:	7bbb      	ldrb	r3, [r7, #14]
 800257e:	2b29      	cmp	r3, #41	@ 0x29
 8002580:	d125      	bne.n	80025ce <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	09db      	lsrs	r3, r3, #7
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00f      	beq.n	80025ae <HAL_I2C_EV_IRQHandler+0x266>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	0a9b      	lsrs	r3, r3, #10
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <HAL_I2C_EV_IRQHandler+0x266>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d103      	bne.n	80025ae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fef2 	bl	8003390 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025ac:	e039      	b.n	8002622 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d033      	beq.n	8002622 <HAL_I2C_EV_IRQHandler+0x2da>
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	0a5b      	lsrs	r3, r3, #9
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d02d      	beq.n	8002622 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 ff1f 	bl	800340a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025cc:	e029      	b.n	8002622 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00f      	beq.n	80025fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	0a9b      	lsrs	r3, r3, #10
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 ff2a 	bl	800344c <I2C_SlaveReceive_RXNE>
 80025f8:	e014      	b.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00e      	beq.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	0a5b      	lsrs	r3, r3, #9
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 ff58 	bl	80034c8 <I2C_SlaveReceive_BTF>
 8002618:	e004      	b.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800261a:	bf00      	nop
 800261c:	e002      	b.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800261e:	bf00      	nop
 8002620:	e000      	b.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002622:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b08a      	sub	sp, #40	@ 0x28
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002642:	2300      	movs	r3, #0
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800264c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00e      	beq.n	8002678 <HAL_I2C_ER_IRQHandler+0x4e>
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002676:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	0a5b      	lsrs	r3, r3, #9
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00e      	beq.n	80026a2 <HAL_I2C_ER_IRQHandler+0x78>
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	f043 0302 	orr.w	r3, r3, #2
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80026a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	0a9b      	lsrs	r3, r3, #10
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d03f      	beq.n	800272e <HAL_I2C_ER_IRQHandler+0x104>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d039      	beq.n	800272e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80026ba:	7efb      	ldrb	r3, [r7, #27]
 80026bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80026d4:	7ebb      	ldrb	r3, [r7, #26]
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d112      	bne.n	8002700 <HAL_I2C_ER_IRQHandler+0xd6>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10f      	bne.n	8002700 <HAL_I2C_ER_IRQHandler+0xd6>
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	2b21      	cmp	r3, #33	@ 0x21
 80026e4:	d008      	beq.n	80026f8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b29      	cmp	r3, #41	@ 0x29
 80026ea:	d005      	beq.n	80026f8 <HAL_I2C_ER_IRQHandler+0xce>
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	2b28      	cmp	r3, #40	@ 0x28
 80026f0:	d106      	bne.n	8002700 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b21      	cmp	r3, #33	@ 0x21
 80026f6:	d103      	bne.n	8002700 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f001 f881 	bl	8003800 <I2C_Slave_AF>
 80026fe:	e016      	b.n	800272e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002708:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002712:	7efb      	ldrb	r3, [r7, #27]
 8002714:	2b10      	cmp	r3, #16
 8002716:	d002      	beq.n	800271e <HAL_I2C_ER_IRQHandler+0xf4>
 8002718:	7efb      	ldrb	r3, [r7, #27]
 800271a:	2b40      	cmp	r3, #64	@ 0x40
 800271c:	d107      	bne.n	800272e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800272c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	0adb      	lsrs	r3, r3, #11
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00e      	beq.n	8002758 <HAL_I2C_ER_IRQHandler+0x12e>
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	f043 0308 	orr.w	r3, r3, #8
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002756:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f001 f8bc 	bl	80038e8 <I2C_ITError>
  }
}
 8002770:	bf00      	nop
 8002772:	3728      	adds	r7, #40	@ 0x28
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
 80027d4:	4613      	mov	r3, r2
 80027d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002856:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800285e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286a:	2b00      	cmp	r3, #0
 800286c:	d150      	bne.n	8002910 <I2C_MasterTransmit_TXE+0xc8>
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	2b21      	cmp	r3, #33	@ 0x21
 8002872:	d14d      	bne.n	8002910 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b08      	cmp	r3, #8
 8002878:	d01d      	beq.n	80028b6 <I2C_MasterTransmit_TXE+0x6e>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b20      	cmp	r3, #32
 800287e:	d01a      	beq.n	80028b6 <I2C_MasterTransmit_TXE+0x6e>
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002886:	d016      	beq.n	80028b6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002896:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2211      	movs	r2, #17
 800289c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ff62 	bl	8002778 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028b4:	e060      	b.n	8002978 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028c4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b40      	cmp	r3, #64	@ 0x40
 80028ee:	d107      	bne.n	8002900 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ff7d 	bl	80027f8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028fe:	e03b      	b.n	8002978 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff35 	bl	8002778 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800290e:	e033      	b.n	8002978 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b21      	cmp	r3, #33	@ 0x21
 8002914:	d005      	beq.n	8002922 <I2C_MasterTransmit_TXE+0xda>
 8002916:	7bbb      	ldrb	r3, [r7, #14]
 8002918:	2b40      	cmp	r3, #64	@ 0x40
 800291a:	d12d      	bne.n	8002978 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b22      	cmp	r3, #34	@ 0x22
 8002920:	d12a      	bne.n	8002978 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d108      	bne.n	800293e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800293a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800293c:	e01c      	b.n	8002978 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b40      	cmp	r3, #64	@ 0x40
 8002948:	d103      	bne.n	8002952 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f88e 	bl	8002a6c <I2C_MemoryTransmit_TXE_BTF>
}
 8002950:	e012      	b.n	8002978 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	781a      	ldrb	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002976:	e7ff      	b.n	8002978 <I2C_MasterTransmit_TXE+0x130>
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b21      	cmp	r3, #33	@ 0x21
 8002998:	d164      	bne.n	8002a64 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80029c8:	e04c      	b.n	8002a64 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d01d      	beq.n	8002a0c <I2C_MasterTransmit_BTF+0x8c>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d01a      	beq.n	8002a0c <I2C_MasterTransmit_BTF+0x8c>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029dc:	d016      	beq.n	8002a0c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029ec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2211      	movs	r2, #17
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff feb7 	bl	8002778 <HAL_I2C_MasterTxCpltCallback>
}
 8002a0a:	e02b      	b.n	8002a64 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a1a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a2a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b40      	cmp	r3, #64	@ 0x40
 8002a44:	d107      	bne.n	8002a56 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff fed2 	bl	80027f8 <HAL_I2C_MemTxCpltCallback>
}
 8002a54:	e006      	b.n	8002a64 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff fe8a 	bl	8002778 <HAL_I2C_MasterTxCpltCallback>
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d11d      	bne.n	8002ac0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d10b      	bne.n	8002aa4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a9c:	1c9a      	adds	r2, r3, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002aa2:	e077      	b.n	8002b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	121b      	asrs	r3, r3, #8
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002abe:	e069      	b.n	8002b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d10b      	bne.n	8002ae0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ade:	e059      	b.n	8002b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d152      	bne.n	8002b8e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	2b22      	cmp	r3, #34	@ 0x22
 8002aec:	d10d      	bne.n	8002b0a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002afc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002b08:	e044      	b.n	8002b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d015      	beq.n	8002b40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b21      	cmp	r3, #33	@ 0x21
 8002b18:	d112      	bne.n	8002b40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	781a      	ldrb	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002b3e:	e029      	b.n	8002b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d124      	bne.n	8002b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b21      	cmp	r3, #33	@ 0x21
 8002b4e:	d121      	bne.n	8002b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b5e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff fe36 	bl	80027f8 <HAL_I2C_MemTxCpltCallback>
}
 8002b8c:	e002      	b.n	8002b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff f894 	bl	8001cbc <I2C_Flush_DR>
}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b22      	cmp	r3, #34	@ 0x22
 8002bae:	f040 80b9 	bne.w	8002d24 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d921      	bls.n	8002c0a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	f040 8096 	bne.w	8002d24 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c06:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002c08:	e08c      	b.n	8002d24 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d07f      	beq.n	8002d12 <I2C_MasterReceive_RXNE+0x176>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d002      	beq.n	8002c1e <I2C_MasterReceive_RXNE+0x82>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d179      	bne.n	8002d12 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f001 fb36 	bl	8004290 <I2C_WaitOnSTOPRequestThroughIT>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d14c      	bne.n	8002cc4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c38:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c48:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b40      	cmp	r3, #64	@ 0x40
 8002c82:	d10a      	bne.n	8002c9a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff fdba 	bl	800280c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c98:	e044      	b.n	8002d24 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d002      	beq.n	8002cae <I2C_MasterReceive_RXNE+0x112>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d103      	bne.n	8002cb6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cb4:	e002      	b.n	8002cbc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2212      	movs	r2, #18
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff fd65 	bl	800278c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002cc2:	e02f      	b.n	8002d24 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002cd2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff fd88 	bl	8002820 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d10:	e008      	b.n	8002d24 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d20:	605a      	str	r2, [r3, #4]
}
 8002d22:	e7ff      	b.n	8002d24 <I2C_MasterReceive_RXNE+0x188>
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d11b      	bne.n	8002d7c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d52:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002d7a:	e0c4      	b.n	8002f06 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d129      	bne.n	8002dda <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d94:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d00a      	beq.n	8002db2 <I2C_MasterReceive_BTF+0x86>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d007      	beq.n	8002db2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002db0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002dd8:	e095      	b.n	8002f06 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d17d      	bne.n	8002ee0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d002      	beq.n	8002df0 <I2C_MasterReceive_BTF+0xc4>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d108      	bne.n	8002e02 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	e016      	b.n	8002e30 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d002      	beq.n	8002e0e <I2C_MasterReceive_BTF+0xe2>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d108      	bne.n	8002e20 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e007      	b.n	8002e30 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e2e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002e8a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b40      	cmp	r3, #64	@ 0x40
 8002e9e:	d10a      	bne.n	8002eb6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff fcac 	bl	800280c <HAL_I2C_MemRxCpltCallback>
}
 8002eb4:	e027      	b.n	8002f06 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d002      	beq.n	8002eca <I2C_MasterReceive_BTF+0x19e>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d103      	bne.n	8002ed2 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ed0:	e002      	b.n	8002ed8 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2212      	movs	r2, #18
 8002ed6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff fc57 	bl	800278c <HAL_I2C_MasterRxCpltCallback>
}
 8002ede:	e012      	b.n	8002f06 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b40      	cmp	r3, #64	@ 0x40
 8002f20:	d117      	bne.n	8002f52 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f3a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002f3c:	e067      	b.n	800300e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	611a      	str	r2, [r3, #16]
}
 8002f50:	e05d      	b.n	800300e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f5a:	d133      	bne.n	8002fc4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b21      	cmp	r3, #33	@ 0x21
 8002f66:	d109      	bne.n	8002f7c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f78:	611a      	str	r2, [r3, #16]
 8002f7a:	e008      	b.n	8002f8e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <I2C_Master_SB+0x92>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d108      	bne.n	8002fb2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d032      	beq.n	800300e <I2C_Master_SB+0x100>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d02d      	beq.n	800300e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fc0:	605a      	str	r2, [r3, #4]
}
 8002fc2:	e024      	b.n	800300e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10e      	bne.n	8002fea <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	11db      	asrs	r3, r3, #7
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f003 0306 	and.w	r3, r3, #6
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f063 030f 	orn	r3, r3, #15
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	611a      	str	r2, [r3, #16]
}
 8002fe8:	e011      	b.n	800300e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d10d      	bne.n	800300e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	11db      	asrs	r3, r3, #7
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f003 0306 	and.w	r3, r3, #6
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f063 030e 	orn	r3, r3, #14
 8003006:	b2da      	uxtb	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	611a      	str	r2, [r3, #16]
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003026:	b2da      	uxtb	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003032:	2b00      	cmp	r3, #0
 8003034:	d004      	beq.n	8003040 <I2C_Master_ADD10+0x26>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d108      	bne.n	8003052 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00c      	beq.n	8003062 <I2C_Master_ADD10+0x48>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003060:	605a      	str	r2, [r3, #4]
  }
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800306e:	b480      	push	{r7}
 8003070:	b091      	sub	sp, #68	@ 0x44
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800307c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003084:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b22      	cmp	r3, #34	@ 0x22
 8003096:	f040 8169 	bne.w	800336c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10f      	bne.n	80030c2 <I2C_Master_ADDR+0x54>
 80030a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80030a6:	2b40      	cmp	r3, #64	@ 0x40
 80030a8:	d10b      	bne.n	80030c2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030aa:	2300      	movs	r3, #0
 80030ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80030be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c0:	e160      	b.n	8003384 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11d      	bne.n	8003106 <I2C_Master_ADDR+0x98>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80030d2:	d118      	bne.n	8003106 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d4:	2300      	movs	r3, #0
 80030d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030f8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	651a      	str	r2, [r3, #80]	@ 0x50
 8003104:	e13e      	b.n	8003384 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d113      	bne.n	8003138 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003110:	2300      	movs	r3, #0
 8003112:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003124:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e115      	b.n	8003364 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	f040 808a 	bne.w	8003258 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003146:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800314a:	d137      	bne.n	80031bc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800315a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003166:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800316a:	d113      	bne.n	8003194 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800317a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	e0e7      	b.n	8003364 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003194:	2300      	movs	r3, #0
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	623b      	str	r3, [r7, #32]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	623b      	str	r3, [r7, #32]
 80031a8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e0d3      	b.n	8003364 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80031bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d02e      	beq.n	8003220 <I2C_Master_ADDR+0x1b2>
 80031c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d02b      	beq.n	8003220 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80031c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ca:	2b12      	cmp	r3, #18
 80031cc:	d102      	bne.n	80031d4 <I2C_Master_ADDR+0x166>
 80031ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d125      	bne.n	8003220 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80031d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d00e      	beq.n	80031f8 <I2C_Master_ADDR+0x18a>
 80031da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d00b      	beq.n	80031f8 <I2C_Master_ADDR+0x18a>
 80031e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d008      	beq.n	80031f8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e007      	b.n	8003208 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003206:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003208:	2300      	movs	r3, #0
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	e0a1      	b.n	8003364 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800322e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003230:	2300      	movs	r3, #0
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e085      	b.n	8003364 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d14d      	bne.n	80032fe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003264:	2b04      	cmp	r3, #4
 8003266:	d016      	beq.n	8003296 <I2C_Master_ADDR+0x228>
 8003268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326a:	2b02      	cmp	r3, #2
 800326c:	d013      	beq.n	8003296 <I2C_Master_ADDR+0x228>
 800326e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003270:	2b10      	cmp	r3, #16
 8003272:	d010      	beq.n	8003296 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003282:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e007      	b.n	80032a6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032a4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032b4:	d117      	bne.n	80032e6 <I2C_Master_ADDR+0x278>
 80032b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032bc:	d00b      	beq.n	80032d6 <I2C_Master_ADDR+0x268>
 80032be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d008      	beq.n	80032d6 <I2C_Master_ADDR+0x268>
 80032c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d005      	beq.n	80032d6 <I2C_Master_ADDR+0x268>
 80032ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d002      	beq.n	80032d6 <I2C_Master_ADDR+0x268>
 80032d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d107      	bne.n	80032e6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	e032      	b.n	8003364 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800330c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003318:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800331c:	d117      	bne.n	800334e <I2C_Master_ADDR+0x2e0>
 800331e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003320:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003324:	d00b      	beq.n	800333e <I2C_Master_ADDR+0x2d0>
 8003326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003328:	2b01      	cmp	r3, #1
 800332a:	d008      	beq.n	800333e <I2C_Master_ADDR+0x2d0>
 800332c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800332e:	2b08      	cmp	r3, #8
 8003330:	d005      	beq.n	800333e <I2C_Master_ADDR+0x2d0>
 8003332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003334:	2b10      	cmp	r3, #16
 8003336:	d002      	beq.n	800333e <I2C_Master_ADDR+0x2d0>
 8003338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800333a:	2b20      	cmp	r3, #32
 800333c:	d107      	bne.n	800334e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800334c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800336a:	e00b      	b.n	8003384 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
}
 8003382:	e7ff      	b.n	8003384 <I2C_Master_ADDR+0x316>
 8003384:	bf00      	nop
 8003386:	3744      	adds	r7, #68	@ 0x44
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800339e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d02b      	beq.n	8003402 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ae:	781a      	ldrb	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d114      	bne.n	8003402 <I2C_SlaveTransmit_TXE+0x72>
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	2b29      	cmp	r3, #41	@ 0x29
 80033dc:	d111      	bne.n	8003402 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2221      	movs	r2, #33	@ 0x21
 80033f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2228      	movs	r2, #40	@ 0x28
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff f9cf 	bl	80027a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d011      	beq.n	8003440 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800345a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d02c      	beq.n	80034c0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <I2C_SlaveReceive_RXNE+0x74>
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	2b2a      	cmp	r3, #42	@ 0x2a
 800349a:	d111      	bne.n	80034c0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2222      	movs	r2, #34	@ 0x22
 80034b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2228      	movs	r2, #40	@ 0x28
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff f97a 	bl	80027b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d012      	beq.n	8003500 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003526:	2b28      	cmp	r3, #40	@ 0x28
 8003528:	d127      	bne.n	800357a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003538:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	09db      	lsrs	r3, r3, #7
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	81bb      	strh	r3, [r7, #12]
 800355c:	e002      	b.n	8003564 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800356c:	89ba      	ldrh	r2, [r7, #12]
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff f928 	bl	80027c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003578:	e00e      	b.n	8003598 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80035c0:	2300      	movs	r3, #0
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035fc:	d172      	bne.n	80036e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	2b22      	cmp	r3, #34	@ 0x22
 8003602:	d002      	beq.n	800360a <I2C_Slave_STOPF+0x6a>
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	2b2a      	cmp	r3, #42	@ 0x2a
 8003608:	d135      	bne.n	8003676 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	b29a      	uxth	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	f043 0204 	orr.w	r2, r3, #4
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800363c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd ff70 	bl	8001528 <HAL_DMA_GetState>
 8003648:	4603      	mov	r3, r0
 800364a:	2b01      	cmp	r3, #1
 800364c:	d049      	beq.n	80036e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003652:	4a69      	ldr	r2, [pc, #420]	@ (80037f8 <I2C_Slave_STOPF+0x258>)
 8003654:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365a:	4618      	mov	r0, r3
 800365c:	f7fd fdb8 	bl	80011d0 <HAL_DMA_Abort_IT>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d03d      	beq.n	80036e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003670:	4610      	mov	r0, r2
 8003672:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003674:	e035      	b.n	80036e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	f043 0204 	orr.w	r2, r3, #4
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd ff3a 	bl	8001528 <HAL_DMA_GetState>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d014      	beq.n	80036e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036be:	4a4e      	ldr	r2, [pc, #312]	@ (80037f8 <I2C_Slave_STOPF+0x258>)
 80036c0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fd fd82 	bl	80011d0 <HAL_DMA_Abort_IT>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036dc:	4610      	mov	r0, r2
 80036de:	4798      	blx	r3
 80036e0:	e000      	b.n	80036e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d03e      	beq.n	800376c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d112      	bne.n	8003722 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372c:	2b40      	cmp	r3, #64	@ 0x40
 800372e:	d112      	bne.n	8003756 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003764:	f043 0204 	orr.w	r2, r3, #4
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f8b7 	bl	80038e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800377a:	e039      	b.n	80037f0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003780:	d109      	bne.n	8003796 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2228      	movs	r2, #40	@ 0x28
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff f80f 	bl	80027b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b28      	cmp	r3, #40	@ 0x28
 80037a0:	d111      	bne.n	80037c6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a15      	ldr	r2, [pc, #84]	@ (80037fc <I2C_Slave_STOPF+0x25c>)
 80037a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff f810 	bl	80027e4 <HAL_I2C_ListenCpltCallback>
}
 80037c4:	e014      	b.n	80037f0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	2b22      	cmp	r3, #34	@ 0x22
 80037cc:	d002      	beq.n	80037d4 <I2C_Slave_STOPF+0x234>
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	2b22      	cmp	r3, #34	@ 0x22
 80037d2:	d10d      	bne.n	80037f0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fe ffe2 	bl	80027b4 <HAL_I2C_SlaveRxCpltCallback>
}
 80037f0:	bf00      	nop
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	08003ded 	.word	0x08003ded
 80037fc:	ffff0000 	.word	0xffff0000

08003800 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800380e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003814:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d002      	beq.n	8003822 <I2C_Slave_AF+0x22>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b20      	cmp	r3, #32
 8003820:	d129      	bne.n	8003876 <I2C_Slave_AF+0x76>
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	2b28      	cmp	r3, #40	@ 0x28
 8003826:	d126      	bne.n	8003876 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a2e      	ldr	r2, [pc, #184]	@ (80038e4 <I2C_Slave_AF+0xe4>)
 800382c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800383c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003846:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003856:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fe ffb8 	bl	80027e4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003874:	e031      	b.n	80038da <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	2b21      	cmp	r3, #33	@ 0x21
 800387a:	d129      	bne.n	80038d0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a19      	ldr	r2, [pc, #100]	@ (80038e4 <I2C_Slave_AF+0xe4>)
 8003880:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2221      	movs	r2, #33	@ 0x21
 8003886:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038a6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038b0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038c0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fe f9fa 	bl	8001cbc <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fe ff69 	bl	80027a0 <HAL_I2C_SlaveTxCpltCallback>
}
 80038ce:	e004      	b.n	80038da <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038d8:	615a      	str	r2, [r3, #20]
}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	ffff0000 	.word	0xffff0000

080038e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003900:	7bbb      	ldrb	r3, [r7, #14]
 8003902:	2b10      	cmp	r3, #16
 8003904:	d002      	beq.n	800390c <I2C_ITError+0x24>
 8003906:	7bbb      	ldrb	r3, [r7, #14]
 8003908:	2b40      	cmp	r3, #64	@ 0x40
 800390a:	d10a      	bne.n	8003922 <I2C_ITError+0x3a>
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b22      	cmp	r3, #34	@ 0x22
 8003910:	d107      	bne.n	8003922 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003920:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003928:	2b28      	cmp	r3, #40	@ 0x28
 800392a:	d107      	bne.n	800393c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2228      	movs	r2, #40	@ 0x28
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800393a:	e015      	b.n	8003968 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800394a:	d00a      	beq.n	8003962 <I2C_ITError+0x7a>
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	2b60      	cmp	r3, #96	@ 0x60
 8003950:	d007      	beq.n	8003962 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003972:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003976:	d162      	bne.n	8003a3e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003986:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800398c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d020      	beq.n	80039d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800399a:	4a6a      	ldr	r2, [pc, #424]	@ (8003b44 <I2C_ITError+0x25c>)
 800399c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd fc14 	bl	80011d0 <HAL_DMA_Abort_IT>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8089 	beq.w	8003ac2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0201 	bic.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039d2:	4610      	mov	r0, r2
 80039d4:	4798      	blx	r3
 80039d6:	e074      	b.n	8003ac2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039dc:	4a59      	ldr	r2, [pc, #356]	@ (8003b44 <I2C_ITError+0x25c>)
 80039de:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fd fbf3 	bl	80011d0 <HAL_DMA_Abort_IT>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d068      	beq.n	8003ac2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fa:	2b40      	cmp	r3, #64	@ 0x40
 80039fc:	d10b      	bne.n	8003a16 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4798      	blx	r3
 8003a3c:	e041      	b.n	8003ac2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b60      	cmp	r3, #96	@ 0x60
 8003a48:	d125      	bne.n	8003a96 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a62:	2b40      	cmp	r3, #64	@ 0x40
 8003a64:	d10b      	bne.n	8003a7e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fe fed0 	bl	8002834 <HAL_I2C_AbortCpltCallback>
 8003a94:	e015      	b.n	8003ac2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa0:	2b40      	cmp	r3, #64	@ 0x40
 8003aa2:	d10b      	bne.n	8003abc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7fe feaf 	bl	8002820 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10e      	bne.n	8003af0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d104      	bne.n	8003af0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003afe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b06:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d113      	bne.n	8003b3c <I2C_ITError+0x254>
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b28      	cmp	r3, #40	@ 0x28
 8003b18:	d110      	bne.n	8003b3c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b48 <I2C_ITError+0x260>)
 8003b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fe fe54 	bl	80027e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	08003ded 	.word	0x08003ded
 8003b48:	ffff0000 	.word	0xffff0000

08003b4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d006      	beq.n	8003b76 <I2C_MasterRequestWrite+0x2a>
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d003      	beq.n	8003b76 <I2C_MasterRequestWrite+0x2a>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b74:	d108      	bne.n	8003b88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e00b      	b.n	8003ba0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	2b12      	cmp	r3, #18
 8003b8e:	d107      	bne.n	8003ba0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f9c5 	bl	8003f3c <I2C_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bc6:	d103      	bne.n	8003bd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e035      	b.n	8003c40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bdc:	d108      	bne.n	8003bf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bde:	897b      	ldrh	r3, [r7, #10]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bec:	611a      	str	r2, [r3, #16]
 8003bee:	e01b      	b.n	8003c28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bf0:	897b      	ldrh	r3, [r7, #10]
 8003bf2:	11db      	asrs	r3, r3, #7
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f003 0306 	and.w	r3, r3, #6
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f063 030f 	orn	r3, r3, #15
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	490e      	ldr	r1, [pc, #56]	@ (8003c48 <I2C_MasterRequestWrite+0xfc>)
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fa0e 	bl	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e010      	b.n	8003c40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c1e:	897b      	ldrh	r3, [r7, #10]
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4907      	ldr	r1, [pc, #28]	@ (8003c4c <I2C_MasterRequestWrite+0x100>)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f9fe 	bl	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	00010008 	.word	0x00010008
 8003c4c:	00010002 	.word	0x00010002

08003c50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d006      	beq.n	8003c8a <I2C_MasterRequestRead+0x3a>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d003      	beq.n	8003c8a <I2C_MasterRequestRead+0x3a>
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c88:	d108      	bne.n	8003c9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e00b      	b.n	8003cb4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	2b11      	cmp	r3, #17
 8003ca2:	d107      	bne.n	8003cb4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f93b 	bl	8003f3c <I2C_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00d      	beq.n	8003ce8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cda:	d103      	bne.n	8003ce4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ce2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e079      	b.n	8003ddc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cf0:	d108      	bne.n	8003d04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cf2:	897b      	ldrh	r3, [r7, #10]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]
 8003d02:	e05f      	b.n	8003dc4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d04:	897b      	ldrh	r3, [r7, #10]
 8003d06:	11db      	asrs	r3, r3, #7
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f003 0306 	and.w	r3, r3, #6
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	f063 030f 	orn	r3, r3, #15
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4930      	ldr	r1, [pc, #192]	@ (8003de4 <I2C_MasterRequestRead+0x194>)
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f984 	bl	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e054      	b.n	8003ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d32:	897b      	ldrh	r3, [r7, #10]
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	4929      	ldr	r1, [pc, #164]	@ (8003de8 <I2C_MasterRequestRead+0x198>)
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f974 	bl	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e044      	b.n	8003ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f8d9 	bl	8003f3c <I2C_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00d      	beq.n	8003dac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d9e:	d103      	bne.n	8003da8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003da6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e017      	b.n	8003ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003dac:	897b      	ldrh	r3, [r7, #10]
 8003dae:	11db      	asrs	r3, r3, #7
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f003 0306 	and.w	r3, r3, #6
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f063 030e 	orn	r3, r3, #14
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4907      	ldr	r1, [pc, #28]	@ (8003de8 <I2C_MasterRequestRead+0x198>)
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f930 	bl	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	00010008 	.word	0x00010008
 8003de8:	00010002 	.word	0x00010002

08003dec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e04:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e06:	4b4b      	ldr	r3, [pc, #300]	@ (8003f34 <I2C_DMAAbort+0x148>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	08db      	lsrs	r3, r3, #3
 8003e0c:	4a4a      	ldr	r2, [pc, #296]	@ (8003f38 <I2C_DMAAbort+0x14c>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	0a1a      	lsrs	r2, r3, #8
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	00da      	lsls	r2, r3, #3
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	f043 0220 	orr.w	r2, r3, #32
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003e32:	e00a      	b.n	8003e4a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e48:	d0ea      	beq.n	8003e20 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e56:	2200      	movs	r2, #0
 8003e58:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e66:	2200      	movs	r2, #0
 8003e68:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e78:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b60      	cmp	r3, #96	@ 0x60
 8003eba:	d10e      	bne.n	8003eda <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ed2:	6978      	ldr	r0, [r7, #20]
 8003ed4:	f7fe fcae 	bl	8002834 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ed8:	e027      	b.n	8003f2a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eda:	7cfb      	ldrb	r3, [r7, #19]
 8003edc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ee0:	2b28      	cmp	r3, #40	@ 0x28
 8003ee2:	d117      	bne.n	8003f14 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2200      	movs	r2, #0
 8003f08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2228      	movs	r2, #40	@ 0x28
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f12:	e007      	b.n	8003f24 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003f24:	6978      	ldr	r0, [r7, #20]
 8003f26:	f7fe fc7b 	bl	8002820 <HAL_I2C_ErrorCallback>
}
 8003f2a:	bf00      	nop
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000004 	.word	0x20000004
 8003f38:	14f8b589 	.word	0x14f8b589

08003f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f4c:	e048      	b.n	8003fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d044      	beq.n	8003fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f56:	f7fc ff4b 	bl	8000df0 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d302      	bcc.n	8003f6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d139      	bne.n	8003fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	0c1b      	lsrs	r3, r3, #16
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d10d      	bne.n	8003f92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	43da      	mvns	r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	4013      	ands	r3, r2
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	e00c      	b.n	8003fac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	43da      	mvns	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d116      	bne.n	8003fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	f043 0220 	orr.w	r2, r3, #32
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e023      	b.n	8004028 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	0c1b      	lsrs	r3, r3, #16
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d10d      	bne.n	8004006 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	43da      	mvns	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	e00c      	b.n	8004020 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	43da      	mvns	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4013      	ands	r3, r2
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	429a      	cmp	r2, r3
 8004024:	d093      	beq.n	8003f4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800403e:	e071      	b.n	8004124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800404a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404e:	d123      	bne.n	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004068:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	f043 0204 	orr.w	r2, r3, #4
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e067      	b.n	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d041      	beq.n	8004124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a0:	f7fc fea6 	bl	8000df0 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d302      	bcc.n	80040b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d136      	bne.n	8004124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d10c      	bne.n	80040da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	43da      	mvns	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4013      	ands	r3, r2
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	bf14      	ite	ne
 80040d2:	2301      	movne	r3, #1
 80040d4:	2300      	moveq	r3, #0
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	e00b      	b.n	80040f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	43da      	mvns	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	4013      	ands	r3, r2
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf14      	ite	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	2300      	moveq	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d016      	beq.n	8004124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	f043 0220 	orr.w	r2, r3, #32
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e021      	b.n	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	0c1b      	lsrs	r3, r3, #16
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b01      	cmp	r3, #1
 800412c:	d10c      	bne.n	8004148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	43da      	mvns	r2, r3
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4013      	ands	r3, r2
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf14      	ite	ne
 8004140:	2301      	movne	r3, #1
 8004142:	2300      	moveq	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	e00b      	b.n	8004160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	43da      	mvns	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	bf14      	ite	ne
 800415a:	2301      	movne	r3, #1
 800415c:	2300      	moveq	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	f47f af6d 	bne.w	8004040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800417c:	e034      	b.n	80041e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f915 	bl	80043ae <I2C_IsAcknowledgeFailed>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e034      	b.n	80041f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d028      	beq.n	80041e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004196:	f7fc fe2b 	bl	8000df0 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d11d      	bne.n	80041e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b6:	2b80      	cmp	r3, #128	@ 0x80
 80041b8:	d016      	beq.n	80041e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e007      	b.n	80041f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f2:	2b80      	cmp	r3, #128	@ 0x80
 80041f4:	d1c3      	bne.n	800417e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800420c:	e034      	b.n	8004278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f8cd 	bl	80043ae <I2C_IsAcknowledgeFailed>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e034      	b.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d028      	beq.n	8004278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004226:	f7fc fde3 	bl	8000df0 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	429a      	cmp	r2, r3
 8004234:	d302      	bcc.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d11d      	bne.n	8004278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b04      	cmp	r3, #4
 8004248:	d016      	beq.n	8004278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e007      	b.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b04      	cmp	r3, #4
 8004284:	d1c3      	bne.n	800420e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800429c:	4b13      	ldr	r3, [pc, #76]	@ (80042ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	08db      	lsrs	r3, r3, #3
 80042a2:	4a13      	ldr	r2, [pc, #76]	@ (80042f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	0a1a      	lsrs	r2, r3, #8
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d107      	bne.n	80042ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	f043 0220 	orr.w	r2, r3, #32
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e008      	b.n	80042e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042dc:	d0e9      	beq.n	80042b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	20000004 	.word	0x20000004
 80042f0:	14f8b589 	.word	0x14f8b589

080042f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004300:	e049      	b.n	8004396 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b10      	cmp	r3, #16
 800430e:	d119      	bne.n	8004344 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0210 	mvn.w	r2, #16
 8004318:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e030      	b.n	80043a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004344:	f7fc fd54 	bl	8000df0 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	429a      	cmp	r2, r3
 8004352:	d302      	bcc.n	800435a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d11d      	bne.n	8004396 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004364:	2b40      	cmp	r3, #64	@ 0x40
 8004366:	d016      	beq.n	8004396 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e007      	b.n	80043a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a0:	2b40      	cmp	r3, #64	@ 0x40
 80043a2:	d1ae      	bne.n	8004302 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c4:	d11b      	bne.n	80043fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	f043 0204 	orr.w	r2, r3, #4
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800441c:	d103      	bne.n	8004426 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004424:	e007      	b.n	8004436 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800442e:	d102      	bne.n	8004436 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2208      	movs	r2, #8
 8004434:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0cc      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004458:	4b68      	ldr	r3, [pc, #416]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d90c      	bls.n	8004480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b65      	ldr	r3, [pc, #404]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800446e:	4b63      	ldr	r3, [pc, #396]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0b8      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004498:	4b59      	ldr	r3, [pc, #356]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4a58      	ldr	r2, [pc, #352]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b0:	4b53      	ldr	r3, [pc, #332]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a52      	ldr	r2, [pc, #328]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044bc:	4b50      	ldr	r3, [pc, #320]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	494d      	ldr	r1, [pc, #308]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d044      	beq.n	8004564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d107      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	4b47      	ldr	r3, [pc, #284]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d119      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e07f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d003      	beq.n	8004502 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004502:	4b3f      	ldr	r3, [pc, #252]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e06f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004512:	4b3b      	ldr	r3, [pc, #236]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e067      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004522:	4b37      	ldr	r3, [pc, #220]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f023 0203 	bic.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4934      	ldr	r1, [pc, #208]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	4313      	orrs	r3, r2
 8004532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004534:	f7fc fc5c 	bl	8000df0 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fc fc58 	bl	8000df0 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e04f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	4b2b      	ldr	r3, [pc, #172]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 020c 	and.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	429a      	cmp	r2, r3
 8004562:	d1eb      	bne.n	800453c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004564:	4b25      	ldr	r3, [pc, #148]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d20c      	bcs.n	800458c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b22      	ldr	r3, [pc, #136]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b20      	ldr	r3, [pc, #128]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e032      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004598:	4b19      	ldr	r3, [pc, #100]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4916      	ldr	r1, [pc, #88]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045b6:	4b12      	ldr	r3, [pc, #72]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	490e      	ldr	r1, [pc, #56]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045ca:	f000 f855 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 80045ce:	4602      	mov	r2, r0
 80045d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	490a      	ldr	r1, [pc, #40]	@ (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 80045dc:	5ccb      	ldrb	r3, [r1, r3]
 80045de:	fa22 f303 	lsr.w	r3, r2, r3
 80045e2:	4a09      	ldr	r2, [pc, #36]	@ (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80045e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80045e6:	4b09      	ldr	r3, [pc, #36]	@ (800460c <HAL_RCC_ClockConfig+0x1c8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fc fbbc 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40023c00 	.word	0x40023c00
 8004600:	40023800 	.word	0x40023800
 8004604:	080061f8 	.word	0x080061f8
 8004608:	20000004 	.word	0x20000004
 800460c:	20000008 	.word	0x20000008

08004610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004614:	4b03      	ldr	r3, [pc, #12]	@ (8004624 <HAL_RCC_GetHCLKFreq+0x14>)
 8004616:	681b      	ldr	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000004 	.word	0x20000004

08004628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800462c:	f7ff fff0 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	0a9b      	lsrs	r3, r3, #10
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4903      	ldr	r1, [pc, #12]	@ (800464c <HAL_RCC_GetPCLK1Freq+0x24>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40023800 	.word	0x40023800
 800464c:	08006208 	.word	0x08006208

08004650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004654:	f7ff ffdc 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0b5b      	lsrs	r3, r3, #13
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4903      	ldr	r1, [pc, #12]	@ (8004674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40023800 	.word	0x40023800
 8004674:	08006208 	.word	0x08006208

08004678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800467c:	b0ae      	sub	sp, #184	@ 0xb8
 800467e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800469e:	4bcb      	ldr	r3, [pc, #812]	@ (80049cc <HAL_RCC_GetSysClockFreq+0x354>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	f200 8206 	bhi.w	8004ab8 <HAL_RCC_GetSysClockFreq+0x440>
 80046ac:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046e9 	.word	0x080046e9
 80046b8:	08004ab9 	.word	0x08004ab9
 80046bc:	08004ab9 	.word	0x08004ab9
 80046c0:	08004ab9 	.word	0x08004ab9
 80046c4:	080046f1 	.word	0x080046f1
 80046c8:	08004ab9 	.word	0x08004ab9
 80046cc:	08004ab9 	.word	0x08004ab9
 80046d0:	08004ab9 	.word	0x08004ab9
 80046d4:	080046f9 	.word	0x080046f9
 80046d8:	08004ab9 	.word	0x08004ab9
 80046dc:	08004ab9 	.word	0x08004ab9
 80046e0:	08004ab9 	.word	0x08004ab9
 80046e4:	080048e9 	.word	0x080048e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e8:	4bb9      	ldr	r3, [pc, #740]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80046ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046ee:	e1e7      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046f0:	4bb8      	ldr	r3, [pc, #736]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80046f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046f6:	e1e3      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f8:	4bb4      	ldr	r3, [pc, #720]	@ (80049cc <HAL_RCC_GetSysClockFreq+0x354>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004700:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004704:	4bb1      	ldr	r3, [pc, #708]	@ (80049cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d071      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004710:	4bae      	ldr	r3, [pc, #696]	@ (80049cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	099b      	lsrs	r3, r3, #6
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800471c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004720:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004728:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800472c:	2300      	movs	r3, #0
 800472e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004732:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004736:	4622      	mov	r2, r4
 8004738:	462b      	mov	r3, r5
 800473a:	f04f 0000 	mov.w	r0, #0
 800473e:	f04f 0100 	mov.w	r1, #0
 8004742:	0159      	lsls	r1, r3, #5
 8004744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004748:	0150      	lsls	r0, r2, #5
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4621      	mov	r1, r4
 8004750:	1a51      	subs	r1, r2, r1
 8004752:	6439      	str	r1, [r7, #64]	@ 0x40
 8004754:	4629      	mov	r1, r5
 8004756:	eb63 0301 	sbc.w	r3, r3, r1
 800475a:	647b      	str	r3, [r7, #68]	@ 0x44
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004768:	4649      	mov	r1, r9
 800476a:	018b      	lsls	r3, r1, #6
 800476c:	4641      	mov	r1, r8
 800476e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004772:	4641      	mov	r1, r8
 8004774:	018a      	lsls	r2, r1, #6
 8004776:	4641      	mov	r1, r8
 8004778:	1a51      	subs	r1, r2, r1
 800477a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800477c:	4649      	mov	r1, r9
 800477e:	eb63 0301 	sbc.w	r3, r3, r1
 8004782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004790:	4649      	mov	r1, r9
 8004792:	00cb      	lsls	r3, r1, #3
 8004794:	4641      	mov	r1, r8
 8004796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800479a:	4641      	mov	r1, r8
 800479c:	00ca      	lsls	r2, r1, #3
 800479e:	4610      	mov	r0, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	4622      	mov	r2, r4
 80047a6:	189b      	adds	r3, r3, r2
 80047a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80047aa:	462b      	mov	r3, r5
 80047ac:	460a      	mov	r2, r1
 80047ae:	eb42 0303 	adc.w	r3, r2, r3
 80047b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047c0:	4629      	mov	r1, r5
 80047c2:	024b      	lsls	r3, r1, #9
 80047c4:	4621      	mov	r1, r4
 80047c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047ca:	4621      	mov	r1, r4
 80047cc:	024a      	lsls	r2, r1, #9
 80047ce:	4610      	mov	r0, r2
 80047d0:	4619      	mov	r1, r3
 80047d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80047e4:	f7fb fd6c 	bl	80002c0 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4613      	mov	r3, r2
 80047ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047f2:	e067      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f4:	4b75      	ldr	r3, [pc, #468]	@ (80049cc <HAL_RCC_GetSysClockFreq+0x354>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	099b      	lsrs	r3, r3, #6
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004800:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004804:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800480e:	2300      	movs	r3, #0
 8004810:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004812:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004816:	4622      	mov	r2, r4
 8004818:	462b      	mov	r3, r5
 800481a:	f04f 0000 	mov.w	r0, #0
 800481e:	f04f 0100 	mov.w	r1, #0
 8004822:	0159      	lsls	r1, r3, #5
 8004824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004828:	0150      	lsls	r0, r2, #5
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4621      	mov	r1, r4
 8004830:	1a51      	subs	r1, r2, r1
 8004832:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004834:	4629      	mov	r1, r5
 8004836:	eb63 0301 	sbc.w	r3, r3, r1
 800483a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004848:	4649      	mov	r1, r9
 800484a:	018b      	lsls	r3, r1, #6
 800484c:	4641      	mov	r1, r8
 800484e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004852:	4641      	mov	r1, r8
 8004854:	018a      	lsls	r2, r1, #6
 8004856:	4641      	mov	r1, r8
 8004858:	ebb2 0a01 	subs.w	sl, r2, r1
 800485c:	4649      	mov	r1, r9
 800485e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800486e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004872:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004876:	4692      	mov	sl, r2
 8004878:	469b      	mov	fp, r3
 800487a:	4623      	mov	r3, r4
 800487c:	eb1a 0303 	adds.w	r3, sl, r3
 8004880:	623b      	str	r3, [r7, #32]
 8004882:	462b      	mov	r3, r5
 8004884:	eb4b 0303 	adc.w	r3, fp, r3
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004896:	4629      	mov	r1, r5
 8004898:	028b      	lsls	r3, r1, #10
 800489a:	4621      	mov	r1, r4
 800489c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048a0:	4621      	mov	r1, r4
 80048a2:	028a      	lsls	r2, r1, #10
 80048a4:	4610      	mov	r0, r2
 80048a6:	4619      	mov	r1, r3
 80048a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048ac:	2200      	movs	r2, #0
 80048ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80048b0:	677a      	str	r2, [r7, #116]	@ 0x74
 80048b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80048b6:	f7fb fd03 	bl	80002c0 <__aeabi_uldivmod>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4613      	mov	r3, r2
 80048c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048c4:	4b41      	ldr	r3, [pc, #260]	@ (80049cc <HAL_RCC_GetSysClockFreq+0x354>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	3301      	adds	r3, #1
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80048d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048de:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80048e6:	e0eb      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e8:	4b38      	ldr	r3, [pc, #224]	@ (80049cc <HAL_RCC_GetSysClockFreq+0x354>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048f4:	4b35      	ldr	r3, [pc, #212]	@ (80049cc <HAL_RCC_GetSysClockFreq+0x354>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d06b      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004900:	4b32      	ldr	r3, [pc, #200]	@ (80049cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	099b      	lsrs	r3, r3, #6
 8004906:	2200      	movs	r2, #0
 8004908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800490a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800490c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800490e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004912:	663b      	str	r3, [r7, #96]	@ 0x60
 8004914:	2300      	movs	r3, #0
 8004916:	667b      	str	r3, [r7, #100]	@ 0x64
 8004918:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800491c:	4622      	mov	r2, r4
 800491e:	462b      	mov	r3, r5
 8004920:	f04f 0000 	mov.w	r0, #0
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	0159      	lsls	r1, r3, #5
 800492a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800492e:	0150      	lsls	r0, r2, #5
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4621      	mov	r1, r4
 8004936:	1a51      	subs	r1, r2, r1
 8004938:	61b9      	str	r1, [r7, #24]
 800493a:	4629      	mov	r1, r5
 800493c:	eb63 0301 	sbc.w	r3, r3, r1
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800494e:	4659      	mov	r1, fp
 8004950:	018b      	lsls	r3, r1, #6
 8004952:	4651      	mov	r1, sl
 8004954:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004958:	4651      	mov	r1, sl
 800495a:	018a      	lsls	r2, r1, #6
 800495c:	4651      	mov	r1, sl
 800495e:	ebb2 0801 	subs.w	r8, r2, r1
 8004962:	4659      	mov	r1, fp
 8004964:	eb63 0901 	sbc.w	r9, r3, r1
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004974:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004978:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800497c:	4690      	mov	r8, r2
 800497e:	4699      	mov	r9, r3
 8004980:	4623      	mov	r3, r4
 8004982:	eb18 0303 	adds.w	r3, r8, r3
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	462b      	mov	r3, r5
 800498a:	eb49 0303 	adc.w	r3, r9, r3
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800499c:	4629      	mov	r1, r5
 800499e:	024b      	lsls	r3, r1, #9
 80049a0:	4621      	mov	r1, r4
 80049a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049a6:	4621      	mov	r1, r4
 80049a8:	024a      	lsls	r2, r1, #9
 80049aa:	4610      	mov	r0, r2
 80049ac:	4619      	mov	r1, r3
 80049ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049b2:	2200      	movs	r2, #0
 80049b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80049b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049bc:	f7fb fc80 	bl	80002c0 <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4613      	mov	r3, r2
 80049c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049ca:	e065      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x420>
 80049cc:	40023800 	.word	0x40023800
 80049d0:	00f42400 	.word	0x00f42400
 80049d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x458>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	099b      	lsrs	r3, r3, #6
 80049de:	2200      	movs	r2, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	4611      	mov	r1, r2
 80049e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80049ea:	2300      	movs	r3, #0
 80049ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80049ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80049f2:	4642      	mov	r2, r8
 80049f4:	464b      	mov	r3, r9
 80049f6:	f04f 0000 	mov.w	r0, #0
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	0159      	lsls	r1, r3, #5
 8004a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a04:	0150      	lsls	r0, r2, #5
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	1a51      	subs	r1, r2, r1
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	4649      	mov	r1, r9
 8004a12:	eb63 0301 	sbc.w	r3, r3, r1
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004a24:	4659      	mov	r1, fp
 8004a26:	018b      	lsls	r3, r1, #6
 8004a28:	4651      	mov	r1, sl
 8004a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a2e:	4651      	mov	r1, sl
 8004a30:	018a      	lsls	r2, r1, #6
 8004a32:	4651      	mov	r1, sl
 8004a34:	1a54      	subs	r4, r2, r1
 8004a36:	4659      	mov	r1, fp
 8004a38:	eb63 0501 	sbc.w	r5, r3, r1
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	00eb      	lsls	r3, r5, #3
 8004a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a4a:	00e2      	lsls	r2, r4, #3
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	461d      	mov	r5, r3
 8004a50:	4643      	mov	r3, r8
 8004a52:	18e3      	adds	r3, r4, r3
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	464b      	mov	r3, r9
 8004a58:	eb45 0303 	adc.w	r3, r5, r3
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	028b      	lsls	r3, r1, #10
 8004a6e:	4621      	mov	r1, r4
 8004a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a74:	4621      	mov	r1, r4
 8004a76:	028a      	lsls	r2, r1, #10
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a80:	2200      	movs	r2, #0
 8004a82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a84:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004a86:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a8a:	f7fb fc19 	bl	80002c0 <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4613      	mov	r3, r2
 8004a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a98:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	0f1b      	lsrs	r3, r3, #28
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004aa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ab6:	e003      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab8:	4b06      	ldr	r3, [pc, #24]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004aba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004abe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ac0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	37b8      	adds	r7, #184	@ 0xb8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	00f42400 	.word	0x00f42400

08004ad8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e28d      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 8083 	beq.w	8004bfe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004af8:	4b94      	ldr	r3, [pc, #592]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 030c 	and.w	r3, r3, #12
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d019      	beq.n	8004b38 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004b04:	4b91      	ldr	r3, [pc, #580]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 030c 	and.w	r3, r3, #12
        || \
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d106      	bne.n	8004b1e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004b10:	4b8e      	ldr	r3, [pc, #568]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b1c:	d00c      	beq.n	8004b38 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004b26:	2b0c      	cmp	r3, #12
 8004b28:	d112      	bne.n	8004b50 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b2a:	4b88      	ldr	r3, [pc, #544]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b36:	d10b      	bne.n	8004b50 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b38:	4b84      	ldr	r3, [pc, #528]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d05b      	beq.n	8004bfc <HAL_RCC_OscConfig+0x124>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d157      	bne.n	8004bfc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e25a      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b58:	d106      	bne.n	8004b68 <HAL_RCC_OscConfig+0x90>
 8004b5a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a7b      	ldr	r2, [pc, #492]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	e01d      	b.n	8004ba4 <HAL_RCC_OscConfig+0xcc>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCC_OscConfig+0xb4>
 8004b72:	4b76      	ldr	r3, [pc, #472]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a75      	ldr	r2, [pc, #468]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	4b73      	ldr	r3, [pc, #460]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a72      	ldr	r2, [pc, #456]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	e00b      	b.n	8004ba4 <HAL_RCC_OscConfig+0xcc>
 8004b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a6e      	ldr	r2, [pc, #440]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	4b6c      	ldr	r3, [pc, #432]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a6b      	ldr	r2, [pc, #428]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004b9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d013      	beq.n	8004bd4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7fc f920 	bl	8000df0 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb4:	f7fc f91c 	bl	8000df0 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b64      	cmp	r3, #100	@ 0x64
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e21f      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc6:	4b61      	ldr	r3, [pc, #388]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0xdc>
 8004bd2:	e014      	b.n	8004bfe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd4:	f7fc f90c 	bl	8000df0 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bdc:	f7fc f908 	bl	8000df0 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b64      	cmp	r3, #100	@ 0x64
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e20b      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bee:	4b57      	ldr	r3, [pc, #348]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f0      	bne.n	8004bdc <HAL_RCC_OscConfig+0x104>
 8004bfa:	e000      	b.n	8004bfe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d06f      	beq.n	8004cea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c0a:	4b50      	ldr	r3, [pc, #320]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d017      	beq.n	8004c46 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004c16:	4b4d      	ldr	r3, [pc, #308]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
        || \
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d105      	bne.n	8004c2e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004c22:	4b4a      	ldr	r3, [pc, #296]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c2e:	4b47      	ldr	r3, [pc, #284]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d11c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3a:	4b44      	ldr	r3, [pc, #272]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d116      	bne.n	8004c74 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c46:	4b41      	ldr	r3, [pc, #260]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_RCC_OscConfig+0x186>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d001      	beq.n	8004c5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e1d3      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4937      	ldr	r1, [pc, #220]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c72:	e03a      	b.n	8004cea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d020      	beq.n	8004cbe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c7c:	4b34      	ldr	r3, [pc, #208]	@ (8004d50 <HAL_RCC_OscConfig+0x278>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fc f8b5 	bl	8000df0 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8a:	f7fc f8b1 	bl	8000df0 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e1b4      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca8:	4b28      	ldr	r3, [pc, #160]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	4925      	ldr	r1, [pc, #148]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	600b      	str	r3, [r1, #0]
 8004cbc:	e015      	b.n	8004cea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cbe:	4b24      	ldr	r3, [pc, #144]	@ (8004d50 <HAL_RCC_OscConfig+0x278>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fc f894 	bl	8000df0 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ccc:	f7fc f890 	bl	8000df0 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e193      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cde:	4b1b      	ldr	r3, [pc, #108]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d036      	beq.n	8004d64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d016      	beq.n	8004d2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cfe:	4b15      	ldr	r3, [pc, #84]	@ (8004d54 <HAL_RCC_OscConfig+0x27c>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7fc f874 	bl	8000df0 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0c:	f7fc f870 	bl	8000df0 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e173      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <HAL_RCC_OscConfig+0x274>)
 8004d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x234>
 8004d2a:	e01b      	b.n	8004d64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d2c:	4b09      	ldr	r3, [pc, #36]	@ (8004d54 <HAL_RCC_OscConfig+0x27c>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d32:	f7fc f85d 	bl	8000df0 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d38:	e00e      	b.n	8004d58 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d3a:	f7fc f859 	bl	8000df0 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d907      	bls.n	8004d58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e15c      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	42470000 	.word	0x42470000
 8004d54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d58:	4b8a      	ldr	r3, [pc, #552]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1ea      	bne.n	8004d3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8097 	beq.w	8004ea0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d72:	2300      	movs	r3, #0
 8004d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d76:	4b83      	ldr	r3, [pc, #524]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10f      	bne.n	8004da2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]
 8004d86:	4b7f      	ldr	r3, [pc, #508]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d92:	4b7c      	ldr	r3, [pc, #496]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d9a:	60bb      	str	r3, [r7, #8]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da2:	4b79      	ldr	r3, [pc, #484]	@ (8004f88 <HAL_RCC_OscConfig+0x4b0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d118      	bne.n	8004de0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dae:	4b76      	ldr	r3, [pc, #472]	@ (8004f88 <HAL_RCC_OscConfig+0x4b0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a75      	ldr	r2, [pc, #468]	@ (8004f88 <HAL_RCC_OscConfig+0x4b0>)
 8004db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dba:	f7fc f819 	bl	8000df0 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc2:	f7fc f815 	bl	8000df0 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e118      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd4:	4b6c      	ldr	r3, [pc, #432]	@ (8004f88 <HAL_RCC_OscConfig+0x4b0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d106      	bne.n	8004df6 <HAL_RCC_OscConfig+0x31e>
 8004de8:	4b66      	ldr	r3, [pc, #408]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dec:	4a65      	ldr	r2, [pc, #404]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004dee:	f043 0301 	orr.w	r3, r3, #1
 8004df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004df4:	e01c      	b.n	8004e30 <HAL_RCC_OscConfig+0x358>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b05      	cmp	r3, #5
 8004dfc:	d10c      	bne.n	8004e18 <HAL_RCC_OscConfig+0x340>
 8004dfe:	4b61      	ldr	r3, [pc, #388]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e02:	4a60      	ldr	r2, [pc, #384]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004e04:	f043 0304 	orr.w	r3, r3, #4
 8004e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e0a:	4b5e      	ldr	r3, [pc, #376]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0e:	4a5d      	ldr	r2, [pc, #372]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e16:	e00b      	b.n	8004e30 <HAL_RCC_OscConfig+0x358>
 8004e18:	4b5a      	ldr	r3, [pc, #360]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1c:	4a59      	ldr	r2, [pc, #356]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004e1e:	f023 0301 	bic.w	r3, r3, #1
 8004e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e24:	4b57      	ldr	r3, [pc, #348]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e28:	4a56      	ldr	r2, [pc, #344]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004e2a:	f023 0304 	bic.w	r3, r3, #4
 8004e2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d015      	beq.n	8004e64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e38:	f7fb ffda 	bl	8000df0 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3e:	e00a      	b.n	8004e56 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e40:	f7fb ffd6 	bl	8000df0 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e0d7      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e56:	4b4b      	ldr	r3, [pc, #300]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0ee      	beq.n	8004e40 <HAL_RCC_OscConfig+0x368>
 8004e62:	e014      	b.n	8004e8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7fb ffc4 	bl	8000df0 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6c:	f7fb ffc0 	bl	8000df0 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e0c1      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e82:	4b40      	ldr	r3, [pc, #256]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ee      	bne.n	8004e6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e94:	4b3b      	ldr	r3, [pc, #236]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e98:	4a3a      	ldr	r2, [pc, #232]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004e9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80ad 	beq.w	8005004 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eaa:	4b36      	ldr	r3, [pc, #216]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d060      	beq.n	8004f78 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d145      	bne.n	8004f4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ebe:	4b33      	ldr	r3, [pc, #204]	@ (8004f8c <HAL_RCC_OscConfig+0x4b4>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fb ff94 	bl	8000df0 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ecc:	f7fb ff90 	bl	8000df0 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e093      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ede:	4b29      	ldr	r3, [pc, #164]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69da      	ldr	r2, [r3, #28]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	019b      	lsls	r3, r3, #6
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	3b01      	subs	r3, #1
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0c:	061b      	lsls	r3, r3, #24
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f14:	071b      	lsls	r3, r3, #28
 8004f16:	491b      	ldr	r1, [pc, #108]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004f8c <HAL_RCC_OscConfig+0x4b4>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f22:	f7fb ff65 	bl	8000df0 <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2a:	f7fb ff61 	bl	8000df0 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e064      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3c:	4b11      	ldr	r3, [pc, #68]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0f0      	beq.n	8004f2a <HAL_RCC_OscConfig+0x452>
 8004f48:	e05c      	b.n	8005004 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4a:	4b10      	ldr	r3, [pc, #64]	@ (8004f8c <HAL_RCC_OscConfig+0x4b4>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fb ff4e 	bl	8000df0 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fb ff4a 	bl	8000df0 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e04d      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6a:	4b06      	ldr	r3, [pc, #24]	@ (8004f84 <HAL_RCC_OscConfig+0x4ac>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x480>
 8004f76:	e045      	b.n	8005004 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d107      	bne.n	8004f90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e040      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
 8004f84:	40023800 	.word	0x40023800
 8004f88:	40007000 	.word	0x40007000
 8004f8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f90:	4b1f      	ldr	r3, [pc, #124]	@ (8005010 <HAL_RCC_OscConfig+0x538>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d030      	beq.n	8005000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d129      	bne.n	8005000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d122      	bne.n	8005000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d119      	bne.n	8005000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	085b      	lsrs	r3, r3, #1
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d10f      	bne.n	8005000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d107      	bne.n	8005000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d001      	beq.n	8005004 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40023800 	.word	0x40023800

08005014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e042      	b.n	80050ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fb fd6a 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2224      	movs	r2, #36	@ 0x24
 8005044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f973 	bl	8005344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800506c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695a      	ldr	r2, [r3, #20]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800507c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800508c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	@ 0x28
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	4613      	mov	r3, r2
 80050c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d175      	bne.n	80051c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <HAL_UART_Transmit+0x2c>
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e06e      	b.n	80051c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2221      	movs	r2, #33	@ 0x21
 80050ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050f2:	f7fb fe7d 	bl	8000df0 <HAL_GetTick>
 80050f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	88fa      	ldrh	r2, [r7, #6]
 80050fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800510c:	d108      	bne.n	8005120 <HAL_UART_Transmit+0x6c>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d104      	bne.n	8005120 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	e003      	b.n	8005128 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005128:	e02e      	b.n	8005188 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2200      	movs	r2, #0
 8005132:	2180      	movs	r1, #128	@ 0x80
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f848 	bl	80051ca <UART_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e03a      	b.n	80051c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10b      	bne.n	800516a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005160:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	3302      	adds	r3, #2
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	e007      	b.n	800517a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	781a      	ldrb	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	3301      	adds	r3, #1
 8005178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1cb      	bne.n	800512a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2200      	movs	r2, #0
 800519a:	2140      	movs	r1, #64	@ 0x40
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f814 	bl	80051ca <UART_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e006      	b.n	80051c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	e000      	b.n	80051c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80051c0:	2302      	movs	r3, #2
  }
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b086      	sub	sp, #24
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	603b      	str	r3, [r7, #0]
 80051d6:	4613      	mov	r3, r2
 80051d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051da:	e03b      	b.n	8005254 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e2:	d037      	beq.n	8005254 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e4:	f7fb fe04 	bl	8000df0 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	6a3a      	ldr	r2, [r7, #32]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d302      	bcc.n	80051fa <UART_WaitOnFlagUntilTimeout+0x30>
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e03a      	b.n	8005274 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d023      	beq.n	8005254 <UART_WaitOnFlagUntilTimeout+0x8a>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b80      	cmp	r3, #128	@ 0x80
 8005210:	d020      	beq.n	8005254 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b40      	cmp	r3, #64	@ 0x40
 8005216:	d01d      	beq.n	8005254 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b08      	cmp	r3, #8
 8005224:	d116      	bne.n	8005254 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f81d 	bl	800527c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2208      	movs	r2, #8
 8005246:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e00f      	b.n	8005274 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4013      	ands	r3, r2
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	429a      	cmp	r2, r3
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	79fb      	ldrb	r3, [r7, #7]
 800526e:	429a      	cmp	r2, r3
 8005270:	d0b4      	beq.n	80051dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800527c:	b480      	push	{r7}
 800527e:	b095      	sub	sp, #84	@ 0x54
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	330c      	adds	r3, #12
 800528a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005296:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800529a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	330c      	adds	r3, #12
 80052a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80052a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e5      	bne.n	8005284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3314      	adds	r3, #20
 80052be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f023 0301 	bic.w	r3, r3, #1
 80052ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3314      	adds	r3, #20
 80052d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e5      	bne.n	80052b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d119      	bne.n	8005328 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	330c      	adds	r3, #12
 80052fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	60bb      	str	r3, [r7, #8]
   return(result);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f023 0310 	bic.w	r3, r3, #16
 800530a:	647b      	str	r3, [r7, #68]	@ 0x44
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005314:	61ba      	str	r2, [r7, #24]
 8005316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	6979      	ldr	r1, [r7, #20]
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	613b      	str	r3, [r7, #16]
   return(result);
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e5      	bne.n	80052f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005336:	bf00      	nop
 8005338:	3754      	adds	r7, #84	@ 0x54
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005348:	b0c0      	sub	sp, #256	@ 0x100
 800534a:	af00      	add	r7, sp, #0
 800534c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005360:	68d9      	ldr	r1, [r3, #12]
 8005362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	ea40 0301 	orr.w	r3, r0, r1
 800536c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800536e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	431a      	orrs	r2, r3
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	431a      	orrs	r2, r3
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800539c:	f021 010c 	bic.w	r1, r1, #12
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053aa:	430b      	orrs	r3, r1
 80053ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80053ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053be:	6999      	ldr	r1, [r3, #24]
 80053c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	ea40 0301 	orr.w	r3, r0, r1
 80053ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b8f      	ldr	r3, [pc, #572]	@ (8005610 <UART_SetConfig+0x2cc>)
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d005      	beq.n	80053e4 <UART_SetConfig+0xa0>
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b8d      	ldr	r3, [pc, #564]	@ (8005614 <UART_SetConfig+0x2d0>)
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d104      	bne.n	80053ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053e4:	f7ff f934 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 80053e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053ec:	e003      	b.n	80053f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053ee:	f7ff f91b 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 80053f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005400:	f040 810c 	bne.w	800561c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005408:	2200      	movs	r2, #0
 800540a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800540e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005412:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005416:	4622      	mov	r2, r4
 8005418:	462b      	mov	r3, r5
 800541a:	1891      	adds	r1, r2, r2
 800541c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800541e:	415b      	adcs	r3, r3
 8005420:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005422:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005426:	4621      	mov	r1, r4
 8005428:	eb12 0801 	adds.w	r8, r2, r1
 800542c:	4629      	mov	r1, r5
 800542e:	eb43 0901 	adc.w	r9, r3, r1
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800543e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005446:	4690      	mov	r8, r2
 8005448:	4699      	mov	r9, r3
 800544a:	4623      	mov	r3, r4
 800544c:	eb18 0303 	adds.w	r3, r8, r3
 8005450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005454:	462b      	mov	r3, r5
 8005456:	eb49 0303 	adc.w	r3, r9, r3
 800545a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800545e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800546a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800546e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005472:	460b      	mov	r3, r1
 8005474:	18db      	adds	r3, r3, r3
 8005476:	653b      	str	r3, [r7, #80]	@ 0x50
 8005478:	4613      	mov	r3, r2
 800547a:	eb42 0303 	adc.w	r3, r2, r3
 800547e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005480:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005484:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005488:	f7fa ff1a 	bl	80002c0 <__aeabi_uldivmod>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4b61      	ldr	r3, [pc, #388]	@ (8005618 <UART_SetConfig+0x2d4>)
 8005492:	fba3 2302 	umull	r2, r3, r3, r2
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	011c      	lsls	r4, r3, #4
 800549a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800549e:	2200      	movs	r2, #0
 80054a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054ac:	4642      	mov	r2, r8
 80054ae:	464b      	mov	r3, r9
 80054b0:	1891      	adds	r1, r2, r2
 80054b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80054b4:	415b      	adcs	r3, r3
 80054b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054bc:	4641      	mov	r1, r8
 80054be:	eb12 0a01 	adds.w	sl, r2, r1
 80054c2:	4649      	mov	r1, r9
 80054c4:	eb43 0b01 	adc.w	fp, r3, r1
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054dc:	4692      	mov	sl, r2
 80054de:	469b      	mov	fp, r3
 80054e0:	4643      	mov	r3, r8
 80054e2:	eb1a 0303 	adds.w	r3, sl, r3
 80054e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054ea:	464b      	mov	r3, r9
 80054ec:	eb4b 0303 	adc.w	r3, fp, r3
 80054f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005500:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005504:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005508:	460b      	mov	r3, r1
 800550a:	18db      	adds	r3, r3, r3
 800550c:	643b      	str	r3, [r7, #64]	@ 0x40
 800550e:	4613      	mov	r3, r2
 8005510:	eb42 0303 	adc.w	r3, r2, r3
 8005514:	647b      	str	r3, [r7, #68]	@ 0x44
 8005516:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800551a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800551e:	f7fa fecf 	bl	80002c0 <__aeabi_uldivmod>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4611      	mov	r1, r2
 8005528:	4b3b      	ldr	r3, [pc, #236]	@ (8005618 <UART_SetConfig+0x2d4>)
 800552a:	fba3 2301 	umull	r2, r3, r3, r1
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	2264      	movs	r2, #100	@ 0x64
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	1acb      	subs	r3, r1, r3
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800553e:	4b36      	ldr	r3, [pc, #216]	@ (8005618 <UART_SetConfig+0x2d4>)
 8005540:	fba3 2302 	umull	r2, r3, r3, r2
 8005544:	095b      	lsrs	r3, r3, #5
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800554c:	441c      	add	r4, r3
 800554e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005552:	2200      	movs	r2, #0
 8005554:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005558:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800555c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005560:	4642      	mov	r2, r8
 8005562:	464b      	mov	r3, r9
 8005564:	1891      	adds	r1, r2, r2
 8005566:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005568:	415b      	adcs	r3, r3
 800556a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800556c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005570:	4641      	mov	r1, r8
 8005572:	1851      	adds	r1, r2, r1
 8005574:	6339      	str	r1, [r7, #48]	@ 0x30
 8005576:	4649      	mov	r1, r9
 8005578:	414b      	adcs	r3, r1
 800557a:	637b      	str	r3, [r7, #52]	@ 0x34
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005588:	4659      	mov	r1, fp
 800558a:	00cb      	lsls	r3, r1, #3
 800558c:	4651      	mov	r1, sl
 800558e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005592:	4651      	mov	r1, sl
 8005594:	00ca      	lsls	r2, r1, #3
 8005596:	4610      	mov	r0, r2
 8005598:	4619      	mov	r1, r3
 800559a:	4603      	mov	r3, r0
 800559c:	4642      	mov	r2, r8
 800559e:	189b      	adds	r3, r3, r2
 80055a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055a4:	464b      	mov	r3, r9
 80055a6:	460a      	mov	r2, r1
 80055a8:	eb42 0303 	adc.w	r3, r2, r3
 80055ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055c4:	460b      	mov	r3, r1
 80055c6:	18db      	adds	r3, r3, r3
 80055c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055ca:	4613      	mov	r3, r2
 80055cc:	eb42 0303 	adc.w	r3, r2, r3
 80055d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80055da:	f7fa fe71 	bl	80002c0 <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005618 <UART_SetConfig+0x2d4>)
 80055e4:	fba3 1302 	umull	r1, r3, r3, r2
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	2164      	movs	r1, #100	@ 0x64
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	3332      	adds	r3, #50	@ 0x32
 80055f6:	4a08      	ldr	r2, [pc, #32]	@ (8005618 <UART_SetConfig+0x2d4>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	f003 0207 	and.w	r2, r3, #7
 8005602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4422      	add	r2, r4
 800560a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800560c:	e106      	b.n	800581c <UART_SetConfig+0x4d8>
 800560e:	bf00      	nop
 8005610:	40011000 	.word	0x40011000
 8005614:	40011400 	.word	0x40011400
 8005618:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800561c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005620:	2200      	movs	r2, #0
 8005622:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005626:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800562a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800562e:	4642      	mov	r2, r8
 8005630:	464b      	mov	r3, r9
 8005632:	1891      	adds	r1, r2, r2
 8005634:	6239      	str	r1, [r7, #32]
 8005636:	415b      	adcs	r3, r3
 8005638:	627b      	str	r3, [r7, #36]	@ 0x24
 800563a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800563e:	4641      	mov	r1, r8
 8005640:	1854      	adds	r4, r2, r1
 8005642:	4649      	mov	r1, r9
 8005644:	eb43 0501 	adc.w	r5, r3, r1
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	00eb      	lsls	r3, r5, #3
 8005652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005656:	00e2      	lsls	r2, r4, #3
 8005658:	4614      	mov	r4, r2
 800565a:	461d      	mov	r5, r3
 800565c:	4643      	mov	r3, r8
 800565e:	18e3      	adds	r3, r4, r3
 8005660:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005664:	464b      	mov	r3, r9
 8005666:	eb45 0303 	adc.w	r3, r5, r3
 800566a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800567a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800568a:	4629      	mov	r1, r5
 800568c:	008b      	lsls	r3, r1, #2
 800568e:	4621      	mov	r1, r4
 8005690:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005694:	4621      	mov	r1, r4
 8005696:	008a      	lsls	r2, r1, #2
 8005698:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800569c:	f7fa fe10 	bl	80002c0 <__aeabi_uldivmod>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4b60      	ldr	r3, [pc, #384]	@ (8005828 <UART_SetConfig+0x4e4>)
 80056a6:	fba3 2302 	umull	r2, r3, r3, r2
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	011c      	lsls	r4, r3, #4
 80056ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80056c0:	4642      	mov	r2, r8
 80056c2:	464b      	mov	r3, r9
 80056c4:	1891      	adds	r1, r2, r2
 80056c6:	61b9      	str	r1, [r7, #24]
 80056c8:	415b      	adcs	r3, r3
 80056ca:	61fb      	str	r3, [r7, #28]
 80056cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056d0:	4641      	mov	r1, r8
 80056d2:	1851      	adds	r1, r2, r1
 80056d4:	6139      	str	r1, [r7, #16]
 80056d6:	4649      	mov	r1, r9
 80056d8:	414b      	adcs	r3, r1
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056e8:	4659      	mov	r1, fp
 80056ea:	00cb      	lsls	r3, r1, #3
 80056ec:	4651      	mov	r1, sl
 80056ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056f2:	4651      	mov	r1, sl
 80056f4:	00ca      	lsls	r2, r1, #3
 80056f6:	4610      	mov	r0, r2
 80056f8:	4619      	mov	r1, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	4642      	mov	r2, r8
 80056fe:	189b      	adds	r3, r3, r2
 8005700:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005704:	464b      	mov	r3, r9
 8005706:	460a      	mov	r2, r1
 8005708:	eb42 0303 	adc.w	r3, r2, r3
 800570c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	67bb      	str	r3, [r7, #120]	@ 0x78
 800571a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005728:	4649      	mov	r1, r9
 800572a:	008b      	lsls	r3, r1, #2
 800572c:	4641      	mov	r1, r8
 800572e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005732:	4641      	mov	r1, r8
 8005734:	008a      	lsls	r2, r1, #2
 8005736:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800573a:	f7fa fdc1 	bl	80002c0 <__aeabi_uldivmod>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4611      	mov	r1, r2
 8005744:	4b38      	ldr	r3, [pc, #224]	@ (8005828 <UART_SetConfig+0x4e4>)
 8005746:	fba3 2301 	umull	r2, r3, r3, r1
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	2264      	movs	r2, #100	@ 0x64
 800574e:	fb02 f303 	mul.w	r3, r2, r3
 8005752:	1acb      	subs	r3, r1, r3
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	3332      	adds	r3, #50	@ 0x32
 8005758:	4a33      	ldr	r2, [pc, #204]	@ (8005828 <UART_SetConfig+0x4e4>)
 800575a:	fba2 2303 	umull	r2, r3, r2, r3
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005764:	441c      	add	r4, r3
 8005766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800576a:	2200      	movs	r2, #0
 800576c:	673b      	str	r3, [r7, #112]	@ 0x70
 800576e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005770:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005774:	4642      	mov	r2, r8
 8005776:	464b      	mov	r3, r9
 8005778:	1891      	adds	r1, r2, r2
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	415b      	adcs	r3, r3
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005784:	4641      	mov	r1, r8
 8005786:	1851      	adds	r1, r2, r1
 8005788:	6039      	str	r1, [r7, #0]
 800578a:	4649      	mov	r1, r9
 800578c:	414b      	adcs	r3, r1
 800578e:	607b      	str	r3, [r7, #4]
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	f04f 0300 	mov.w	r3, #0
 8005798:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800579c:	4659      	mov	r1, fp
 800579e:	00cb      	lsls	r3, r1, #3
 80057a0:	4651      	mov	r1, sl
 80057a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057a6:	4651      	mov	r1, sl
 80057a8:	00ca      	lsls	r2, r1, #3
 80057aa:	4610      	mov	r0, r2
 80057ac:	4619      	mov	r1, r3
 80057ae:	4603      	mov	r3, r0
 80057b0:	4642      	mov	r2, r8
 80057b2:	189b      	adds	r3, r3, r2
 80057b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057b6:	464b      	mov	r3, r9
 80057b8:	460a      	mov	r2, r1
 80057ba:	eb42 0303 	adc.w	r3, r2, r3
 80057be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80057ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80057d8:	4649      	mov	r1, r9
 80057da:	008b      	lsls	r3, r1, #2
 80057dc:	4641      	mov	r1, r8
 80057de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057e2:	4641      	mov	r1, r8
 80057e4:	008a      	lsls	r2, r1, #2
 80057e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80057ea:	f7fa fd69 	bl	80002c0 <__aeabi_uldivmod>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <UART_SetConfig+0x4e4>)
 80057f4:	fba3 1302 	umull	r1, r3, r3, r2
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	2164      	movs	r1, #100	@ 0x64
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	3332      	adds	r3, #50	@ 0x32
 8005806:	4a08      	ldr	r2, [pc, #32]	@ (8005828 <UART_SetConfig+0x4e4>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	f003 020f 	and.w	r2, r3, #15
 8005812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4422      	add	r2, r4
 800581a:	609a      	str	r2, [r3, #8]
}
 800581c:	bf00      	nop
 800581e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005822:	46bd      	mov	sp, r7
 8005824:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005828:	51eb851f 	.word	0x51eb851f

0800582c <sniprintf>:
 800582c:	b40c      	push	{r2, r3}
 800582e:	b530      	push	{r4, r5, lr}
 8005830:	4b18      	ldr	r3, [pc, #96]	@ (8005894 <sniprintf+0x68>)
 8005832:	1e0c      	subs	r4, r1, #0
 8005834:	681d      	ldr	r5, [r3, #0]
 8005836:	b09d      	sub	sp, #116	@ 0x74
 8005838:	da08      	bge.n	800584c <sniprintf+0x20>
 800583a:	238b      	movs	r3, #139	@ 0x8b
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	f04f 30ff 	mov.w	r0, #4294967295
 8005842:	b01d      	add	sp, #116	@ 0x74
 8005844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005848:	b002      	add	sp, #8
 800584a:	4770      	bx	lr
 800584c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005850:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	931b      	str	r3, [sp, #108]	@ 0x6c
 800585a:	bf14      	ite	ne
 800585c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005860:	4623      	moveq	r3, r4
 8005862:	9304      	str	r3, [sp, #16]
 8005864:	9307      	str	r3, [sp, #28]
 8005866:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800586a:	9002      	str	r0, [sp, #8]
 800586c:	9006      	str	r0, [sp, #24]
 800586e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005872:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005874:	ab21      	add	r3, sp, #132	@ 0x84
 8005876:	a902      	add	r1, sp, #8
 8005878:	4628      	mov	r0, r5
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	f000 f994 	bl	8005ba8 <_svfiprintf_r>
 8005880:	1c43      	adds	r3, r0, #1
 8005882:	bfbc      	itt	lt
 8005884:	238b      	movlt	r3, #139	@ 0x8b
 8005886:	602b      	strlt	r3, [r5, #0]
 8005888:	2c00      	cmp	r4, #0
 800588a:	d0da      	beq.n	8005842 <sniprintf+0x16>
 800588c:	9b02      	ldr	r3, [sp, #8]
 800588e:	2200      	movs	r2, #0
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	e7d6      	b.n	8005842 <sniprintf+0x16>
 8005894:	20000010 	.word	0x20000010

08005898 <memset>:
 8005898:	4402      	add	r2, r0
 800589a:	4603      	mov	r3, r0
 800589c:	4293      	cmp	r3, r2
 800589e:	d100      	bne.n	80058a2 <memset+0xa>
 80058a0:	4770      	bx	lr
 80058a2:	f803 1b01 	strb.w	r1, [r3], #1
 80058a6:	e7f9      	b.n	800589c <memset+0x4>

080058a8 <__errno>:
 80058a8:	4b01      	ldr	r3, [pc, #4]	@ (80058b0 <__errno+0x8>)
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	20000010 	.word	0x20000010

080058b4 <__libc_init_array>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	4d0d      	ldr	r5, [pc, #52]	@ (80058ec <__libc_init_array+0x38>)
 80058b8:	4c0d      	ldr	r4, [pc, #52]	@ (80058f0 <__libc_init_array+0x3c>)
 80058ba:	1b64      	subs	r4, r4, r5
 80058bc:	10a4      	asrs	r4, r4, #2
 80058be:	2600      	movs	r6, #0
 80058c0:	42a6      	cmp	r6, r4
 80058c2:	d109      	bne.n	80058d8 <__libc_init_array+0x24>
 80058c4:	4d0b      	ldr	r5, [pc, #44]	@ (80058f4 <__libc_init_array+0x40>)
 80058c6:	4c0c      	ldr	r4, [pc, #48]	@ (80058f8 <__libc_init_array+0x44>)
 80058c8:	f000 fc64 	bl	8006194 <_init>
 80058cc:	1b64      	subs	r4, r4, r5
 80058ce:	10a4      	asrs	r4, r4, #2
 80058d0:	2600      	movs	r6, #0
 80058d2:	42a6      	cmp	r6, r4
 80058d4:	d105      	bne.n	80058e2 <__libc_init_array+0x2e>
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
 80058d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058dc:	4798      	blx	r3
 80058de:	3601      	adds	r6, #1
 80058e0:	e7ee      	b.n	80058c0 <__libc_init_array+0xc>
 80058e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e6:	4798      	blx	r3
 80058e8:	3601      	adds	r6, #1
 80058ea:	e7f2      	b.n	80058d2 <__libc_init_array+0x1e>
 80058ec:	08006254 	.word	0x08006254
 80058f0:	08006254 	.word	0x08006254
 80058f4:	08006254 	.word	0x08006254
 80058f8:	08006258 	.word	0x08006258

080058fc <__retarget_lock_acquire_recursive>:
 80058fc:	4770      	bx	lr

080058fe <__retarget_lock_release_recursive>:
 80058fe:	4770      	bx	lr

08005900 <_free_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	4605      	mov	r5, r0
 8005904:	2900      	cmp	r1, #0
 8005906:	d041      	beq.n	800598c <_free_r+0x8c>
 8005908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800590c:	1f0c      	subs	r4, r1, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	bfb8      	it	lt
 8005912:	18e4      	addlt	r4, r4, r3
 8005914:	f000 f8e0 	bl	8005ad8 <__malloc_lock>
 8005918:	4a1d      	ldr	r2, [pc, #116]	@ (8005990 <_free_r+0x90>)
 800591a:	6813      	ldr	r3, [r2, #0]
 800591c:	b933      	cbnz	r3, 800592c <_free_r+0x2c>
 800591e:	6063      	str	r3, [r4, #4]
 8005920:	6014      	str	r4, [r2, #0]
 8005922:	4628      	mov	r0, r5
 8005924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005928:	f000 b8dc 	b.w	8005ae4 <__malloc_unlock>
 800592c:	42a3      	cmp	r3, r4
 800592e:	d908      	bls.n	8005942 <_free_r+0x42>
 8005930:	6820      	ldr	r0, [r4, #0]
 8005932:	1821      	adds	r1, r4, r0
 8005934:	428b      	cmp	r3, r1
 8005936:	bf01      	itttt	eq
 8005938:	6819      	ldreq	r1, [r3, #0]
 800593a:	685b      	ldreq	r3, [r3, #4]
 800593c:	1809      	addeq	r1, r1, r0
 800593e:	6021      	streq	r1, [r4, #0]
 8005940:	e7ed      	b.n	800591e <_free_r+0x1e>
 8005942:	461a      	mov	r2, r3
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	b10b      	cbz	r3, 800594c <_free_r+0x4c>
 8005948:	42a3      	cmp	r3, r4
 800594a:	d9fa      	bls.n	8005942 <_free_r+0x42>
 800594c:	6811      	ldr	r1, [r2, #0]
 800594e:	1850      	adds	r0, r2, r1
 8005950:	42a0      	cmp	r0, r4
 8005952:	d10b      	bne.n	800596c <_free_r+0x6c>
 8005954:	6820      	ldr	r0, [r4, #0]
 8005956:	4401      	add	r1, r0
 8005958:	1850      	adds	r0, r2, r1
 800595a:	4283      	cmp	r3, r0
 800595c:	6011      	str	r1, [r2, #0]
 800595e:	d1e0      	bne.n	8005922 <_free_r+0x22>
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	6053      	str	r3, [r2, #4]
 8005966:	4408      	add	r0, r1
 8005968:	6010      	str	r0, [r2, #0]
 800596a:	e7da      	b.n	8005922 <_free_r+0x22>
 800596c:	d902      	bls.n	8005974 <_free_r+0x74>
 800596e:	230c      	movs	r3, #12
 8005970:	602b      	str	r3, [r5, #0]
 8005972:	e7d6      	b.n	8005922 <_free_r+0x22>
 8005974:	6820      	ldr	r0, [r4, #0]
 8005976:	1821      	adds	r1, r4, r0
 8005978:	428b      	cmp	r3, r1
 800597a:	bf04      	itt	eq
 800597c:	6819      	ldreq	r1, [r3, #0]
 800597e:	685b      	ldreq	r3, [r3, #4]
 8005980:	6063      	str	r3, [r4, #4]
 8005982:	bf04      	itt	eq
 8005984:	1809      	addeq	r1, r1, r0
 8005986:	6021      	streq	r1, [r4, #0]
 8005988:	6054      	str	r4, [r2, #4]
 800598a:	e7ca      	b.n	8005922 <_free_r+0x22>
 800598c:	bd38      	pop	{r3, r4, r5, pc}
 800598e:	bf00      	nop
 8005990:	200002c8 	.word	0x200002c8

08005994 <sbrk_aligned>:
 8005994:	b570      	push	{r4, r5, r6, lr}
 8005996:	4e0f      	ldr	r6, [pc, #60]	@ (80059d4 <sbrk_aligned+0x40>)
 8005998:	460c      	mov	r4, r1
 800599a:	6831      	ldr	r1, [r6, #0]
 800599c:	4605      	mov	r5, r0
 800599e:	b911      	cbnz	r1, 80059a6 <sbrk_aligned+0x12>
 80059a0:	f000 fba4 	bl	80060ec <_sbrk_r>
 80059a4:	6030      	str	r0, [r6, #0]
 80059a6:	4621      	mov	r1, r4
 80059a8:	4628      	mov	r0, r5
 80059aa:	f000 fb9f 	bl	80060ec <_sbrk_r>
 80059ae:	1c43      	adds	r3, r0, #1
 80059b0:	d103      	bne.n	80059ba <sbrk_aligned+0x26>
 80059b2:	f04f 34ff 	mov.w	r4, #4294967295
 80059b6:	4620      	mov	r0, r4
 80059b8:	bd70      	pop	{r4, r5, r6, pc}
 80059ba:	1cc4      	adds	r4, r0, #3
 80059bc:	f024 0403 	bic.w	r4, r4, #3
 80059c0:	42a0      	cmp	r0, r4
 80059c2:	d0f8      	beq.n	80059b6 <sbrk_aligned+0x22>
 80059c4:	1a21      	subs	r1, r4, r0
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 fb90 	bl	80060ec <_sbrk_r>
 80059cc:	3001      	adds	r0, #1
 80059ce:	d1f2      	bne.n	80059b6 <sbrk_aligned+0x22>
 80059d0:	e7ef      	b.n	80059b2 <sbrk_aligned+0x1e>
 80059d2:	bf00      	nop
 80059d4:	200002c4 	.word	0x200002c4

080059d8 <_malloc_r>:
 80059d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059dc:	1ccd      	adds	r5, r1, #3
 80059de:	f025 0503 	bic.w	r5, r5, #3
 80059e2:	3508      	adds	r5, #8
 80059e4:	2d0c      	cmp	r5, #12
 80059e6:	bf38      	it	cc
 80059e8:	250c      	movcc	r5, #12
 80059ea:	2d00      	cmp	r5, #0
 80059ec:	4606      	mov	r6, r0
 80059ee:	db01      	blt.n	80059f4 <_malloc_r+0x1c>
 80059f0:	42a9      	cmp	r1, r5
 80059f2:	d904      	bls.n	80059fe <_malloc_r+0x26>
 80059f4:	230c      	movs	r3, #12
 80059f6:	6033      	str	r3, [r6, #0]
 80059f8:	2000      	movs	r0, #0
 80059fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ad4 <_malloc_r+0xfc>
 8005a02:	f000 f869 	bl	8005ad8 <__malloc_lock>
 8005a06:	f8d8 3000 	ldr.w	r3, [r8]
 8005a0a:	461c      	mov	r4, r3
 8005a0c:	bb44      	cbnz	r4, 8005a60 <_malloc_r+0x88>
 8005a0e:	4629      	mov	r1, r5
 8005a10:	4630      	mov	r0, r6
 8005a12:	f7ff ffbf 	bl	8005994 <sbrk_aligned>
 8005a16:	1c43      	adds	r3, r0, #1
 8005a18:	4604      	mov	r4, r0
 8005a1a:	d158      	bne.n	8005ace <_malloc_r+0xf6>
 8005a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8005a20:	4627      	mov	r7, r4
 8005a22:	2f00      	cmp	r7, #0
 8005a24:	d143      	bne.n	8005aae <_malloc_r+0xd6>
 8005a26:	2c00      	cmp	r4, #0
 8005a28:	d04b      	beq.n	8005ac2 <_malloc_r+0xea>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	4639      	mov	r1, r7
 8005a2e:	4630      	mov	r0, r6
 8005a30:	eb04 0903 	add.w	r9, r4, r3
 8005a34:	f000 fb5a 	bl	80060ec <_sbrk_r>
 8005a38:	4581      	cmp	r9, r0
 8005a3a:	d142      	bne.n	8005ac2 <_malloc_r+0xea>
 8005a3c:	6821      	ldr	r1, [r4, #0]
 8005a3e:	1a6d      	subs	r5, r5, r1
 8005a40:	4629      	mov	r1, r5
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7ff ffa6 	bl	8005994 <sbrk_aligned>
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d03a      	beq.n	8005ac2 <_malloc_r+0xea>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	442b      	add	r3, r5
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	f8d8 3000 	ldr.w	r3, [r8]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	bb62      	cbnz	r2, 8005ab4 <_malloc_r+0xdc>
 8005a5a:	f8c8 7000 	str.w	r7, [r8]
 8005a5e:	e00f      	b.n	8005a80 <_malloc_r+0xa8>
 8005a60:	6822      	ldr	r2, [r4, #0]
 8005a62:	1b52      	subs	r2, r2, r5
 8005a64:	d420      	bmi.n	8005aa8 <_malloc_r+0xd0>
 8005a66:	2a0b      	cmp	r2, #11
 8005a68:	d917      	bls.n	8005a9a <_malloc_r+0xc2>
 8005a6a:	1961      	adds	r1, r4, r5
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	6025      	str	r5, [r4, #0]
 8005a70:	bf18      	it	ne
 8005a72:	6059      	strne	r1, [r3, #4]
 8005a74:	6863      	ldr	r3, [r4, #4]
 8005a76:	bf08      	it	eq
 8005a78:	f8c8 1000 	streq.w	r1, [r8]
 8005a7c:	5162      	str	r2, [r4, r5]
 8005a7e:	604b      	str	r3, [r1, #4]
 8005a80:	4630      	mov	r0, r6
 8005a82:	f000 f82f 	bl	8005ae4 <__malloc_unlock>
 8005a86:	f104 000b 	add.w	r0, r4, #11
 8005a8a:	1d23      	adds	r3, r4, #4
 8005a8c:	f020 0007 	bic.w	r0, r0, #7
 8005a90:	1ac2      	subs	r2, r0, r3
 8005a92:	bf1c      	itt	ne
 8005a94:	1a1b      	subne	r3, r3, r0
 8005a96:	50a3      	strne	r3, [r4, r2]
 8005a98:	e7af      	b.n	80059fa <_malloc_r+0x22>
 8005a9a:	6862      	ldr	r2, [r4, #4]
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	bf0c      	ite	eq
 8005aa0:	f8c8 2000 	streq.w	r2, [r8]
 8005aa4:	605a      	strne	r2, [r3, #4]
 8005aa6:	e7eb      	b.n	8005a80 <_malloc_r+0xa8>
 8005aa8:	4623      	mov	r3, r4
 8005aaa:	6864      	ldr	r4, [r4, #4]
 8005aac:	e7ae      	b.n	8005a0c <_malloc_r+0x34>
 8005aae:	463c      	mov	r4, r7
 8005ab0:	687f      	ldr	r7, [r7, #4]
 8005ab2:	e7b6      	b.n	8005a22 <_malloc_r+0x4a>
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	d1fb      	bne.n	8005ab4 <_malloc_r+0xdc>
 8005abc:	2300      	movs	r3, #0
 8005abe:	6053      	str	r3, [r2, #4]
 8005ac0:	e7de      	b.n	8005a80 <_malloc_r+0xa8>
 8005ac2:	230c      	movs	r3, #12
 8005ac4:	6033      	str	r3, [r6, #0]
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f000 f80c 	bl	8005ae4 <__malloc_unlock>
 8005acc:	e794      	b.n	80059f8 <_malloc_r+0x20>
 8005ace:	6005      	str	r5, [r0, #0]
 8005ad0:	e7d6      	b.n	8005a80 <_malloc_r+0xa8>
 8005ad2:	bf00      	nop
 8005ad4:	200002c8 	.word	0x200002c8

08005ad8 <__malloc_lock>:
 8005ad8:	4801      	ldr	r0, [pc, #4]	@ (8005ae0 <__malloc_lock+0x8>)
 8005ada:	f7ff bf0f 	b.w	80058fc <__retarget_lock_acquire_recursive>
 8005ade:	bf00      	nop
 8005ae0:	200002c0 	.word	0x200002c0

08005ae4 <__malloc_unlock>:
 8005ae4:	4801      	ldr	r0, [pc, #4]	@ (8005aec <__malloc_unlock+0x8>)
 8005ae6:	f7ff bf0a 	b.w	80058fe <__retarget_lock_release_recursive>
 8005aea:	bf00      	nop
 8005aec:	200002c0 	.word	0x200002c0

08005af0 <__ssputs_r>:
 8005af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af4:	688e      	ldr	r6, [r1, #8]
 8005af6:	461f      	mov	r7, r3
 8005af8:	42be      	cmp	r6, r7
 8005afa:	680b      	ldr	r3, [r1, #0]
 8005afc:	4682      	mov	sl, r0
 8005afe:	460c      	mov	r4, r1
 8005b00:	4690      	mov	r8, r2
 8005b02:	d82d      	bhi.n	8005b60 <__ssputs_r+0x70>
 8005b04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b0c:	d026      	beq.n	8005b5c <__ssputs_r+0x6c>
 8005b0e:	6965      	ldr	r5, [r4, #20]
 8005b10:	6909      	ldr	r1, [r1, #16]
 8005b12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b16:	eba3 0901 	sub.w	r9, r3, r1
 8005b1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b1e:	1c7b      	adds	r3, r7, #1
 8005b20:	444b      	add	r3, r9
 8005b22:	106d      	asrs	r5, r5, #1
 8005b24:	429d      	cmp	r5, r3
 8005b26:	bf38      	it	cc
 8005b28:	461d      	movcc	r5, r3
 8005b2a:	0553      	lsls	r3, r2, #21
 8005b2c:	d527      	bpl.n	8005b7e <__ssputs_r+0x8e>
 8005b2e:	4629      	mov	r1, r5
 8005b30:	f7ff ff52 	bl	80059d8 <_malloc_r>
 8005b34:	4606      	mov	r6, r0
 8005b36:	b360      	cbz	r0, 8005b92 <__ssputs_r+0xa2>
 8005b38:	6921      	ldr	r1, [r4, #16]
 8005b3a:	464a      	mov	r2, r9
 8005b3c:	f000 fae6 	bl	800610c <memcpy>
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b4a:	81a3      	strh	r3, [r4, #12]
 8005b4c:	6126      	str	r6, [r4, #16]
 8005b4e:	6165      	str	r5, [r4, #20]
 8005b50:	444e      	add	r6, r9
 8005b52:	eba5 0509 	sub.w	r5, r5, r9
 8005b56:	6026      	str	r6, [r4, #0]
 8005b58:	60a5      	str	r5, [r4, #8]
 8005b5a:	463e      	mov	r6, r7
 8005b5c:	42be      	cmp	r6, r7
 8005b5e:	d900      	bls.n	8005b62 <__ssputs_r+0x72>
 8005b60:	463e      	mov	r6, r7
 8005b62:	6820      	ldr	r0, [r4, #0]
 8005b64:	4632      	mov	r2, r6
 8005b66:	4641      	mov	r1, r8
 8005b68:	f000 faa6 	bl	80060b8 <memmove>
 8005b6c:	68a3      	ldr	r3, [r4, #8]
 8005b6e:	1b9b      	subs	r3, r3, r6
 8005b70:	60a3      	str	r3, [r4, #8]
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	4433      	add	r3, r6
 8005b76:	6023      	str	r3, [r4, #0]
 8005b78:	2000      	movs	r0, #0
 8005b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b7e:	462a      	mov	r2, r5
 8005b80:	f000 fad2 	bl	8006128 <_realloc_r>
 8005b84:	4606      	mov	r6, r0
 8005b86:	2800      	cmp	r0, #0
 8005b88:	d1e0      	bne.n	8005b4c <__ssputs_r+0x5c>
 8005b8a:	6921      	ldr	r1, [r4, #16]
 8005b8c:	4650      	mov	r0, sl
 8005b8e:	f7ff feb7 	bl	8005900 <_free_r>
 8005b92:	230c      	movs	r3, #12
 8005b94:	f8ca 3000 	str.w	r3, [sl]
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b9e:	81a3      	strh	r3, [r4, #12]
 8005ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba4:	e7e9      	b.n	8005b7a <__ssputs_r+0x8a>
	...

08005ba8 <_svfiprintf_r>:
 8005ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bac:	4698      	mov	r8, r3
 8005bae:	898b      	ldrh	r3, [r1, #12]
 8005bb0:	061b      	lsls	r3, r3, #24
 8005bb2:	b09d      	sub	sp, #116	@ 0x74
 8005bb4:	4607      	mov	r7, r0
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	4614      	mov	r4, r2
 8005bba:	d510      	bpl.n	8005bde <_svfiprintf_r+0x36>
 8005bbc:	690b      	ldr	r3, [r1, #16]
 8005bbe:	b973      	cbnz	r3, 8005bde <_svfiprintf_r+0x36>
 8005bc0:	2140      	movs	r1, #64	@ 0x40
 8005bc2:	f7ff ff09 	bl	80059d8 <_malloc_r>
 8005bc6:	6028      	str	r0, [r5, #0]
 8005bc8:	6128      	str	r0, [r5, #16]
 8005bca:	b930      	cbnz	r0, 8005bda <_svfiprintf_r+0x32>
 8005bcc:	230c      	movs	r3, #12
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd4:	b01d      	add	sp, #116	@ 0x74
 8005bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bda:	2340      	movs	r3, #64	@ 0x40
 8005bdc:	616b      	str	r3, [r5, #20]
 8005bde:	2300      	movs	r3, #0
 8005be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005be2:	2320      	movs	r3, #32
 8005be4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bec:	2330      	movs	r3, #48	@ 0x30
 8005bee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d8c <_svfiprintf_r+0x1e4>
 8005bf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bf6:	f04f 0901 	mov.w	r9, #1
 8005bfa:	4623      	mov	r3, r4
 8005bfc:	469a      	mov	sl, r3
 8005bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c02:	b10a      	cbz	r2, 8005c08 <_svfiprintf_r+0x60>
 8005c04:	2a25      	cmp	r2, #37	@ 0x25
 8005c06:	d1f9      	bne.n	8005bfc <_svfiprintf_r+0x54>
 8005c08:	ebba 0b04 	subs.w	fp, sl, r4
 8005c0c:	d00b      	beq.n	8005c26 <_svfiprintf_r+0x7e>
 8005c0e:	465b      	mov	r3, fp
 8005c10:	4622      	mov	r2, r4
 8005c12:	4629      	mov	r1, r5
 8005c14:	4638      	mov	r0, r7
 8005c16:	f7ff ff6b 	bl	8005af0 <__ssputs_r>
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	f000 80a7 	beq.w	8005d6e <_svfiprintf_r+0x1c6>
 8005c20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c22:	445a      	add	r2, fp
 8005c24:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c26:	f89a 3000 	ldrb.w	r3, [sl]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 809f 	beq.w	8005d6e <_svfiprintf_r+0x1c6>
 8005c30:	2300      	movs	r3, #0
 8005c32:	f04f 32ff 	mov.w	r2, #4294967295
 8005c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c3a:	f10a 0a01 	add.w	sl, sl, #1
 8005c3e:	9304      	str	r3, [sp, #16]
 8005c40:	9307      	str	r3, [sp, #28]
 8005c42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c46:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c48:	4654      	mov	r4, sl
 8005c4a:	2205      	movs	r2, #5
 8005c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c50:	484e      	ldr	r0, [pc, #312]	@ (8005d8c <_svfiprintf_r+0x1e4>)
 8005c52:	f7fa fae5 	bl	8000220 <memchr>
 8005c56:	9a04      	ldr	r2, [sp, #16]
 8005c58:	b9d8      	cbnz	r0, 8005c92 <_svfiprintf_r+0xea>
 8005c5a:	06d0      	lsls	r0, r2, #27
 8005c5c:	bf44      	itt	mi
 8005c5e:	2320      	movmi	r3, #32
 8005c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c64:	0711      	lsls	r1, r2, #28
 8005c66:	bf44      	itt	mi
 8005c68:	232b      	movmi	r3, #43	@ 0x2b
 8005c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c74:	d015      	beq.n	8005ca2 <_svfiprintf_r+0xfa>
 8005c76:	9a07      	ldr	r2, [sp, #28]
 8005c78:	4654      	mov	r4, sl
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	f04f 0c0a 	mov.w	ip, #10
 8005c80:	4621      	mov	r1, r4
 8005c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c86:	3b30      	subs	r3, #48	@ 0x30
 8005c88:	2b09      	cmp	r3, #9
 8005c8a:	d94b      	bls.n	8005d24 <_svfiprintf_r+0x17c>
 8005c8c:	b1b0      	cbz	r0, 8005cbc <_svfiprintf_r+0x114>
 8005c8e:	9207      	str	r2, [sp, #28]
 8005c90:	e014      	b.n	8005cbc <_svfiprintf_r+0x114>
 8005c92:	eba0 0308 	sub.w	r3, r0, r8
 8005c96:	fa09 f303 	lsl.w	r3, r9, r3
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	9304      	str	r3, [sp, #16]
 8005c9e:	46a2      	mov	sl, r4
 8005ca0:	e7d2      	b.n	8005c48 <_svfiprintf_r+0xa0>
 8005ca2:	9b03      	ldr	r3, [sp, #12]
 8005ca4:	1d19      	adds	r1, r3, #4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	9103      	str	r1, [sp, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	bfbb      	ittet	lt
 8005cae:	425b      	neglt	r3, r3
 8005cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8005cb4:	9307      	strge	r3, [sp, #28]
 8005cb6:	9307      	strlt	r3, [sp, #28]
 8005cb8:	bfb8      	it	lt
 8005cba:	9204      	strlt	r2, [sp, #16]
 8005cbc:	7823      	ldrb	r3, [r4, #0]
 8005cbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cc0:	d10a      	bne.n	8005cd8 <_svfiprintf_r+0x130>
 8005cc2:	7863      	ldrb	r3, [r4, #1]
 8005cc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cc6:	d132      	bne.n	8005d2e <_svfiprintf_r+0x186>
 8005cc8:	9b03      	ldr	r3, [sp, #12]
 8005cca:	1d1a      	adds	r2, r3, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	9203      	str	r2, [sp, #12]
 8005cd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cd4:	3402      	adds	r4, #2
 8005cd6:	9305      	str	r3, [sp, #20]
 8005cd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d9c <_svfiprintf_r+0x1f4>
 8005cdc:	7821      	ldrb	r1, [r4, #0]
 8005cde:	2203      	movs	r2, #3
 8005ce0:	4650      	mov	r0, sl
 8005ce2:	f7fa fa9d 	bl	8000220 <memchr>
 8005ce6:	b138      	cbz	r0, 8005cf8 <_svfiprintf_r+0x150>
 8005ce8:	9b04      	ldr	r3, [sp, #16]
 8005cea:	eba0 000a 	sub.w	r0, r0, sl
 8005cee:	2240      	movs	r2, #64	@ 0x40
 8005cf0:	4082      	lsls	r2, r0
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	3401      	adds	r4, #1
 8005cf6:	9304      	str	r3, [sp, #16]
 8005cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cfc:	4824      	ldr	r0, [pc, #144]	@ (8005d90 <_svfiprintf_r+0x1e8>)
 8005cfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d02:	2206      	movs	r2, #6
 8005d04:	f7fa fa8c 	bl	8000220 <memchr>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d036      	beq.n	8005d7a <_svfiprintf_r+0x1d2>
 8005d0c:	4b21      	ldr	r3, [pc, #132]	@ (8005d94 <_svfiprintf_r+0x1ec>)
 8005d0e:	bb1b      	cbnz	r3, 8005d58 <_svfiprintf_r+0x1b0>
 8005d10:	9b03      	ldr	r3, [sp, #12]
 8005d12:	3307      	adds	r3, #7
 8005d14:	f023 0307 	bic.w	r3, r3, #7
 8005d18:	3308      	adds	r3, #8
 8005d1a:	9303      	str	r3, [sp, #12]
 8005d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d1e:	4433      	add	r3, r6
 8005d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d22:	e76a      	b.n	8005bfa <_svfiprintf_r+0x52>
 8005d24:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d28:	460c      	mov	r4, r1
 8005d2a:	2001      	movs	r0, #1
 8005d2c:	e7a8      	b.n	8005c80 <_svfiprintf_r+0xd8>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	3401      	adds	r4, #1
 8005d32:	9305      	str	r3, [sp, #20]
 8005d34:	4619      	mov	r1, r3
 8005d36:	f04f 0c0a 	mov.w	ip, #10
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d40:	3a30      	subs	r2, #48	@ 0x30
 8005d42:	2a09      	cmp	r2, #9
 8005d44:	d903      	bls.n	8005d4e <_svfiprintf_r+0x1a6>
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0c6      	beq.n	8005cd8 <_svfiprintf_r+0x130>
 8005d4a:	9105      	str	r1, [sp, #20]
 8005d4c:	e7c4      	b.n	8005cd8 <_svfiprintf_r+0x130>
 8005d4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d52:	4604      	mov	r4, r0
 8005d54:	2301      	movs	r3, #1
 8005d56:	e7f0      	b.n	8005d3a <_svfiprintf_r+0x192>
 8005d58:	ab03      	add	r3, sp, #12
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	462a      	mov	r2, r5
 8005d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d98 <_svfiprintf_r+0x1f0>)
 8005d60:	a904      	add	r1, sp, #16
 8005d62:	4638      	mov	r0, r7
 8005d64:	f3af 8000 	nop.w
 8005d68:	1c42      	adds	r2, r0, #1
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	d1d6      	bne.n	8005d1c <_svfiprintf_r+0x174>
 8005d6e:	89ab      	ldrh	r3, [r5, #12]
 8005d70:	065b      	lsls	r3, r3, #25
 8005d72:	f53f af2d 	bmi.w	8005bd0 <_svfiprintf_r+0x28>
 8005d76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d78:	e72c      	b.n	8005bd4 <_svfiprintf_r+0x2c>
 8005d7a:	ab03      	add	r3, sp, #12
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	462a      	mov	r2, r5
 8005d80:	4b05      	ldr	r3, [pc, #20]	@ (8005d98 <_svfiprintf_r+0x1f0>)
 8005d82:	a904      	add	r1, sp, #16
 8005d84:	4638      	mov	r0, r7
 8005d86:	f000 f879 	bl	8005e7c <_printf_i>
 8005d8a:	e7ed      	b.n	8005d68 <_svfiprintf_r+0x1c0>
 8005d8c:	08006218 	.word	0x08006218
 8005d90:	08006222 	.word	0x08006222
 8005d94:	00000000 	.word	0x00000000
 8005d98:	08005af1 	.word	0x08005af1
 8005d9c:	0800621e 	.word	0x0800621e

08005da0 <_printf_common>:
 8005da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da4:	4616      	mov	r6, r2
 8005da6:	4698      	mov	r8, r3
 8005da8:	688a      	ldr	r2, [r1, #8]
 8005daa:	690b      	ldr	r3, [r1, #16]
 8005dac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005db0:	4293      	cmp	r3, r2
 8005db2:	bfb8      	it	lt
 8005db4:	4613      	movlt	r3, r2
 8005db6:	6033      	str	r3, [r6, #0]
 8005db8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005dbc:	4607      	mov	r7, r0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	b10a      	cbz	r2, 8005dc6 <_printf_common+0x26>
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	6033      	str	r3, [r6, #0]
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	0699      	lsls	r1, r3, #26
 8005dca:	bf42      	ittt	mi
 8005dcc:	6833      	ldrmi	r3, [r6, #0]
 8005dce:	3302      	addmi	r3, #2
 8005dd0:	6033      	strmi	r3, [r6, #0]
 8005dd2:	6825      	ldr	r5, [r4, #0]
 8005dd4:	f015 0506 	ands.w	r5, r5, #6
 8005dd8:	d106      	bne.n	8005de8 <_printf_common+0x48>
 8005dda:	f104 0a19 	add.w	sl, r4, #25
 8005dde:	68e3      	ldr	r3, [r4, #12]
 8005de0:	6832      	ldr	r2, [r6, #0]
 8005de2:	1a9b      	subs	r3, r3, r2
 8005de4:	42ab      	cmp	r3, r5
 8005de6:	dc26      	bgt.n	8005e36 <_printf_common+0x96>
 8005de8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005dec:	6822      	ldr	r2, [r4, #0]
 8005dee:	3b00      	subs	r3, #0
 8005df0:	bf18      	it	ne
 8005df2:	2301      	movne	r3, #1
 8005df4:	0692      	lsls	r2, r2, #26
 8005df6:	d42b      	bmi.n	8005e50 <_printf_common+0xb0>
 8005df8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005dfc:	4641      	mov	r1, r8
 8005dfe:	4638      	mov	r0, r7
 8005e00:	47c8      	blx	r9
 8005e02:	3001      	adds	r0, #1
 8005e04:	d01e      	beq.n	8005e44 <_printf_common+0xa4>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	6922      	ldr	r2, [r4, #16]
 8005e0a:	f003 0306 	and.w	r3, r3, #6
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	bf02      	ittt	eq
 8005e12:	68e5      	ldreq	r5, [r4, #12]
 8005e14:	6833      	ldreq	r3, [r6, #0]
 8005e16:	1aed      	subeq	r5, r5, r3
 8005e18:	68a3      	ldr	r3, [r4, #8]
 8005e1a:	bf0c      	ite	eq
 8005e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e20:	2500      	movne	r5, #0
 8005e22:	4293      	cmp	r3, r2
 8005e24:	bfc4      	itt	gt
 8005e26:	1a9b      	subgt	r3, r3, r2
 8005e28:	18ed      	addgt	r5, r5, r3
 8005e2a:	2600      	movs	r6, #0
 8005e2c:	341a      	adds	r4, #26
 8005e2e:	42b5      	cmp	r5, r6
 8005e30:	d11a      	bne.n	8005e68 <_printf_common+0xc8>
 8005e32:	2000      	movs	r0, #0
 8005e34:	e008      	b.n	8005e48 <_printf_common+0xa8>
 8005e36:	2301      	movs	r3, #1
 8005e38:	4652      	mov	r2, sl
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	47c8      	blx	r9
 8005e40:	3001      	adds	r0, #1
 8005e42:	d103      	bne.n	8005e4c <_printf_common+0xac>
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e4c:	3501      	adds	r5, #1
 8005e4e:	e7c6      	b.n	8005dde <_printf_common+0x3e>
 8005e50:	18e1      	adds	r1, r4, r3
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	2030      	movs	r0, #48	@ 0x30
 8005e56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e5a:	4422      	add	r2, r4
 8005e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e64:	3302      	adds	r3, #2
 8005e66:	e7c7      	b.n	8005df8 <_printf_common+0x58>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	4638      	mov	r0, r7
 8005e70:	47c8      	blx	r9
 8005e72:	3001      	adds	r0, #1
 8005e74:	d0e6      	beq.n	8005e44 <_printf_common+0xa4>
 8005e76:	3601      	adds	r6, #1
 8005e78:	e7d9      	b.n	8005e2e <_printf_common+0x8e>
	...

08005e7c <_printf_i>:
 8005e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	7e0f      	ldrb	r7, [r1, #24]
 8005e82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e84:	2f78      	cmp	r7, #120	@ 0x78
 8005e86:	4691      	mov	r9, r2
 8005e88:	4680      	mov	r8, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	469a      	mov	sl, r3
 8005e8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e92:	d807      	bhi.n	8005ea4 <_printf_i+0x28>
 8005e94:	2f62      	cmp	r7, #98	@ 0x62
 8005e96:	d80a      	bhi.n	8005eae <_printf_i+0x32>
 8005e98:	2f00      	cmp	r7, #0
 8005e9a:	f000 80d1 	beq.w	8006040 <_printf_i+0x1c4>
 8005e9e:	2f58      	cmp	r7, #88	@ 0x58
 8005ea0:	f000 80b8 	beq.w	8006014 <_printf_i+0x198>
 8005ea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ea8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005eac:	e03a      	b.n	8005f24 <_printf_i+0xa8>
 8005eae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005eb2:	2b15      	cmp	r3, #21
 8005eb4:	d8f6      	bhi.n	8005ea4 <_printf_i+0x28>
 8005eb6:	a101      	add	r1, pc, #4	@ (adr r1, 8005ebc <_printf_i+0x40>)
 8005eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ebc:	08005f15 	.word	0x08005f15
 8005ec0:	08005f29 	.word	0x08005f29
 8005ec4:	08005ea5 	.word	0x08005ea5
 8005ec8:	08005ea5 	.word	0x08005ea5
 8005ecc:	08005ea5 	.word	0x08005ea5
 8005ed0:	08005ea5 	.word	0x08005ea5
 8005ed4:	08005f29 	.word	0x08005f29
 8005ed8:	08005ea5 	.word	0x08005ea5
 8005edc:	08005ea5 	.word	0x08005ea5
 8005ee0:	08005ea5 	.word	0x08005ea5
 8005ee4:	08005ea5 	.word	0x08005ea5
 8005ee8:	08006027 	.word	0x08006027
 8005eec:	08005f53 	.word	0x08005f53
 8005ef0:	08005fe1 	.word	0x08005fe1
 8005ef4:	08005ea5 	.word	0x08005ea5
 8005ef8:	08005ea5 	.word	0x08005ea5
 8005efc:	08006049 	.word	0x08006049
 8005f00:	08005ea5 	.word	0x08005ea5
 8005f04:	08005f53 	.word	0x08005f53
 8005f08:	08005ea5 	.word	0x08005ea5
 8005f0c:	08005ea5 	.word	0x08005ea5
 8005f10:	08005fe9 	.word	0x08005fe9
 8005f14:	6833      	ldr	r3, [r6, #0]
 8005f16:	1d1a      	adds	r2, r3, #4
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6032      	str	r2, [r6, #0]
 8005f1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f24:	2301      	movs	r3, #1
 8005f26:	e09c      	b.n	8006062 <_printf_i+0x1e6>
 8005f28:	6833      	ldr	r3, [r6, #0]
 8005f2a:	6820      	ldr	r0, [r4, #0]
 8005f2c:	1d19      	adds	r1, r3, #4
 8005f2e:	6031      	str	r1, [r6, #0]
 8005f30:	0606      	lsls	r6, r0, #24
 8005f32:	d501      	bpl.n	8005f38 <_printf_i+0xbc>
 8005f34:	681d      	ldr	r5, [r3, #0]
 8005f36:	e003      	b.n	8005f40 <_printf_i+0xc4>
 8005f38:	0645      	lsls	r5, r0, #25
 8005f3a:	d5fb      	bpl.n	8005f34 <_printf_i+0xb8>
 8005f3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f40:	2d00      	cmp	r5, #0
 8005f42:	da03      	bge.n	8005f4c <_printf_i+0xd0>
 8005f44:	232d      	movs	r3, #45	@ 0x2d
 8005f46:	426d      	negs	r5, r5
 8005f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f4c:	4858      	ldr	r0, [pc, #352]	@ (80060b0 <_printf_i+0x234>)
 8005f4e:	230a      	movs	r3, #10
 8005f50:	e011      	b.n	8005f76 <_printf_i+0xfa>
 8005f52:	6821      	ldr	r1, [r4, #0]
 8005f54:	6833      	ldr	r3, [r6, #0]
 8005f56:	0608      	lsls	r0, r1, #24
 8005f58:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f5c:	d402      	bmi.n	8005f64 <_printf_i+0xe8>
 8005f5e:	0649      	lsls	r1, r1, #25
 8005f60:	bf48      	it	mi
 8005f62:	b2ad      	uxthmi	r5, r5
 8005f64:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f66:	4852      	ldr	r0, [pc, #328]	@ (80060b0 <_printf_i+0x234>)
 8005f68:	6033      	str	r3, [r6, #0]
 8005f6a:	bf14      	ite	ne
 8005f6c:	230a      	movne	r3, #10
 8005f6e:	2308      	moveq	r3, #8
 8005f70:	2100      	movs	r1, #0
 8005f72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f76:	6866      	ldr	r6, [r4, #4]
 8005f78:	60a6      	str	r6, [r4, #8]
 8005f7a:	2e00      	cmp	r6, #0
 8005f7c:	db05      	blt.n	8005f8a <_printf_i+0x10e>
 8005f7e:	6821      	ldr	r1, [r4, #0]
 8005f80:	432e      	orrs	r6, r5
 8005f82:	f021 0104 	bic.w	r1, r1, #4
 8005f86:	6021      	str	r1, [r4, #0]
 8005f88:	d04b      	beq.n	8006022 <_printf_i+0x1a6>
 8005f8a:	4616      	mov	r6, r2
 8005f8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f90:	fb03 5711 	mls	r7, r3, r1, r5
 8005f94:	5dc7      	ldrb	r7, [r0, r7]
 8005f96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f9a:	462f      	mov	r7, r5
 8005f9c:	42bb      	cmp	r3, r7
 8005f9e:	460d      	mov	r5, r1
 8005fa0:	d9f4      	bls.n	8005f8c <_printf_i+0x110>
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d10b      	bne.n	8005fbe <_printf_i+0x142>
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	07df      	lsls	r7, r3, #31
 8005faa:	d508      	bpl.n	8005fbe <_printf_i+0x142>
 8005fac:	6923      	ldr	r3, [r4, #16]
 8005fae:	6861      	ldr	r1, [r4, #4]
 8005fb0:	4299      	cmp	r1, r3
 8005fb2:	bfde      	ittt	le
 8005fb4:	2330      	movle	r3, #48	@ 0x30
 8005fb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fbe:	1b92      	subs	r2, r2, r6
 8005fc0:	6122      	str	r2, [r4, #16]
 8005fc2:	f8cd a000 	str.w	sl, [sp]
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	aa03      	add	r2, sp, #12
 8005fca:	4621      	mov	r1, r4
 8005fcc:	4640      	mov	r0, r8
 8005fce:	f7ff fee7 	bl	8005da0 <_printf_common>
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d14a      	bne.n	800606c <_printf_i+0x1f0>
 8005fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fda:	b004      	add	sp, #16
 8005fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	f043 0320 	orr.w	r3, r3, #32
 8005fe6:	6023      	str	r3, [r4, #0]
 8005fe8:	4832      	ldr	r0, [pc, #200]	@ (80060b4 <_printf_i+0x238>)
 8005fea:	2778      	movs	r7, #120	@ 0x78
 8005fec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	6831      	ldr	r1, [r6, #0]
 8005ff4:	061f      	lsls	r7, r3, #24
 8005ff6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ffa:	d402      	bmi.n	8006002 <_printf_i+0x186>
 8005ffc:	065f      	lsls	r7, r3, #25
 8005ffe:	bf48      	it	mi
 8006000:	b2ad      	uxthmi	r5, r5
 8006002:	6031      	str	r1, [r6, #0]
 8006004:	07d9      	lsls	r1, r3, #31
 8006006:	bf44      	itt	mi
 8006008:	f043 0320 	orrmi.w	r3, r3, #32
 800600c:	6023      	strmi	r3, [r4, #0]
 800600e:	b11d      	cbz	r5, 8006018 <_printf_i+0x19c>
 8006010:	2310      	movs	r3, #16
 8006012:	e7ad      	b.n	8005f70 <_printf_i+0xf4>
 8006014:	4826      	ldr	r0, [pc, #152]	@ (80060b0 <_printf_i+0x234>)
 8006016:	e7e9      	b.n	8005fec <_printf_i+0x170>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	f023 0320 	bic.w	r3, r3, #32
 800601e:	6023      	str	r3, [r4, #0]
 8006020:	e7f6      	b.n	8006010 <_printf_i+0x194>
 8006022:	4616      	mov	r6, r2
 8006024:	e7bd      	b.n	8005fa2 <_printf_i+0x126>
 8006026:	6833      	ldr	r3, [r6, #0]
 8006028:	6825      	ldr	r5, [r4, #0]
 800602a:	6961      	ldr	r1, [r4, #20]
 800602c:	1d18      	adds	r0, r3, #4
 800602e:	6030      	str	r0, [r6, #0]
 8006030:	062e      	lsls	r6, r5, #24
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	d501      	bpl.n	800603a <_printf_i+0x1be>
 8006036:	6019      	str	r1, [r3, #0]
 8006038:	e002      	b.n	8006040 <_printf_i+0x1c4>
 800603a:	0668      	lsls	r0, r5, #25
 800603c:	d5fb      	bpl.n	8006036 <_printf_i+0x1ba>
 800603e:	8019      	strh	r1, [r3, #0]
 8006040:	2300      	movs	r3, #0
 8006042:	6123      	str	r3, [r4, #16]
 8006044:	4616      	mov	r6, r2
 8006046:	e7bc      	b.n	8005fc2 <_printf_i+0x146>
 8006048:	6833      	ldr	r3, [r6, #0]
 800604a:	1d1a      	adds	r2, r3, #4
 800604c:	6032      	str	r2, [r6, #0]
 800604e:	681e      	ldr	r6, [r3, #0]
 8006050:	6862      	ldr	r2, [r4, #4]
 8006052:	2100      	movs	r1, #0
 8006054:	4630      	mov	r0, r6
 8006056:	f7fa f8e3 	bl	8000220 <memchr>
 800605a:	b108      	cbz	r0, 8006060 <_printf_i+0x1e4>
 800605c:	1b80      	subs	r0, r0, r6
 800605e:	6060      	str	r0, [r4, #4]
 8006060:	6863      	ldr	r3, [r4, #4]
 8006062:	6123      	str	r3, [r4, #16]
 8006064:	2300      	movs	r3, #0
 8006066:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800606a:	e7aa      	b.n	8005fc2 <_printf_i+0x146>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	4632      	mov	r2, r6
 8006070:	4649      	mov	r1, r9
 8006072:	4640      	mov	r0, r8
 8006074:	47d0      	blx	sl
 8006076:	3001      	adds	r0, #1
 8006078:	d0ad      	beq.n	8005fd6 <_printf_i+0x15a>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	079b      	lsls	r3, r3, #30
 800607e:	d413      	bmi.n	80060a8 <_printf_i+0x22c>
 8006080:	68e0      	ldr	r0, [r4, #12]
 8006082:	9b03      	ldr	r3, [sp, #12]
 8006084:	4298      	cmp	r0, r3
 8006086:	bfb8      	it	lt
 8006088:	4618      	movlt	r0, r3
 800608a:	e7a6      	b.n	8005fda <_printf_i+0x15e>
 800608c:	2301      	movs	r3, #1
 800608e:	4632      	mov	r2, r6
 8006090:	4649      	mov	r1, r9
 8006092:	4640      	mov	r0, r8
 8006094:	47d0      	blx	sl
 8006096:	3001      	adds	r0, #1
 8006098:	d09d      	beq.n	8005fd6 <_printf_i+0x15a>
 800609a:	3501      	adds	r5, #1
 800609c:	68e3      	ldr	r3, [r4, #12]
 800609e:	9903      	ldr	r1, [sp, #12]
 80060a0:	1a5b      	subs	r3, r3, r1
 80060a2:	42ab      	cmp	r3, r5
 80060a4:	dcf2      	bgt.n	800608c <_printf_i+0x210>
 80060a6:	e7eb      	b.n	8006080 <_printf_i+0x204>
 80060a8:	2500      	movs	r5, #0
 80060aa:	f104 0619 	add.w	r6, r4, #25
 80060ae:	e7f5      	b.n	800609c <_printf_i+0x220>
 80060b0:	08006229 	.word	0x08006229
 80060b4:	0800623a 	.word	0x0800623a

080060b8 <memmove>:
 80060b8:	4288      	cmp	r0, r1
 80060ba:	b510      	push	{r4, lr}
 80060bc:	eb01 0402 	add.w	r4, r1, r2
 80060c0:	d902      	bls.n	80060c8 <memmove+0x10>
 80060c2:	4284      	cmp	r4, r0
 80060c4:	4623      	mov	r3, r4
 80060c6:	d807      	bhi.n	80060d8 <memmove+0x20>
 80060c8:	1e43      	subs	r3, r0, #1
 80060ca:	42a1      	cmp	r1, r4
 80060cc:	d008      	beq.n	80060e0 <memmove+0x28>
 80060ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060d6:	e7f8      	b.n	80060ca <memmove+0x12>
 80060d8:	4402      	add	r2, r0
 80060da:	4601      	mov	r1, r0
 80060dc:	428a      	cmp	r2, r1
 80060de:	d100      	bne.n	80060e2 <memmove+0x2a>
 80060e0:	bd10      	pop	{r4, pc}
 80060e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060ea:	e7f7      	b.n	80060dc <memmove+0x24>

080060ec <_sbrk_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4d06      	ldr	r5, [pc, #24]	@ (8006108 <_sbrk_r+0x1c>)
 80060f0:	2300      	movs	r3, #0
 80060f2:	4604      	mov	r4, r0
 80060f4:	4608      	mov	r0, r1
 80060f6:	602b      	str	r3, [r5, #0]
 80060f8:	f7fa fda2 	bl	8000c40 <_sbrk>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d102      	bne.n	8006106 <_sbrk_r+0x1a>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	b103      	cbz	r3, 8006106 <_sbrk_r+0x1a>
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	200002bc 	.word	0x200002bc

0800610c <memcpy>:
 800610c:	440a      	add	r2, r1
 800610e:	4291      	cmp	r1, r2
 8006110:	f100 33ff 	add.w	r3, r0, #4294967295
 8006114:	d100      	bne.n	8006118 <memcpy+0xc>
 8006116:	4770      	bx	lr
 8006118:	b510      	push	{r4, lr}
 800611a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800611e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006122:	4291      	cmp	r1, r2
 8006124:	d1f9      	bne.n	800611a <memcpy+0xe>
 8006126:	bd10      	pop	{r4, pc}

08006128 <_realloc_r>:
 8006128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612c:	4607      	mov	r7, r0
 800612e:	4614      	mov	r4, r2
 8006130:	460d      	mov	r5, r1
 8006132:	b921      	cbnz	r1, 800613e <_realloc_r+0x16>
 8006134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006138:	4611      	mov	r1, r2
 800613a:	f7ff bc4d 	b.w	80059d8 <_malloc_r>
 800613e:	b92a      	cbnz	r2, 800614c <_realloc_r+0x24>
 8006140:	f7ff fbde 	bl	8005900 <_free_r>
 8006144:	4625      	mov	r5, r4
 8006146:	4628      	mov	r0, r5
 8006148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800614c:	f000 f81a 	bl	8006184 <_malloc_usable_size_r>
 8006150:	4284      	cmp	r4, r0
 8006152:	4606      	mov	r6, r0
 8006154:	d802      	bhi.n	800615c <_realloc_r+0x34>
 8006156:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800615a:	d8f4      	bhi.n	8006146 <_realloc_r+0x1e>
 800615c:	4621      	mov	r1, r4
 800615e:	4638      	mov	r0, r7
 8006160:	f7ff fc3a 	bl	80059d8 <_malloc_r>
 8006164:	4680      	mov	r8, r0
 8006166:	b908      	cbnz	r0, 800616c <_realloc_r+0x44>
 8006168:	4645      	mov	r5, r8
 800616a:	e7ec      	b.n	8006146 <_realloc_r+0x1e>
 800616c:	42b4      	cmp	r4, r6
 800616e:	4622      	mov	r2, r4
 8006170:	4629      	mov	r1, r5
 8006172:	bf28      	it	cs
 8006174:	4632      	movcs	r2, r6
 8006176:	f7ff ffc9 	bl	800610c <memcpy>
 800617a:	4629      	mov	r1, r5
 800617c:	4638      	mov	r0, r7
 800617e:	f7ff fbbf 	bl	8005900 <_free_r>
 8006182:	e7f1      	b.n	8006168 <_realloc_r+0x40>

08006184 <_malloc_usable_size_r>:
 8006184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006188:	1f18      	subs	r0, r3, #4
 800618a:	2b00      	cmp	r3, #0
 800618c:	bfbc      	itt	lt
 800618e:	580b      	ldrlt	r3, [r1, r0]
 8006190:	18c0      	addlt	r0, r0, r3
 8006192:	4770      	bx	lr

08006194 <_init>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	bf00      	nop
 8006198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619a:	bc08      	pop	{r3}
 800619c:	469e      	mov	lr, r3
 800619e:	4770      	bx	lr

080061a0 <_fini>:
 80061a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a2:	bf00      	nop
 80061a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a6:	bc08      	pop	{r3}
 80061a8:	469e      	mov	lr, r3
 80061aa:	4770      	bx	lr
