
UltraSonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004158  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004328  08004328  00005328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043d4  080043d4  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080043d4  080043d4  000053d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043dc  080043dc  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043dc  080043dc  000053dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043e0  080043e0  000053e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080043e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000064  08004448  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004448  00006270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d002  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c30  00000000  00000000  00013096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00014cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a4  00000000  00000000  00015900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d98  00000000  00000000  000162a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5e6  00000000  00000000  0003803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0f51  00000000  00000000  00046622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117573  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a8  00000000  00000000  001175b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0011ae60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004310 	.word	0x08004310

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08004310 	.word	0x08004310

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <triggerUltrasonic>:

// Pins: TRIG = PA5, ECHO = PA0
GPIO_TypeDef* TRIG_PORTS[NUM_OF_ULTRASONIC] = {GPIOA};
uint16_t TRIG_PINS[NUM_OF_ULTRASONIC] = {GPIO_PIN_5};

void triggerUltrasonic(ULTRASONIC_Num_t num) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TRIG_PORTS[num], TRIG_PINS[num], GPIO_PIN_SET);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <triggerUltrasonic+0x48>)
 80005fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	4a0d      	ldr	r2, [pc, #52]	@ (8000638 <triggerUltrasonic+0x4c>)
 8000602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000606:	2201      	movs	r2, #1
 8000608:	4619      	mov	r1, r3
 800060a:	f000 ff75 	bl	80014f8 <HAL_GPIO_WritePin>
    HAL_Delay(1); // 10 µs pulse
 800060e:	2001      	movs	r0, #1
 8000610:	f000 fca8 	bl	8000f64 <HAL_Delay>
    HAL_GPIO_WritePin(TRIG_PORTS[num], TRIG_PINS[num], GPIO_PIN_RESET);
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4a07      	ldr	r2, [pc, #28]	@ (8000634 <triggerUltrasonic+0x48>)
 8000618:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	4a06      	ldr	r2, [pc, #24]	@ (8000638 <triggerUltrasonic+0x4c>)
 8000620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000624:	2200      	movs	r2, #0
 8000626:	4619      	mov	r1, r3
 8000628:	f000 ff66 	bl	80014f8 <HAL_GPIO_WritePin>

    //HAL_UART_Transmit(&huart2, (uint8_t *)"TRIG\r\n", 6, HAL_MAX_DELAY);
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000000 	.word	0x20000000
 8000638:	20000004 	.word	0x20000004

0800063c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7f1b      	ldrb	r3, [r3, #28]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d144      	bne.n	80006d6 <HAL_TIM_IC_CaptureCallback+0x9a>
        //HAL_UART_Transmit(&huart2, (uint8_t *)"CAPTURE!\r\n", 10, HAL_MAX_DELAY);

        uint8_t current = ultrasonicNum;
 800064c:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	73fb      	strb	r3, [r7, #15]
        uint32_t value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000652:	2100      	movs	r1, #0
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f002 fa23 	bl	8002aa0 <HAL_TIM_ReadCapturedValue>
 800065a:	60b8      	str	r0, [r7, #8]

        if (!isFirstCapture[current]) {
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	4a21      	ldr	r2, [pc, #132]	@ (80006e4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000660:	5cd3      	ldrb	r3, [r2, r3]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d119      	bne.n	800069a <HAL_TIM_IC_CaptureCallback+0x5e>
            t1[current] = value;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	491f      	ldr	r1, [pc, #124]	@ (80006e8 <HAL_TIM_IC_CaptureCallback+0xac>)
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6a1a      	ldr	r2, [r3, #32]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f022 020a 	bic.w	r2, r2, #10
 800067e:	621a      	str	r2, [r3, #32]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6a1a      	ldr	r2, [r3, #32]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f042 0202 	orr.w	r2, r2, #2
 800068e:	621a      	str	r2, [r3, #32]
            isFirstCapture[current] = 1;
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	4a14      	ldr	r2, [pc, #80]	@ (80006e4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000694:	2101      	movs	r1, #1
 8000696:	54d1      	strb	r1, [r2, r3]
            HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
            ultrasonicState = READY_TO_CALCULATE;
            isFirstCapture[current] = 0;
        }
    }
}
 8000698:	e01d      	b.n	80006d6 <HAL_TIM_IC_CaptureCallback+0x9a>
            t2[current] = value;
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	4913      	ldr	r1, [pc, #76]	@ (80006ec <HAL_TIM_IC_CaptureCallback+0xb0>)
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6a1a      	ldr	r2, [r3, #32]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f022 020a 	bic.w	r2, r2, #10
 80006b2:	621a      	str	r2, [r3, #32]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	6a12      	ldr	r2, [r2, #32]
 80006be:	621a      	str	r2, [r3, #32]
            HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80006c0:	2100      	movs	r1, #0
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f001 feea 	bl	800249c <HAL_TIM_IC_Stop_IT>
            ultrasonicState = READY_TO_CALCULATE;
 80006c8:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	701a      	strb	r2, [r3, #0]
            isFirstCapture[current] = 0;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	4a04      	ldr	r2, [pc, #16]	@ (80006e4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	54d1      	strb	r1, [r2, r3]
}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000011e 	.word	0x2000011e
 80006e4:	2000011c 	.word	0x2000011c
 80006e8:	20000110 	.word	0x20000110
 80006ec:	20000114 	.word	0x20000114
 80006f0:	2000011d 	.word	0x2000011d

080006f4 <UART_Send_Distance>:

void UART_Send_Distance(uint8_t sensorIndex, uint16_t distance) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b090      	sub	sp, #64	@ 0x40
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	460a      	mov	r2, r1
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	4613      	mov	r3, r2
 8000702:	80bb      	strh	r3, [r7, #4]
    char msg[50];
    int len = sprintf(msg, "Sensor %d: %d cm\r\n", sensorIndex + 1, distance);
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	88bb      	ldrh	r3, [r7, #4]
 800070a:	f107 0008 	add.w	r0, r7, #8
 800070e:	4908      	ldr	r1, [pc, #32]	@ (8000730 <UART_Send_Distance+0x3c>)
 8000710:	f003 f95e 	bl	80039d0 <siprintf>
 8000714:	63f8      	str	r0, [r7, #60]	@ 0x3c
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8000716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000718:	b29a      	uxth	r2, r3
 800071a:	f107 0108 	add.w	r1, r7, #8
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	4804      	ldr	r0, [pc, #16]	@ (8000734 <UART_Send_Distance+0x40>)
 8000724:	f002 fd98 	bl	8003258 <HAL_UART_Transmit>
}
 8000728:	bf00      	nop
 800072a:	3740      	adds	r7, #64	@ 0x40
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	08004328 	.word	0x08004328
 8000734:	200000c8 	.word	0x200000c8

08000738 <ULTRASONIC_Runnable>:

void ULTRASONIC_Runnable(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b08e      	sub	sp, #56	@ 0x38
 800073c:	af00      	add	r7, sp, #0
    switch (ultrasonicState) {
 800073e:	4b44      	ldr	r3, [pc, #272]	@ (8000850 <ULTRASONIC_Runnable+0x118>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d016      	beq.n	8000774 <ULTRASONIC_Runnable+0x3c>
 8000746:	2b02      	cmp	r3, #2
 8000748:	dc7e      	bgt.n	8000848 <ULTRASONIC_Runnable+0x110>
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <ULTRASONIC_Runnable+0x1a>
 800074e:	2b01      	cmp	r3, #1
            ultrasonicState = WAITING_FOR_THE_PULSE;
            break;

        case WAITING_FOR_THE_PULSE:
            // Waiting for echo
            break;
 8000750:	e07a      	b.n	8000848 <ULTRASONIC_Runnable+0x110>
            triggerUltrasonic(ultrasonicNum);
 8000752:	4b40      	ldr	r3, [pc, #256]	@ (8000854 <ULTRASONIC_Runnable+0x11c>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff48 	bl	80005ec <triggerUltrasonic>
            __HAL_TIM_SET_COUNTER(&htim2, 0);
 800075c:	4b3e      	ldr	r3, [pc, #248]	@ (8000858 <ULTRASONIC_Runnable+0x120>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	@ 0x24
            HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000764:	2100      	movs	r1, #0
 8000766:	483c      	ldr	r0, [pc, #240]	@ (8000858 <ULTRASONIC_Runnable+0x120>)
 8000768:	f001 fd70 	bl	800224c <HAL_TIM_IC_Start_IT>
            ultrasonicState = WAITING_FOR_THE_PULSE;
 800076c:	4b38      	ldr	r3, [pc, #224]	@ (8000850 <ULTRASONIC_Runnable+0x118>)
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
            break;
 8000772:	e069      	b.n	8000848 <ULTRASONIC_Runnable+0x110>

        case READY_TO_CALCULATE: {
            uint32_t delta = (t2[ultrasonicNum] >= t1[ultrasonicNum]) ?
 8000774:	4b37      	ldr	r3, [pc, #220]	@ (8000854 <ULTRASONIC_Runnable+0x11c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b38      	ldr	r3, [pc, #224]	@ (800085c <ULTRASONIC_Runnable+0x124>)
 800077c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000780:	4b34      	ldr	r3, [pc, #208]	@ (8000854 <ULTRASONIC_Runnable+0x11c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	4b36      	ldr	r3, [pc, #216]	@ (8000860 <ULTRASONIC_Runnable+0x128>)
 8000788:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                (t2[ultrasonicNum] - t1[ultrasonicNum]) :
 800078c:	429a      	cmp	r2, r3
 800078e:	d30d      	bcc.n	80007ac <ULTRASONIC_Runnable+0x74>
 8000790:	4b30      	ldr	r3, [pc, #192]	@ (8000854 <ULTRASONIC_Runnable+0x11c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	4b31      	ldr	r3, [pc, #196]	@ (800085c <ULTRASONIC_Runnable+0x124>)
 8000798:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800079c:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <ULTRASONIC_Runnable+0x11c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000860 <ULTRASONIC_Runnable+0x128>)
 80007a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	e00f      	b.n	80007cc <ULTRASONIC_Runnable+0x94>
                (0xFFFF - t1[ultrasonicNum] + t2[ultrasonicNum]);
 80007ac:	4b29      	ldr	r3, [pc, #164]	@ (8000854 <ULTRASONIC_Runnable+0x11c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <ULTRASONIC_Runnable+0x124>)
 80007b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007b8:	4b26      	ldr	r3, [pc, #152]	@ (8000854 <ULTRASONIC_Runnable+0x11c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	4b28      	ldr	r3, [pc, #160]	@ (8000860 <ULTRASONIC_Runnable+0x128>)
 80007c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007c4:	1ad3      	subs	r3, r2, r3
                (t2[ultrasonicNum] - t1[ultrasonicNum]) :
 80007c6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80007ca:	33ff      	adds	r3, #255	@ 0xff
            uint32_t delta = (t2[ultrasonicNum] >= t1[ultrasonicNum]) ?
 80007cc:	637b      	str	r3, [r7, #52]	@ 0x34

            ultrasonicReadings[ultrasonicNum] = (delta < 23200) ? (delta / 58) : 0;
 80007ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007d0:	f645 229f 	movw	r2, #23199	@ 0x5a9f
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d806      	bhi.n	80007e6 <ULTRASONIC_Runnable+0xae>
 80007d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007da:	4a22      	ldr	r2, [pc, #136]	@ (8000864 <ULTRASONIC_Runnable+0x12c>)
 80007dc:	fba2 2303 	umull	r2, r3, r2, r3
 80007e0:	095b      	lsrs	r3, r3, #5
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	e000      	b.n	80007e8 <ULTRASONIC_Runnable+0xb0>
 80007e6:	2300      	movs	r3, #0
 80007e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000854 <ULTRASONIC_Runnable+0x11c>)
 80007ea:	7812      	ldrb	r2, [r2, #0]
 80007ec:	4611      	mov	r1, r2
 80007ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000868 <ULTRASONIC_Runnable+0x130>)
 80007f0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

            char debug_msg[50];
            sprintf(debug_msg, "Delta = %lu, Distance = %d\r\n", delta, ultrasonicReadings[ultrasonicNum]);
 80007f4:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <ULTRASONIC_Runnable+0x11c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <ULTRASONIC_Runnable+0x130>)
 80007fc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000800:	4638      	mov	r0, r7
 8000802:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000804:	4919      	ldr	r1, [pc, #100]	@ (800086c <ULTRASONIC_Runnable+0x134>)
 8000806:	f003 f8e3 	bl	80039d0 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t *)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 800080a:	463b      	mov	r3, r7
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fcff 	bl	8000210 <strlen>
 8000812:	4603      	mov	r3, r0
 8000814:	b29a      	uxth	r2, r3
 8000816:	4639      	mov	r1, r7
 8000818:	f04f 33ff 	mov.w	r3, #4294967295
 800081c:	4814      	ldr	r0, [pc, #80]	@ (8000870 <ULTRASONIC_Runnable+0x138>)
 800081e:	f002 fd1b 	bl	8003258 <HAL_UART_Transmit>

            UART_Send_Distance(ultrasonicNum, ultrasonicReadings[ultrasonicNum]);
 8000822:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <ULTRASONIC_Runnable+0x11c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	4a0b      	ldr	r2, [pc, #44]	@ (8000854 <ULTRASONIC_Runnable+0x11c>)
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	4611      	mov	r1, r2
 800082c:	4a0e      	ldr	r2, [pc, #56]	@ (8000868 <ULTRASONIC_Runnable+0x130>)
 800082e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff5d 	bl	80006f4 <UART_Send_Distance>
            ultrasonicNum = ULTRASONIC_0;
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <ULTRASONIC_Runnable+0x11c>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
            ultrasonicState = READY_TO_TRIGGER;
 8000840:	4b03      	ldr	r3, [pc, #12]	@ (8000850 <ULTRASONIC_Runnable+0x118>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
            break;
 8000846:	bf00      	nop
        }
    }
}
 8000848:	bf00      	nop
 800084a:	3738      	adds	r7, #56	@ 0x38
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000011d 	.word	0x2000011d
 8000854:	2000011e 	.word	0x2000011e
 8000858:	20000080 	.word	0x20000080
 800085c:	20000114 	.word	0x20000114
 8000860:	20000110 	.word	0x20000110
 8000864:	8d3dcb09 	.word	0x8d3dcb09
 8000868:	20000118 	.word	0x20000118
 800086c:	0800433c 	.word	0x0800433c
 8000870:	200000c8 	.word	0x200000c8

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f000 fb02 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f81a 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f000 f920 	bl	8000ac4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000884:	f000 f8f4 	bl	8000a70 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000888:	f000 f882 	bl	8000990 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *)"UART Started. Waiting for ultrasonic...\r\n", 41, HAL_MAX_DELAY);
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
 8000890:	2229      	movs	r2, #41	@ 0x29
 8000892:	4906      	ldr	r1, [pc, #24]	@ (80008ac <main+0x38>)
 8000894:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <main+0x3c>)
 8000896:	f002 fcdf 	bl	8003258 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ULTRASONIC_Runnable();
 800089a:	f7ff ff4d 	bl	8000738 <ULTRASONIC_Runnable>
	  HAL_Delay(2000);
 800089e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008a2:	f000 fb5f 	bl	8000f64 <HAL_Delay>
	  ULTRASONIC_Runnable();
 80008a6:	bf00      	nop
 80008a8:	e7f7      	b.n	800089a <main+0x26>
 80008aa:	bf00      	nop
 80008ac:	0800435c 	.word	0x0800435c
 80008b0:	200000c8 	.word	0x200000c8

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	@ 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2234      	movs	r2, #52	@ 0x34
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 f8a6 	bl	8003a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000988 <SystemClock_Config+0xd4>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	4a29      	ldr	r2, [pc, #164]	@ (8000988 <SystemClock_Config+0xd4>)
 80008e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e8:	4b27      	ldr	r3, [pc, #156]	@ (8000988 <SystemClock_Config+0xd4>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008f4:	2300      	movs	r3, #0
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	4b24      	ldr	r3, [pc, #144]	@ (800098c <SystemClock_Config+0xd8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000900:	4a22      	ldr	r2, [pc, #136]	@ (800098c <SystemClock_Config+0xd8>)
 8000902:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b20      	ldr	r3, [pc, #128]	@ (800098c <SystemClock_Config+0xd8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000914:	2302      	movs	r3, #2
 8000916:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000918:	2301      	movs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091c:	2310      	movs	r3, #16
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000920:	2302      	movs	r3, #2
 8000922:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000924:	2300      	movs	r3, #0
 8000926:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000928:	2310      	movs	r3, #16
 800092a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800092c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000930:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000932:	2304      	movs	r3, #4
 8000934:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800093a:	2302      	movs	r3, #2
 800093c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4618      	mov	r0, r3
 8000944:	f001 f93c 	bl	8001bc0 <HAL_RCC_OscConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800094e:	f000 f927 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	230f      	movs	r3, #15
 8000954:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2302      	movs	r3, #2
 8000958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	2102      	movs	r1, #2
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fddc 	bl	800152c <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800097a:	f000 f911 	bl	8000ba0 <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3750      	adds	r7, #80	@ 0x50
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0318 	add.w	r3, r7, #24
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009ae:	463b      	mov	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ba:	4b2c      	ldr	r3, [pc, #176]	@ (8000a6c <MX_TIM2_Init+0xdc>)
 80009bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80009c2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a6c <MX_TIM2_Init+0xdc>)
 80009c4:	2253      	movs	r2, #83	@ 0x53
 80009c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b28      	ldr	r3, [pc, #160]	@ (8000a6c <MX_TIM2_Init+0xdc>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009ce:	4b27      	ldr	r3, [pc, #156]	@ (8000a6c <MX_TIM2_Init+0xdc>)
 80009d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b25      	ldr	r3, [pc, #148]	@ (8000a6c <MX_TIM2_Init+0xdc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <MX_TIM2_Init+0xdc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009e2:	4822      	ldr	r0, [pc, #136]	@ (8000a6c <MX_TIM2_Init+0xdc>)
 80009e4:	f001 fb8a 	bl	80020fc <HAL_TIM_Base_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80009ee:	f000 f8d7 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009f8:	f107 0318 	add.w	r3, r7, #24
 80009fc:	4619      	mov	r1, r3
 80009fe:	481b      	ldr	r0, [pc, #108]	@ (8000a6c <MX_TIM2_Init+0xdc>)
 8000a00:	f001 ff86 	bl	8002910 <HAL_TIM_ConfigClockSource>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a0a:	f000 f8c9 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a0e:	4817      	ldr	r0, [pc, #92]	@ (8000a6c <MX_TIM2_Init+0xdc>)
 8000a10:	f001 fbc3 	bl	800219a <HAL_TIM_IC_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a1a:	f000 f8c1 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480f      	ldr	r0, [pc, #60]	@ (8000a6c <MX_TIM2_Init+0xdc>)
 8000a2e:	f002 fb33 	bl	8003098 <HAL_TIMEx_MasterConfigSynchronization>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000a38:	f000 f8b2 	bl	8000ba0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000a3c:	230a      	movs	r3, #10
 8000a3e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a40:	2301      	movs	r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4619      	mov	r1, r3
 8000a52:	4806      	ldr	r0, [pc, #24]	@ (8000a6c <MX_TIM2_Init+0xdc>)
 8000a54:	f001 fec0 	bl	80027d8 <HAL_TIM_IC_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000a5e:	f000 f89f 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	@ 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000080 	.word	0x20000080

08000a70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	@ (8000ac0 <MX_USART2_UART_Init+0x50>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000aa8:	f002 fb86 	bl	80031b8 <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ab2:	f000 f875 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000c8 	.word	0x200000c8
 8000ac0:	40004400 	.word	0x40004400

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	@ 0x28
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b2d      	ldr	r3, [pc, #180]	@ (8000b94 <MX_GPIO_Init+0xd0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8000b94 <MX_GPIO_Init+0xd0>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b2a      	ldr	r3, [pc, #168]	@ (8000b94 <MX_GPIO_Init+0xd0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <MX_GPIO_Init+0xd0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a25      	ldr	r2, [pc, #148]	@ (8000b94 <MX_GPIO_Init+0xd0>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b23      	ldr	r3, [pc, #140]	@ (8000b94 <MX_GPIO_Init+0xd0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <MX_GPIO_Init+0xd0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b94 <MX_GPIO_Init+0xd0>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <MX_GPIO_Init+0xd0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <MX_GPIO_Init+0xd0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a17      	ldr	r2, [pc, #92]	@ (8000b94 <MX_GPIO_Init+0xd0>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <MX_GPIO_Init+0xd0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	4812      	ldr	r0, [pc, #72]	@ (8000b98 <MX_GPIO_Init+0xd4>)
 8000b50:	f000 fcd2 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b5a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <MX_GPIO_Init+0xd8>)
 8000b6c:	f000 fb30 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b70:	2320      	movs	r3, #32
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <MX_GPIO_Init+0xd4>)
 8000b88:	f000 fb22 	bl	80011d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	@ 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020800 	.word	0x40020800

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <Error_Handler+0x8>

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bba:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	4a08      	ldr	r2, [pc, #32]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bea:	2007      	movs	r0, #7
 8000bec:	f000 faae 	bl	800114c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c1c:	d133      	bne.n	8000c86 <HAL_TIM_Base_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <HAL_TIM_Base_MspInit+0x94>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	4a1a      	ldr	r2, [pc, #104]	@ (8000c90 <HAL_TIM_Base_MspInit+0x94>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2e:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <HAL_TIM_Base_MspInit+0x94>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <HAL_TIM_Base_MspInit+0x94>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a13      	ldr	r2, [pc, #76]	@ (8000c90 <HAL_TIM_Base_MspInit+0x94>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <HAL_TIM_Base_MspInit+0x94>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c56:	2301      	movs	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c66:	2301      	movs	r3, #1
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4808      	ldr	r0, [pc, #32]	@ (8000c94 <HAL_TIM_Base_MspInit+0x98>)
 8000c72:	f000 faad 	bl	80011d0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	201c      	movs	r0, #28
 8000c7c:	f000 fa71 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c80:	201c      	movs	r0, #28
 8000c82:	f000 fa8a 	bl	800119a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	@ 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000

08000c98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	@ 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	@ (8000d1c <HAL_UART_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12b      	bne.n	8000d12 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a17      	ldr	r2, [pc, #92]	@ (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <HAL_UART_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	@ (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d02:	2307      	movs	r3, #7
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <HAL_UART_MspInit+0x8c>)
 8000d0e:	f000 fa5f 	bl	80011d0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	@ 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004400 	.word	0x40004400
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <NMI_Handler+0x4>

08000d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <MemManage_Handler+0x4>

08000d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7e:	f000 f8d1 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <TIM2_IRQHandler+0x10>)
 8000d8e:	f001 fc33 	bl	80025f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000080 	.word	0x20000080

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f002 fe2a 	bl	8003a24 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20020000 	.word	0x20020000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	20000120 	.word	0x20000120
 8000e04:	20000270 	.word	0x20000270

08000e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e30:	f7ff ffea 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	@ (8000e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f002 fde9 	bl	8003a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fd09 	bl	8000874 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e70:	080043e4 	.word	0x080043e4
  ldr r2, =_sbss
 8000e74:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e78:	20000270 	.word	0x20000270

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	@ (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 f94f 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fe7a 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f967 	bl	80011b6 <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 f92f 	bl	8001162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000010 	.word	0x20000010
 8000f20:	2000000c 	.word	0x2000000c

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000010 	.word	0x20000010
 8000f48:	20000124 	.word	0x20000124

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	@ (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000124 	.word	0x20000124

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000010 	.word	0x20000010

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	@ (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	@ (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	@ (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	@ (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	@ 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	@ 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff29 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff3e 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff8e 	bl	80010a0 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5d 	bl	800104c <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff31 	bl	8001010 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa2 	bl	8001108 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	e165      	b.n	80014b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 8154 	bne.w	80014b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b01      	cmp	r3, #1
 8001214:	d005      	beq.n	8001222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	2b02      	cmp	r3, #2
 8001220:	d130      	bne.n	8001284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f003 0201 	and.w	r2, r3, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b03      	cmp	r3, #3
 800128e:	d017      	beq.n	80012c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d123      	bne.n	8001314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	08da      	lsrs	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	69b9      	ldr	r1, [r7, #24]
 8001310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0203 	and.w	r2, r3, #3
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80ae 	beq.w	80014b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b5d      	ldr	r3, [pc, #372]	@ (80014d0 <HAL_GPIO_Init+0x300>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135e:	4a5c      	ldr	r2, [pc, #368]	@ (80014d0 <HAL_GPIO_Init+0x300>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001364:	6453      	str	r3, [r2, #68]	@ 0x44
 8001366:	4b5a      	ldr	r3, [pc, #360]	@ (80014d0 <HAL_GPIO_Init+0x300>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001372:	4a58      	ldr	r2, [pc, #352]	@ (80014d4 <HAL_GPIO_Init+0x304>)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4f      	ldr	r2, [pc, #316]	@ (80014d8 <HAL_GPIO_Init+0x308>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d025      	beq.n	80013ea <HAL_GPIO_Init+0x21a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4e      	ldr	r2, [pc, #312]	@ (80014dc <HAL_GPIO_Init+0x30c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01f      	beq.n	80013e6 <HAL_GPIO_Init+0x216>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4d      	ldr	r2, [pc, #308]	@ (80014e0 <HAL_GPIO_Init+0x310>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_Init+0x212>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4c      	ldr	r2, [pc, #304]	@ (80014e4 <HAL_GPIO_Init+0x314>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x20e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4b      	ldr	r2, [pc, #300]	@ (80014e8 <HAL_GPIO_Init+0x318>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x20a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4a      	ldr	r2, [pc, #296]	@ (80014ec <HAL_GPIO_Init+0x31c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x206>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a49      	ldr	r2, [pc, #292]	@ (80014f0 <HAL_GPIO_Init+0x320>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x202>
 80013ce:	2306      	movs	r3, #6
 80013d0:	e00c      	b.n	80013ec <HAL_GPIO_Init+0x21c>
 80013d2:	2307      	movs	r3, #7
 80013d4:	e00a      	b.n	80013ec <HAL_GPIO_Init+0x21c>
 80013d6:	2305      	movs	r3, #5
 80013d8:	e008      	b.n	80013ec <HAL_GPIO_Init+0x21c>
 80013da:	2304      	movs	r3, #4
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x21c>
 80013de:	2303      	movs	r3, #3
 80013e0:	e004      	b.n	80013ec <HAL_GPIO_Init+0x21c>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e002      	b.n	80013ec <HAL_GPIO_Init+0x21c>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_GPIO_Init+0x21c>
 80013ea:	2300      	movs	r3, #0
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	f002 0203 	and.w	r2, r2, #3
 80013f2:	0092      	lsls	r2, r2, #2
 80013f4:	4093      	lsls	r3, r2
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013fc:	4935      	ldr	r1, [pc, #212]	@ (80014d4 <HAL_GPIO_Init+0x304>)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140a:	4b3a      	ldr	r3, [pc, #232]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142e:	4a31      	ldr	r2, [pc, #196]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001434:	4b2f      	ldr	r3, [pc, #188]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001458:	4a26      	ldr	r2, [pc, #152]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800145e:	4b25      	ldr	r3, [pc, #148]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001482:	4a1c      	ldr	r2, [pc, #112]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001488:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ac:	4a11      	ldr	r2, [pc, #68]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3301      	adds	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	f67f ae96 	bls.w	80011ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3724      	adds	r7, #36	@ 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020400 	.word	0x40020400
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40021400 	.word	0x40021400
 80014f0:	40021800 	.word	0x40021800
 80014f4:	40013c00 	.word	0x40013c00

080014f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001514:	e003      	b.n	800151e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	041a      	lsls	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	619a      	str	r2, [r3, #24]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0cc      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001540:	4b68      	ldr	r3, [pc, #416]	@ (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d90c      	bls.n	8001568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154e:	4b65      	ldr	r3, [pc, #404]	@ (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001556:	4b63      	ldr	r3, [pc, #396]	@ (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0b8      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001580:	4b59      	ldr	r3, [pc, #356]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4a58      	ldr	r2, [pc, #352]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800158a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001598:	4b53      	ldr	r3, [pc, #332]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a52      	ldr	r2, [pc, #328]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a4:	4b50      	ldr	r3, [pc, #320]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	494d      	ldr	r1, [pc, #308]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d044      	beq.n	800164c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b47      	ldr	r3, [pc, #284]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d119      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e07f      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d003      	beq.n	80015ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	4b3f      	ldr	r3, [pc, #252]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e06f      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fa:	4b3b      	ldr	r3, [pc, #236]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e067      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160a:	4b37      	ldr	r3, [pc, #220]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f023 0203 	bic.w	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4934      	ldr	r1, [pc, #208]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	4313      	orrs	r3, r2
 800161a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800161c:	f7ff fc96 	bl	8000f4c <HAL_GetTick>
 8001620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	e00a      	b.n	800163a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001624:	f7ff fc92 	bl	8000f4c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e04f      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	4b2b      	ldr	r3, [pc, #172]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 020c 	and.w	r2, r3, #12
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	429a      	cmp	r2, r3
 800164a:	d1eb      	bne.n	8001624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800164c:	4b25      	ldr	r3, [pc, #148]	@ (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d20c      	bcs.n	8001674 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e032      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001680:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4916      	ldr	r1, [pc, #88]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	490e      	ldr	r1, [pc, #56]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016b2:	f000 f855 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 80016b6:	4602      	mov	r2, r0
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	490a      	ldr	r1, [pc, #40]	@ (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	5ccb      	ldrb	r3, [r1, r3]
 80016c6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ca:	4a09      	ldr	r2, [pc, #36]	@ (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <HAL_RCC_ClockConfig+0x1c8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fbf6 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023c00 	.word	0x40023c00
 80016e8:	40023800 	.word	0x40023800
 80016ec:	08004388 	.word	0x08004388
 80016f0:	20000008 	.word	0x20000008
 80016f4:	2000000c 	.word	0x2000000c

080016f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <HAL_RCC_GetHCLKFreq+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000008 	.word	0x20000008

08001710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001714:	f7ff fff0 	bl	80016f8 <HAL_RCC_GetHCLKFreq>
 8001718:	4602      	mov	r2, r0
 800171a:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	0a9b      	lsrs	r3, r3, #10
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	4903      	ldr	r1, [pc, #12]	@ (8001734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001726:	5ccb      	ldrb	r3, [r1, r3]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800172c:	4618      	mov	r0, r3
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	08004398 	.word	0x08004398

08001738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800173c:	f7ff ffdc 	bl	80016f8 <HAL_RCC_GetHCLKFreq>
 8001740:	4602      	mov	r2, r0
 8001742:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	0b5b      	lsrs	r3, r3, #13
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	4903      	ldr	r1, [pc, #12]	@ (800175c <HAL_RCC_GetPCLK2Freq+0x24>)
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001754:	4618      	mov	r0, r3
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	08004398 	.word	0x08004398

08001760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001764:	b0ae      	sub	sp, #184	@ 0xb8
 8001766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001786:	4bcb      	ldr	r3, [pc, #812]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b0c      	cmp	r3, #12
 8001790:	f200 8206 	bhi.w	8001ba0 <HAL_RCC_GetSysClockFreq+0x440>
 8001794:	a201      	add	r2, pc, #4	@ (adr r2, 800179c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179a:	bf00      	nop
 800179c:	080017d1 	.word	0x080017d1
 80017a0:	08001ba1 	.word	0x08001ba1
 80017a4:	08001ba1 	.word	0x08001ba1
 80017a8:	08001ba1 	.word	0x08001ba1
 80017ac:	080017d9 	.word	0x080017d9
 80017b0:	08001ba1 	.word	0x08001ba1
 80017b4:	08001ba1 	.word	0x08001ba1
 80017b8:	08001ba1 	.word	0x08001ba1
 80017bc:	080017e1 	.word	0x080017e1
 80017c0:	08001ba1 	.word	0x08001ba1
 80017c4:	08001ba1 	.word	0x08001ba1
 80017c8:	08001ba1 	.word	0x08001ba1
 80017cc:	080019d1 	.word	0x080019d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d0:	4bb9      	ldr	r3, [pc, #740]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x358>)
 80017d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017d6:	e1e7      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017d8:	4bb8      	ldr	r3, [pc, #736]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x35c>)
 80017da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017de:	e1e3      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e0:	4bb4      	ldr	r3, [pc, #720]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ec:	4bb1      	ldr	r3, [pc, #708]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d071      	beq.n	80018dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f8:	4bae      	ldr	r3, [pc, #696]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	099b      	lsrs	r3, r3, #6
 80017fe:	2200      	movs	r2, #0
 8001800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001804:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001808:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800180c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001810:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800181a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800181e:	4622      	mov	r2, r4
 8001820:	462b      	mov	r3, r5
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	f04f 0100 	mov.w	r1, #0
 800182a:	0159      	lsls	r1, r3, #5
 800182c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001830:	0150      	lsls	r0, r2, #5
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4621      	mov	r1, r4
 8001838:	1a51      	subs	r1, r2, r1
 800183a:	6439      	str	r1, [r7, #64]	@ 0x40
 800183c:	4629      	mov	r1, r5
 800183e:	eb63 0301 	sbc.w	r3, r3, r1
 8001842:	647b      	str	r3, [r7, #68]	@ 0x44
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001850:	4649      	mov	r1, r9
 8001852:	018b      	lsls	r3, r1, #6
 8001854:	4641      	mov	r1, r8
 8001856:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800185a:	4641      	mov	r1, r8
 800185c:	018a      	lsls	r2, r1, #6
 800185e:	4641      	mov	r1, r8
 8001860:	1a51      	subs	r1, r2, r1
 8001862:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001864:	4649      	mov	r1, r9
 8001866:	eb63 0301 	sbc.w	r3, r3, r1
 800186a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001878:	4649      	mov	r1, r9
 800187a:	00cb      	lsls	r3, r1, #3
 800187c:	4641      	mov	r1, r8
 800187e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001882:	4641      	mov	r1, r8
 8001884:	00ca      	lsls	r2, r1, #3
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	4603      	mov	r3, r0
 800188c:	4622      	mov	r2, r4
 800188e:	189b      	adds	r3, r3, r2
 8001890:	633b      	str	r3, [r7, #48]	@ 0x30
 8001892:	462b      	mov	r3, r5
 8001894:	460a      	mov	r2, r1
 8001896:	eb42 0303 	adc.w	r3, r2, r3
 800189a:	637b      	str	r3, [r7, #52]	@ 0x34
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018a8:	4629      	mov	r1, r5
 80018aa:	024b      	lsls	r3, r1, #9
 80018ac:	4621      	mov	r1, r4
 80018ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018b2:	4621      	mov	r1, r4
 80018b4:	024a      	lsls	r2, r1, #9
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018be:	2200      	movs	r2, #0
 80018c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80018cc:	f7fe fcf8 	bl	80002c0 <__aeabi_uldivmod>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4613      	mov	r3, r2
 80018d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018da:	e067      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018dc:	4b75      	ldr	r3, [pc, #468]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	099b      	lsrs	r3, r3, #6
 80018e2:	2200      	movs	r2, #0
 80018e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018e8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80018ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80018f6:	2300      	movs	r3, #0
 80018f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80018fe:	4622      	mov	r2, r4
 8001900:	462b      	mov	r3, r5
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	0159      	lsls	r1, r3, #5
 800190c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001910:	0150      	lsls	r0, r2, #5
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4621      	mov	r1, r4
 8001918:	1a51      	subs	r1, r2, r1
 800191a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800191c:	4629      	mov	r1, r5
 800191e:	eb63 0301 	sbc.w	r3, r3, r1
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001930:	4649      	mov	r1, r9
 8001932:	018b      	lsls	r3, r1, #6
 8001934:	4641      	mov	r1, r8
 8001936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800193a:	4641      	mov	r1, r8
 800193c:	018a      	lsls	r2, r1, #6
 800193e:	4641      	mov	r1, r8
 8001940:	ebb2 0a01 	subs.w	sl, r2, r1
 8001944:	4649      	mov	r1, r9
 8001946:	eb63 0b01 	sbc.w	fp, r3, r1
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001956:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800195a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800195e:	4692      	mov	sl, r2
 8001960:	469b      	mov	fp, r3
 8001962:	4623      	mov	r3, r4
 8001964:	eb1a 0303 	adds.w	r3, sl, r3
 8001968:	623b      	str	r3, [r7, #32]
 800196a:	462b      	mov	r3, r5
 800196c:	eb4b 0303 	adc.w	r3, fp, r3
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800197e:	4629      	mov	r1, r5
 8001980:	028b      	lsls	r3, r1, #10
 8001982:	4621      	mov	r1, r4
 8001984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001988:	4621      	mov	r1, r4
 800198a:	028a      	lsls	r2, r1, #10
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001994:	2200      	movs	r2, #0
 8001996:	673b      	str	r3, [r7, #112]	@ 0x70
 8001998:	677a      	str	r2, [r7, #116]	@ 0x74
 800199a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800199e:	f7fe fc8f 	bl	80002c0 <__aeabi_uldivmod>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4613      	mov	r3, r2
 80019a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019ac:	4b41      	ldr	r3, [pc, #260]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	0c1b      	lsrs	r3, r3, #16
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	3301      	adds	r3, #1
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80019be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019ce:	e0eb      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d0:	4b38      	ldr	r3, [pc, #224]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019dc:	4b35      	ldr	r3, [pc, #212]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d06b      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e8:	4b32      	ldr	r3, [pc, #200]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	099b      	lsrs	r3, r3, #6
 80019ee:	2200      	movs	r2, #0
 80019f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80019fc:	2300      	movs	r3, #0
 80019fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a00:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a04:	4622      	mov	r2, r4
 8001a06:	462b      	mov	r3, r5
 8001a08:	f04f 0000 	mov.w	r0, #0
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	0159      	lsls	r1, r3, #5
 8001a12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a16:	0150      	lsls	r0, r2, #5
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	1a51      	subs	r1, r2, r1
 8001a20:	61b9      	str	r1, [r7, #24]
 8001a22:	4629      	mov	r1, r5
 8001a24:	eb63 0301 	sbc.w	r3, r3, r1
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a36:	4659      	mov	r1, fp
 8001a38:	018b      	lsls	r3, r1, #6
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a40:	4651      	mov	r1, sl
 8001a42:	018a      	lsls	r2, r1, #6
 8001a44:	4651      	mov	r1, sl
 8001a46:	ebb2 0801 	subs.w	r8, r2, r1
 8001a4a:	4659      	mov	r1, fp
 8001a4c:	eb63 0901 	sbc.w	r9, r3, r1
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a64:	4690      	mov	r8, r2
 8001a66:	4699      	mov	r9, r3
 8001a68:	4623      	mov	r3, r4
 8001a6a:	eb18 0303 	adds.w	r3, r8, r3
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	462b      	mov	r3, r5
 8001a72:	eb49 0303 	adc.w	r3, r9, r3
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a84:	4629      	mov	r1, r5
 8001a86:	024b      	lsls	r3, r1, #9
 8001a88:	4621      	mov	r1, r4
 8001a8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a8e:	4621      	mov	r1, r4
 8001a90:	024a      	lsls	r2, r1, #9
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a9e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001aa0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001aa4:	f7fe fc0c 	bl	80002c0 <__aeabi_uldivmod>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4613      	mov	r3, r2
 8001aae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ab2:	e065      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x420>
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac0:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	4611      	mov	r1, r2
 8001acc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ad0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ad6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ada:	4642      	mov	r2, r8
 8001adc:	464b      	mov	r3, r9
 8001ade:	f04f 0000 	mov.w	r0, #0
 8001ae2:	f04f 0100 	mov.w	r1, #0
 8001ae6:	0159      	lsls	r1, r3, #5
 8001ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aec:	0150      	lsls	r0, r2, #5
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4641      	mov	r1, r8
 8001af4:	1a51      	subs	r1, r2, r1
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	4649      	mov	r1, r9
 8001afa:	eb63 0301 	sbc.w	r3, r3, r1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b0c:	4659      	mov	r1, fp
 8001b0e:	018b      	lsls	r3, r1, #6
 8001b10:	4651      	mov	r1, sl
 8001b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b16:	4651      	mov	r1, sl
 8001b18:	018a      	lsls	r2, r1, #6
 8001b1a:	4651      	mov	r1, sl
 8001b1c:	1a54      	subs	r4, r2, r1
 8001b1e:	4659      	mov	r1, fp
 8001b20:	eb63 0501 	sbc.w	r5, r3, r1
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	00eb      	lsls	r3, r5, #3
 8001b2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b32:	00e2      	lsls	r2, r4, #3
 8001b34:	4614      	mov	r4, r2
 8001b36:	461d      	mov	r5, r3
 8001b38:	4643      	mov	r3, r8
 8001b3a:	18e3      	adds	r3, r4, r3
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	464b      	mov	r3, r9
 8001b40:	eb45 0303 	adc.w	r3, r5, r3
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b52:	4629      	mov	r1, r5
 8001b54:	028b      	lsls	r3, r1, #10
 8001b56:	4621      	mov	r1, r4
 8001b58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	028a      	lsls	r2, r1, #10
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b68:	2200      	movs	r2, #0
 8001b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b6c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b72:	f7fe fba5 	bl	80002c0 <__aeabi_uldivmod>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b80:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	0f1b      	lsrs	r3, r3, #28
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001b8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b9e:	e003      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x45c>)
 8001ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ba6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	37b8      	adds	r7, #184	@ 0xb8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	00f42400 	.word	0x00f42400

08001bc0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e28d      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8083 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001be0:	4b94      	ldr	r3, [pc, #592]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d019      	beq.n	8001c20 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bec:	4b91      	ldr	r3, [pc, #580]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
        || \
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bf8:	4b8e      	ldr	r3, [pc, #568]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c04:	d00c      	beq.n	8001c20 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c06:	4b8b      	ldr	r3, [pc, #556]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c0e:	2b0c      	cmp	r3, #12
 8001c10:	d112      	bne.n	8001c38 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c12:	4b88      	ldr	r3, [pc, #544]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c1e:	d10b      	bne.n	8001c38 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	4b84      	ldr	r3, [pc, #528]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d05b      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x124>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d157      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e25a      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c40:	d106      	bne.n	8001c50 <HAL_RCC_OscConfig+0x90>
 8001c42:	4b7c      	ldr	r3, [pc, #496]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a7b      	ldr	r2, [pc, #492]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e01d      	b.n	8001c8c <HAL_RCC_OscConfig+0xcc>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0xb4>
 8001c5a:	4b76      	ldr	r3, [pc, #472]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a75      	ldr	r2, [pc, #468]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b73      	ldr	r3, [pc, #460]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a72      	ldr	r2, [pc, #456]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0xcc>
 8001c74:	4b6f      	ldr	r3, [pc, #444]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a6e      	ldr	r2, [pc, #440]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b6c      	ldr	r3, [pc, #432]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a6b      	ldr	r2, [pc, #428]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff f95a 	bl	8000f4c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff f956 	bl	8000f4c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	@ 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e21f      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4b61      	ldr	r3, [pc, #388]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0xdc>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f946 	bl	8000f4c <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f942 	bl	8000f4c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	@ 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e20b      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	4b57      	ldr	r3, [pc, #348]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x104>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d06f      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cf2:	4b50      	ldr	r3, [pc, #320]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d017      	beq.n	8001d2e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cfe:	4b4d      	ldr	r3, [pc, #308]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d105      	bne.n	8001d16 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d16:	4b47      	ldr	r3, [pc, #284]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d11c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d22:	4b44      	ldr	r3, [pc, #272]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d116      	bne.n	8001d5c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	4b41      	ldr	r3, [pc, #260]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x186>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e1d3      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b3b      	ldr	r3, [pc, #236]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4937      	ldr	r1, [pc, #220]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5a:	e03a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d64:	4b34      	ldr	r3, [pc, #208]	@ (8001e38 <HAL_RCC_OscConfig+0x278>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff f8ef 	bl	8000f4c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff f8eb 	bl	8000f4c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e1b4      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	4b2b      	ldr	r3, [pc, #172]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b28      	ldr	r3, [pc, #160]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4925      	ldr	r1, [pc, #148]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e015      	b.n	8001dd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b24      	ldr	r3, [pc, #144]	@ (8001e38 <HAL_RCC_OscConfig+0x278>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff f8ce 	bl	8000f4c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db4:	f7ff f8ca 	bl	8000f4c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e193      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d036      	beq.n	8001e4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d016      	beq.n	8001e14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff f8ae 	bl	8000f4c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff f8aa 	bl	8000f4c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e173      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x234>
 8001e12:	e01b      	b.n	8001e4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e14:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1a:	f7ff f897 	bl	8000f4c <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e20:	e00e      	b.n	8001e40 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e22:	f7ff f893 	bl	8000f4c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d907      	bls.n	8001e40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e15c      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
 8001e34:	40023800 	.word	0x40023800
 8001e38:	42470000 	.word	0x42470000
 8001e3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	4b8a      	ldr	r3, [pc, #552]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ea      	bne.n	8001e22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8097 	beq.w	8001f88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5e:	4b83      	ldr	r3, [pc, #524]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	4b7f      	ldr	r3, [pc, #508]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	4a7e      	ldr	r2, [pc, #504]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7a:	4b7c      	ldr	r3, [pc, #496]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b79      	ldr	r3, [pc, #484]	@ (8002070 <HAL_RCC_OscConfig+0x4b0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d118      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b76      	ldr	r3, [pc, #472]	@ (8002070 <HAL_RCC_OscConfig+0x4b0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a75      	ldr	r2, [pc, #468]	@ (8002070 <HAL_RCC_OscConfig+0x4b0>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff f853 	bl	8000f4c <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7ff f84f 	bl	8000f4c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e118      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	4b6c      	ldr	r3, [pc, #432]	@ (8002070 <HAL_RCC_OscConfig+0x4b0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x31e>
 8001ed0:	4b66      	ldr	r3, [pc, #408]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed4:	4a65      	ldr	r2, [pc, #404]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001edc:	e01c      	b.n	8001f18 <HAL_RCC_OscConfig+0x358>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x340>
 8001ee6:	4b61      	ldr	r3, [pc, #388]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eea:	4a60      	ldr	r2, [pc, #384]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef2:	4b5e      	ldr	r3, [pc, #376]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef6:	4a5d      	ldr	r2, [pc, #372]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0x358>
 8001f00:	4b5a      	ldr	r3, [pc, #360]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f04:	4a59      	ldr	r2, [pc, #356]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f0c:	4b57      	ldr	r3, [pc, #348]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f10:	4a56      	ldr	r2, [pc, #344]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f12:	f023 0304 	bic.w	r3, r3, #4
 8001f16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d015      	beq.n	8001f4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7ff f814 	bl	8000f4c <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7ff f810 	bl	8000f4c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e0d7      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3e:	4b4b      	ldr	r3, [pc, #300]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0ee      	beq.n	8001f28 <HAL_RCC_OscConfig+0x368>
 8001f4a:	e014      	b.n	8001f76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f7fe fffe 	bl	8000f4c <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7fe fffa 	bl	8000f4c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e0c1      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6a:	4b40      	ldr	r3, [pc, #256]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ee      	bne.n	8001f54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	4a3a      	ldr	r2, [pc, #232]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80ad 	beq.w	80020ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f92:	4b36      	ldr	r3, [pc, #216]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d060      	beq.n	8002060 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d145      	bne.n	8002032 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa6:	4b33      	ldr	r3, [pc, #204]	@ (8002074 <HAL_RCC_OscConfig+0x4b4>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7fe ffce 	bl	8000f4c <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7fe ffca 	bl	8000f4c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e093      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	4b29      	ldr	r3, [pc, #164]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	019b      	lsls	r3, r3, #6
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	3b01      	subs	r3, #1
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	071b      	lsls	r3, r3, #28
 8001ffe:	491b      	ldr	r1, [pc, #108]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002004:	4b1b      	ldr	r3, [pc, #108]	@ (8002074 <HAL_RCC_OscConfig+0x4b4>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7fe ff9f 	bl	8000f4c <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7fe ff9b 	bl	8000f4c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e064      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x452>
 8002030:	e05c      	b.n	80020ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <HAL_RCC_OscConfig+0x4b4>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7fe ff88 	bl	8000f4c <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002040:	f7fe ff84 	bl	8000f4c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e04d      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x480>
 800205e:	e045      	b.n	80020ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d107      	bne.n	8002078 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e040      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
 800206c:	40023800 	.word	0x40023800
 8002070:	40007000 	.word	0x40007000
 8002074:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002078:	4b1f      	ldr	r3, [pc, #124]	@ (80020f8 <HAL_RCC_OscConfig+0x538>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d030      	beq.n	80020e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d129      	bne.n	80020e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d122      	bne.n	80020e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d119      	bne.n	80020e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	3b01      	subs	r3, #1
 80020c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d10f      	bne.n	80020e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800

080020fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e041      	b.n	8002192 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe fd6a 	bl	8000bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3304      	adds	r3, #4
 8002138:	4619      	mov	r1, r3
 800213a:	4610      	mov	r0, r2
 800213c:	f000 fd1c 	bl	8002b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e041      	b.n	8002230 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f839 	bl	8002238 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3304      	adds	r3, #4
 80021d6:	4619      	mov	r1, r3
 80021d8:	4610      	mov	r0, r2
 80021da:	f000 fccd 	bl	8002b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d104      	bne.n	800226a <HAL_TIM_IC_Start_IT+0x1e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002266:	b2db      	uxtb	r3, r3
 8002268:	e013      	b.n	8002292 <HAL_TIM_IC_Start_IT+0x46>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b04      	cmp	r3, #4
 800226e:	d104      	bne.n	800227a <HAL_TIM_IC_Start_IT+0x2e>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002276:	b2db      	uxtb	r3, r3
 8002278:	e00b      	b.n	8002292 <HAL_TIM_IC_Start_IT+0x46>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d104      	bne.n	800228a <HAL_TIM_IC_Start_IT+0x3e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002286:	b2db      	uxtb	r3, r3
 8002288:	e003      	b.n	8002292 <HAL_TIM_IC_Start_IT+0x46>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002290:	b2db      	uxtb	r3, r3
 8002292:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d104      	bne.n	80022a4 <HAL_TIM_IC_Start_IT+0x58>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	e013      	b.n	80022cc <HAL_TIM_IC_Start_IT+0x80>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d104      	bne.n	80022b4 <HAL_TIM_IC_Start_IT+0x68>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e00b      	b.n	80022cc <HAL_TIM_IC_Start_IT+0x80>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d104      	bne.n	80022c4 <HAL_TIM_IC_Start_IT+0x78>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e003      	b.n	80022cc <HAL_TIM_IC_Start_IT+0x80>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80022ce:	7bbb      	ldrb	r3, [r7, #14]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d102      	bne.n	80022da <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80022d4:	7b7b      	ldrb	r3, [r7, #13]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d001      	beq.n	80022de <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0cc      	b.n	8002478 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d104      	bne.n	80022ee <HAL_TIM_IC_Start_IT+0xa2>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022ec:	e013      	b.n	8002316 <HAL_TIM_IC_Start_IT+0xca>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d104      	bne.n	80022fe <HAL_TIM_IC_Start_IT+0xb2>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022fc:	e00b      	b.n	8002316 <HAL_TIM_IC_Start_IT+0xca>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b08      	cmp	r3, #8
 8002302:	d104      	bne.n	800230e <HAL_TIM_IC_Start_IT+0xc2>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800230c:	e003      	b.n	8002316 <HAL_TIM_IC_Start_IT+0xca>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d104      	bne.n	8002326 <HAL_TIM_IC_Start_IT+0xda>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002324:	e013      	b.n	800234e <HAL_TIM_IC_Start_IT+0x102>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d104      	bne.n	8002336 <HAL_TIM_IC_Start_IT+0xea>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002334:	e00b      	b.n	800234e <HAL_TIM_IC_Start_IT+0x102>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d104      	bne.n	8002346 <HAL_TIM_IC_Start_IT+0xfa>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002344:	e003      	b.n	800234e <HAL_TIM_IC_Start_IT+0x102>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2202      	movs	r2, #2
 800234a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d841      	bhi.n	80023d8 <HAL_TIM_IC_Start_IT+0x18c>
 8002354:	a201      	add	r2, pc, #4	@ (adr r2, 800235c <HAL_TIM_IC_Start_IT+0x110>)
 8002356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	08002391 	.word	0x08002391
 8002360:	080023d9 	.word	0x080023d9
 8002364:	080023d9 	.word	0x080023d9
 8002368:	080023d9 	.word	0x080023d9
 800236c:	080023a3 	.word	0x080023a3
 8002370:	080023d9 	.word	0x080023d9
 8002374:	080023d9 	.word	0x080023d9
 8002378:	080023d9 	.word	0x080023d9
 800237c:	080023b5 	.word	0x080023b5
 8002380:	080023d9 	.word	0x080023d9
 8002384:	080023d9 	.word	0x080023d9
 8002388:	080023d9 	.word	0x080023d9
 800238c:	080023c7 	.word	0x080023c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0202 	orr.w	r2, r2, #2
 800239e:	60da      	str	r2, [r3, #12]
      break;
 80023a0:	e01d      	b.n	80023de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0204 	orr.w	r2, r2, #4
 80023b0:	60da      	str	r2, [r3, #12]
      break;
 80023b2:	e014      	b.n	80023de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0208 	orr.w	r2, r2, #8
 80023c2:	60da      	str	r2, [r3, #12]
      break;
 80023c4:	e00b      	b.n	80023de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0210 	orr.w	r2, r2, #16
 80023d4:	60da      	str	r2, [r3, #12]
      break;
 80023d6:	e002      	b.n	80023de <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
      break;
 80023dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d148      	bne.n	8002476 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	6839      	ldr	r1, [r7, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fe2d 	bl	800304c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a22      	ldr	r2, [pc, #136]	@ (8002480 <HAL_TIM_IC_Start_IT+0x234>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d022      	beq.n	8002442 <HAL_TIM_IC_Start_IT+0x1f6>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002404:	d01d      	beq.n	8002442 <HAL_TIM_IC_Start_IT+0x1f6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1e      	ldr	r2, [pc, #120]	@ (8002484 <HAL_TIM_IC_Start_IT+0x238>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d018      	beq.n	8002442 <HAL_TIM_IC_Start_IT+0x1f6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1c      	ldr	r2, [pc, #112]	@ (8002488 <HAL_TIM_IC_Start_IT+0x23c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_TIM_IC_Start_IT+0x1f6>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a1b      	ldr	r2, [pc, #108]	@ (800248c <HAL_TIM_IC_Start_IT+0x240>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00e      	beq.n	8002442 <HAL_TIM_IC_Start_IT+0x1f6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a19      	ldr	r2, [pc, #100]	@ (8002490 <HAL_TIM_IC_Start_IT+0x244>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d009      	beq.n	8002442 <HAL_TIM_IC_Start_IT+0x1f6>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a18      	ldr	r2, [pc, #96]	@ (8002494 <HAL_TIM_IC_Start_IT+0x248>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d004      	beq.n	8002442 <HAL_TIM_IC_Start_IT+0x1f6>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a16      	ldr	r2, [pc, #88]	@ (8002498 <HAL_TIM_IC_Start_IT+0x24c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d111      	bne.n	8002466 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b06      	cmp	r3, #6
 8002452:	d010      	beq.n	8002476 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002464:	e007      	b.n	8002476 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0201 	orr.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40010000 	.word	0x40010000
 8002484:	40000400 	.word	0x40000400
 8002488:	40000800 	.word	0x40000800
 800248c:	40000c00 	.word	0x40000c00
 8002490:	40010400 	.word	0x40010400
 8002494:	40014000 	.word	0x40014000
 8002498:	40001800 	.word	0x40001800

0800249c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	d841      	bhi.n	8002534 <HAL_TIM_IC_Stop_IT+0x98>
 80024b0:	a201      	add	r2, pc, #4	@ (adr r2, 80024b8 <HAL_TIM_IC_Stop_IT+0x1c>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	080024ed 	.word	0x080024ed
 80024bc:	08002535 	.word	0x08002535
 80024c0:	08002535 	.word	0x08002535
 80024c4:	08002535 	.word	0x08002535
 80024c8:	080024ff 	.word	0x080024ff
 80024cc:	08002535 	.word	0x08002535
 80024d0:	08002535 	.word	0x08002535
 80024d4:	08002535 	.word	0x08002535
 80024d8:	08002511 	.word	0x08002511
 80024dc:	08002535 	.word	0x08002535
 80024e0:	08002535 	.word	0x08002535
 80024e4:	08002535 	.word	0x08002535
 80024e8:	08002523 	.word	0x08002523
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0202 	bic.w	r2, r2, #2
 80024fa:	60da      	str	r2, [r3, #12]
      break;
 80024fc:	e01d      	b.n	800253a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0204 	bic.w	r2, r2, #4
 800250c:	60da      	str	r2, [r3, #12]
      break;
 800250e:	e014      	b.n	800253a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0208 	bic.w	r2, r2, #8
 800251e:	60da      	str	r2, [r3, #12]
      break;
 8002520:	e00b      	b.n	800253a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0210 	bic.w	r2, r2, #16
 8002530:	60da      	str	r2, [r3, #12]
      break;
 8002532:	e002      	b.n	800253a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
      break;
 8002538:	bf00      	nop
  }

  if (status == HAL_OK)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d156      	bne.n	80025ee <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2200      	movs	r2, #0
 8002546:	6839      	ldr	r1, [r7, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fd7f 	bl	800304c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6a1a      	ldr	r2, [r3, #32]
 8002554:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <HAL_TIM_IC_Stop_IT+0xe2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a1a      	ldr	r2, [r3, #32]
 8002564:	f240 4344 	movw	r3, #1092	@ 0x444
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d107      	bne.n	800257e <HAL_TIM_IC_Stop_IT+0xe2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <HAL_TIM_IC_Stop_IT+0xf2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800258c:	e013      	b.n	80025b6 <HAL_TIM_IC_Stop_IT+0x11a>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d104      	bne.n	800259e <HAL_TIM_IC_Stop_IT+0x102>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800259c:	e00b      	b.n	80025b6 <HAL_TIM_IC_Stop_IT+0x11a>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d104      	bne.n	80025ae <HAL_TIM_IC_Stop_IT+0x112>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025ac:	e003      	b.n	80025b6 <HAL_TIM_IC_Stop_IT+0x11a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d104      	bne.n	80025c6 <HAL_TIM_IC_Stop_IT+0x12a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025c4:	e013      	b.n	80025ee <HAL_TIM_IC_Stop_IT+0x152>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d104      	bne.n	80025d6 <HAL_TIM_IC_Stop_IT+0x13a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025d4:	e00b      	b.n	80025ee <HAL_TIM_IC_Stop_IT+0x152>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d104      	bne.n	80025e6 <HAL_TIM_IC_Stop_IT+0x14a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025e4:	e003      	b.n	80025ee <HAL_TIM_IC_Stop_IT+0x152>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d020      	beq.n	800265c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01b      	beq.n	800265c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0202 	mvn.w	r2, #2
 800262c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fd fffa 	bl	800063c <HAL_TIM_IC_CaptureCallback>
 8002648:	e005      	b.n	8002656 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fa76 	bl	8002b3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fa7d 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d020      	beq.n	80026a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01b      	beq.n	80026a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0204 	mvn.w	r2, #4
 8002678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2202      	movs	r2, #2
 800267e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fd ffd4 	bl	800063c <HAL_TIM_IC_CaptureCallback>
 8002694:	e005      	b.n	80026a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fa50 	bl	8002b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fa57 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d020      	beq.n	80026f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01b      	beq.n	80026f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0208 	mvn.w	r2, #8
 80026c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2204      	movs	r2, #4
 80026ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fd ffae 	bl	800063c <HAL_TIM_IC_CaptureCallback>
 80026e0:	e005      	b.n	80026ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fa2a 	bl	8002b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fa31 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d020      	beq.n	8002740 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01b      	beq.n	8002740 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0210 	mvn.w	r2, #16
 8002710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2208      	movs	r2, #8
 8002716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fd ff88 	bl	800063c <HAL_TIM_IC_CaptureCallback>
 800272c:	e005      	b.n	800273a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fa04 	bl	8002b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fa0b 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00c      	beq.n	8002764 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0201 	mvn.w	r2, #1
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f9e2 	bl	8002b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fd0e 	bl	80031a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f9dc 	bl	8002b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00c      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0220 	mvn.w	r2, #32
 80027c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fce0 	bl	8003190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e088      	b.n	8002908 <HAL_TIM_IC_ConfigChannel+0x130>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d11b      	bne.n	800283c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002814:	f000 fa56 	bl	8002cc4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 020c 	bic.w	r2, r2, #12
 8002826:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6999      	ldr	r1, [r3, #24]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	619a      	str	r2, [r3, #24]
 800283a:	e060      	b.n	80028fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b04      	cmp	r3, #4
 8002840:	d11c      	bne.n	800287c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002852:	f000 fada 	bl	8002e0a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002864:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6999      	ldr	r1, [r3, #24]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	021a      	lsls	r2, r3, #8
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	619a      	str	r2, [r3, #24]
 800287a:	e040      	b.n	80028fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b08      	cmp	r3, #8
 8002880:	d11b      	bne.n	80028ba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002892:	f000 fb27 	bl	8002ee4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 020c 	bic.w	r2, r2, #12
 80028a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69d9      	ldr	r1, [r3, #28]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	61da      	str	r2, [r3, #28]
 80028b8:	e021      	b.n	80028fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b0c      	cmp	r3, #12
 80028be:	d11c      	bne.n	80028fa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80028d0:	f000 fb44 	bl	8002f5c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69da      	ldr	r2, [r3, #28]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80028e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69d9      	ldr	r1, [r3, #28]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	021a      	lsls	r2, r3, #8
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	61da      	str	r2, [r3, #28]
 80028f8:	e001      	b.n	80028fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002906:	7dfb      	ldrb	r3, [r7, #23]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_TIM_ConfigClockSource+0x1c>
 8002928:	2302      	movs	r3, #2
 800292a:	e0b4      	b.n	8002a96 <HAL_TIM_ConfigClockSource+0x186>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800294a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002964:	d03e      	beq.n	80029e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800296a:	f200 8087 	bhi.w	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 800296e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002972:	f000 8086 	beq.w	8002a82 <HAL_TIM_ConfigClockSource+0x172>
 8002976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800297a:	d87f      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 800297c:	2b70      	cmp	r3, #112	@ 0x70
 800297e:	d01a      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002980:	2b70      	cmp	r3, #112	@ 0x70
 8002982:	d87b      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 8002984:	2b60      	cmp	r3, #96	@ 0x60
 8002986:	d050      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x11a>
 8002988:	2b60      	cmp	r3, #96	@ 0x60
 800298a:	d877      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 800298c:	2b50      	cmp	r3, #80	@ 0x50
 800298e:	d03c      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0xfa>
 8002990:	2b50      	cmp	r3, #80	@ 0x50
 8002992:	d873      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 8002994:	2b40      	cmp	r3, #64	@ 0x40
 8002996:	d058      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x13a>
 8002998:	2b40      	cmp	r3, #64	@ 0x40
 800299a:	d86f      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 800299c:	2b30      	cmp	r3, #48	@ 0x30
 800299e:	d064      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x15a>
 80029a0:	2b30      	cmp	r3, #48	@ 0x30
 80029a2:	d86b      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d060      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x15a>
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d867      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d05c      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x15a>
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	d05a      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x15a>
 80029b4:	e062      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029c6:	f000 fb21 	bl	800300c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	609a      	str	r2, [r3, #8]
      break;
 80029e2:	e04f      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029f4:	f000 fb0a 	bl	800300c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a06:	609a      	str	r2, [r3, #8]
      break;
 8002a08:	e03c      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a16:	461a      	mov	r2, r3
 8002a18:	f000 f9c8 	bl	8002dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2150      	movs	r1, #80	@ 0x50
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fad7 	bl	8002fd6 <TIM_ITRx_SetConfig>
      break;
 8002a28:	e02c      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a36:	461a      	mov	r2, r3
 8002a38:	f000 fa24 	bl	8002e84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2160      	movs	r1, #96	@ 0x60
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fac7 	bl	8002fd6 <TIM_ITRx_SetConfig>
      break;
 8002a48:	e01c      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a56:	461a      	mov	r2, r3
 8002a58:	f000 f9a8 	bl	8002dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2140      	movs	r1, #64	@ 0x40
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fab7 	bl	8002fd6 <TIM_ITRx_SetConfig>
      break;
 8002a68:	e00c      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4619      	mov	r1, r3
 8002a74:	4610      	mov	r0, r2
 8002a76:	f000 faae 	bl	8002fd6 <TIM_ITRx_SetConfig>
      break;
 8002a7a:	e003      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a80:	e000      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b0c      	cmp	r3, #12
 8002ab2:	d831      	bhi.n	8002b18 <HAL_TIM_ReadCapturedValue+0x78>
 8002ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8002abc <HAL_TIM_ReadCapturedValue+0x1c>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002af1 	.word	0x08002af1
 8002ac0:	08002b19 	.word	0x08002b19
 8002ac4:	08002b19 	.word	0x08002b19
 8002ac8:	08002b19 	.word	0x08002b19
 8002acc:	08002afb 	.word	0x08002afb
 8002ad0:	08002b19 	.word	0x08002b19
 8002ad4:	08002b19 	.word	0x08002b19
 8002ad8:	08002b19 	.word	0x08002b19
 8002adc:	08002b05 	.word	0x08002b05
 8002ae0:	08002b19 	.word	0x08002b19
 8002ae4:	08002b19 	.word	0x08002b19
 8002ae8:	08002b19 	.word	0x08002b19
 8002aec:	08002b0f 	.word	0x08002b0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af6:	60fb      	str	r3, [r7, #12]

      break;
 8002af8:	e00f      	b.n	8002b1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b00:	60fb      	str	r3, [r7, #12]

      break;
 8002b02:	e00a      	b.n	8002b1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0a:	60fb      	str	r3, [r7, #12]

      break;
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	60fb      	str	r3, [r7, #12]

      break;
 8002b16:	e000      	b.n	8002b1a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002b18:	bf00      	nop
  }

  return tmpreg;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a43      	ldr	r2, [pc, #268]	@ (8002c98 <TIM_Base_SetConfig+0x120>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d013      	beq.n	8002bb8 <TIM_Base_SetConfig+0x40>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b96:	d00f      	beq.n	8002bb8 <TIM_Base_SetConfig+0x40>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a40      	ldr	r2, [pc, #256]	@ (8002c9c <TIM_Base_SetConfig+0x124>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d00b      	beq.n	8002bb8 <TIM_Base_SetConfig+0x40>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a3f      	ldr	r2, [pc, #252]	@ (8002ca0 <TIM_Base_SetConfig+0x128>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d007      	beq.n	8002bb8 <TIM_Base_SetConfig+0x40>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a3e      	ldr	r2, [pc, #248]	@ (8002ca4 <TIM_Base_SetConfig+0x12c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d003      	beq.n	8002bb8 <TIM_Base_SetConfig+0x40>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ca8 <TIM_Base_SetConfig+0x130>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d108      	bne.n	8002bca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a32      	ldr	r2, [pc, #200]	@ (8002c98 <TIM_Base_SetConfig+0x120>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d02b      	beq.n	8002c2a <TIM_Base_SetConfig+0xb2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd8:	d027      	beq.n	8002c2a <TIM_Base_SetConfig+0xb2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8002c9c <TIM_Base_SetConfig+0x124>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d023      	beq.n	8002c2a <TIM_Base_SetConfig+0xb2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a2e      	ldr	r2, [pc, #184]	@ (8002ca0 <TIM_Base_SetConfig+0x128>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d01f      	beq.n	8002c2a <TIM_Base_SetConfig+0xb2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca4 <TIM_Base_SetConfig+0x12c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01b      	beq.n	8002c2a <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8002ca8 <TIM_Base_SetConfig+0x130>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d017      	beq.n	8002c2a <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8002cac <TIM_Base_SetConfig+0x134>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d013      	beq.n	8002c2a <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a2a      	ldr	r2, [pc, #168]	@ (8002cb0 <TIM_Base_SetConfig+0x138>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00f      	beq.n	8002c2a <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a29      	ldr	r2, [pc, #164]	@ (8002cb4 <TIM_Base_SetConfig+0x13c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00b      	beq.n	8002c2a <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a28      	ldr	r2, [pc, #160]	@ (8002cb8 <TIM_Base_SetConfig+0x140>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <TIM_Base_SetConfig+0xb2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a27      	ldr	r2, [pc, #156]	@ (8002cbc <TIM_Base_SetConfig+0x144>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d003      	beq.n	8002c2a <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a26      	ldr	r2, [pc, #152]	@ (8002cc0 <TIM_Base_SetConfig+0x148>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d108      	bne.n	8002c3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c98 <TIM_Base_SetConfig+0x120>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d003      	beq.n	8002c6a <TIM_Base_SetConfig+0xf2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a10      	ldr	r2, [pc, #64]	@ (8002ca8 <TIM_Base_SetConfig+0x130>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d103      	bne.n	8002c72 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f043 0204 	orr.w	r2, r3, #4
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	601a      	str	r2, [r3, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40000800 	.word	0x40000800
 8002ca4:	40000c00 	.word	0x40000c00
 8002ca8:	40010400 	.word	0x40010400
 8002cac:	40014000 	.word	0x40014000
 8002cb0:	40014400 	.word	0x40014400
 8002cb4:	40014800 	.word	0x40014800
 8002cb8:	40001800 	.word	0x40001800
 8002cbc:	40001c00 	.word	0x40001c00
 8002cc0:	40002000 	.word	0x40002000

08002cc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f023 0201 	bic.w	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a28      	ldr	r2, [pc, #160]	@ (8002d90 <TIM_TI1_SetConfig+0xcc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01b      	beq.n	8002d2a <TIM_TI1_SetConfig+0x66>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf8:	d017      	beq.n	8002d2a <TIM_TI1_SetConfig+0x66>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4a25      	ldr	r2, [pc, #148]	@ (8002d94 <TIM_TI1_SetConfig+0xd0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d013      	beq.n	8002d2a <TIM_TI1_SetConfig+0x66>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a24      	ldr	r2, [pc, #144]	@ (8002d98 <TIM_TI1_SetConfig+0xd4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00f      	beq.n	8002d2a <TIM_TI1_SetConfig+0x66>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4a23      	ldr	r2, [pc, #140]	@ (8002d9c <TIM_TI1_SetConfig+0xd8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00b      	beq.n	8002d2a <TIM_TI1_SetConfig+0x66>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4a22      	ldr	r2, [pc, #136]	@ (8002da0 <TIM_TI1_SetConfig+0xdc>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d007      	beq.n	8002d2a <TIM_TI1_SetConfig+0x66>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4a21      	ldr	r2, [pc, #132]	@ (8002da4 <TIM_TI1_SetConfig+0xe0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d003      	beq.n	8002d2a <TIM_TI1_SetConfig+0x66>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a20      	ldr	r2, [pc, #128]	@ (8002da8 <TIM_TI1_SetConfig+0xe4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <TIM_TI1_SetConfig+0x6a>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <TIM_TI1_SetConfig+0x6c>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f023 0303 	bic.w	r3, r3, #3
 8002d3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	e003      	b.n	8002d4e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f023 030a 	bic.w	r3, r3, #10
 8002d68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f003 030a 	and.w	r3, r3, #10
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40010000 	.word	0x40010000
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800
 8002d9c:	40000c00 	.word	0x40000c00
 8002da0:	40010400 	.word	0x40010400
 8002da4:	40014000 	.word	0x40014000
 8002da8:	40001800 	.word	0x40001800

08002dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f023 0201 	bic.w	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f023 030a 	bic.w	r3, r3, #10
 8002de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	621a      	str	r2, [r3, #32]
}
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b087      	sub	sp, #28
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f023 0210 	bic.w	r2, r3, #16
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	031b      	lsls	r3, r3, #12
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	621a      	str	r2, [r3, #32]
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f023 0210 	bic.w	r2, r3, #16
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	031b      	lsls	r3, r3, #12
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	621a      	str	r2, [r3, #32]
}
 8002ed8:	bf00      	nop
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f023 0303 	bic.w	r3, r3, #3
 8002f10:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002f34:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	621a      	str	r2, [r3, #32]
}
 8002f50:	bf00      	nop
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f88:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f9a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	031b      	lsls	r3, r3, #12
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002fae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	031b      	lsls	r3, r3, #12
 8002fb4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b085      	sub	sp, #20
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f043 0307 	orr.w	r3, r3, #7
 8002ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	609a      	str	r2, [r3, #8]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	021a      	lsls	r2, r3, #8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	431a      	orrs	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	609a      	str	r2, [r3, #8]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	2201      	movs	r2, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a1a      	ldr	r2, [r3, #32]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	43db      	mvns	r3, r3
 800306e:	401a      	ands	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	fa01 f303 	lsl.w	r3, r1, r3
 8003084:	431a      	orrs	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	621a      	str	r2, [r3, #32]
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e05a      	b.n	8003166 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a21      	ldr	r2, [pc, #132]	@ (8003174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d022      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030fc:	d01d      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1d      	ldr	r2, [pc, #116]	@ (8003178 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d018      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1b      	ldr	r2, [pc, #108]	@ (800317c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d013      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1a      	ldr	r2, [pc, #104]	@ (8003180 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00e      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a18      	ldr	r2, [pc, #96]	@ (8003184 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d009      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a17      	ldr	r2, [pc, #92]	@ (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d004      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a15      	ldr	r2, [pc, #84]	@ (800318c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d10c      	bne.n	8003154 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	4313      	orrs	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40010000 	.word	0x40010000
 8003178:	40000400 	.word	0x40000400
 800317c:	40000800 	.word	0x40000800
 8003180:	40000c00 	.word	0x40000c00
 8003184:	40010400 	.word	0x40010400
 8003188:	40014000 	.word	0x40014000
 800318c:	40001800 	.word	0x40001800

08003190 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e042      	b.n	8003250 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fd5a 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2224      	movs	r2, #36	@ 0x24
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f973 	bl	80034e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	@ 0x28
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	d175      	bne.n	8003364 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_UART_Transmit+0x2c>
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e06e      	b.n	8003366 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2221      	movs	r2, #33	@ 0x21
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003296:	f7fd fe59 	bl	8000f4c <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	88fa      	ldrh	r2, [r7, #6]
 80032a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	88fa      	ldrh	r2, [r7, #6]
 80032a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b0:	d108      	bne.n	80032c4 <HAL_UART_Transmit+0x6c>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d104      	bne.n	80032c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	e003      	b.n	80032cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032cc:	e02e      	b.n	800332c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2180      	movs	r1, #128	@ 0x80
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f848 	bl	800336e <UART_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e03a      	b.n	8003366 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003304:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	3302      	adds	r3, #2
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	e007      	b.n	800331e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	781a      	ldrb	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	3301      	adds	r3, #1
 800331c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1cb      	bne.n	80032ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2200      	movs	r2, #0
 800333e:	2140      	movs	r1, #64	@ 0x40
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f814 	bl	800336e <UART_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e006      	b.n	8003366 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003364:	2302      	movs	r3, #2
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b086      	sub	sp, #24
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	4613      	mov	r3, r2
 800337c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337e:	e03b      	b.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003386:	d037      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003388:	f7fd fde0 	bl	8000f4c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	6a3a      	ldr	r2, [r7, #32]
 8003394:	429a      	cmp	r2, r3
 8003396:	d302      	bcc.n	800339e <UART_WaitOnFlagUntilTimeout+0x30>
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e03a      	b.n	8003418 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d023      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b80      	cmp	r3, #128	@ 0x80
 80033b4:	d020      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b40      	cmp	r3, #64	@ 0x40
 80033ba:	d01d      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d116      	bne.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f81d 	bl	8003420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2208      	movs	r2, #8
 80033ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e00f      	b.n	8003418 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4013      	ands	r3, r2
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	429a      	cmp	r2, r3
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	429a      	cmp	r2, r3
 8003414:	d0b4      	beq.n	8003380 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003420:	b480      	push	{r7}
 8003422:	b095      	sub	sp, #84	@ 0x54
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	330c      	adds	r3, #12
 800342e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800343e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003448:	643a      	str	r2, [r7, #64]	@ 0x40
 800344a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800344e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e5      	bne.n	8003428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3314      	adds	r3, #20
 8003462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	61fb      	str	r3, [r7, #28]
   return(result);
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3314      	adds	r3, #20
 800347a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800347c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800347e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e5      	bne.n	800345c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003494:	2b01      	cmp	r3, #1
 8003496:	d119      	bne.n	80034cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f023 0310 	bic.w	r3, r3, #16
 80034ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034b8:	61ba      	str	r2, [r7, #24]
 80034ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	6979      	ldr	r1, [r7, #20]
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	613b      	str	r3, [r7, #16]
   return(result);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e5      	bne.n	8003498 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034da:	bf00      	nop
 80034dc:	3754      	adds	r7, #84	@ 0x54
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ec:	b0c0      	sub	sp, #256	@ 0x100
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003504:	68d9      	ldr	r1, [r3, #12]
 8003506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	ea40 0301 	orr.w	r3, r0, r1
 8003510:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	431a      	orrs	r2, r3
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	431a      	orrs	r2, r3
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003540:	f021 010c 	bic.w	r1, r1, #12
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800354e:	430b      	orrs	r3, r1
 8003550:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800355e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003562:	6999      	ldr	r1, [r3, #24]
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	ea40 0301 	orr.w	r3, r0, r1
 800356e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	4b8f      	ldr	r3, [pc, #572]	@ (80037b4 <UART_SetConfig+0x2cc>)
 8003578:	429a      	cmp	r2, r3
 800357a:	d005      	beq.n	8003588 <UART_SetConfig+0xa0>
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4b8d      	ldr	r3, [pc, #564]	@ (80037b8 <UART_SetConfig+0x2d0>)
 8003584:	429a      	cmp	r2, r3
 8003586:	d104      	bne.n	8003592 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003588:	f7fe f8d6 	bl	8001738 <HAL_RCC_GetPCLK2Freq>
 800358c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003590:	e003      	b.n	800359a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003592:	f7fe f8bd 	bl	8001710 <HAL_RCC_GetPCLK1Freq>
 8003596:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800359a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035a4:	f040 810c 	bne.w	80037c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80035b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80035ba:	4622      	mov	r2, r4
 80035bc:	462b      	mov	r3, r5
 80035be:	1891      	adds	r1, r2, r2
 80035c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80035c2:	415b      	adcs	r3, r3
 80035c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035ca:	4621      	mov	r1, r4
 80035cc:	eb12 0801 	adds.w	r8, r2, r1
 80035d0:	4629      	mov	r1, r5
 80035d2:	eb43 0901 	adc.w	r9, r3, r1
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ea:	4690      	mov	r8, r2
 80035ec:	4699      	mov	r9, r3
 80035ee:	4623      	mov	r3, r4
 80035f0:	eb18 0303 	adds.w	r3, r8, r3
 80035f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035f8:	462b      	mov	r3, r5
 80035fa:	eb49 0303 	adc.w	r3, r9, r3
 80035fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800360e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003612:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003616:	460b      	mov	r3, r1
 8003618:	18db      	adds	r3, r3, r3
 800361a:	653b      	str	r3, [r7, #80]	@ 0x50
 800361c:	4613      	mov	r3, r2
 800361e:	eb42 0303 	adc.w	r3, r2, r3
 8003622:	657b      	str	r3, [r7, #84]	@ 0x54
 8003624:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003628:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800362c:	f7fc fe48 	bl	80002c0 <__aeabi_uldivmod>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4b61      	ldr	r3, [pc, #388]	@ (80037bc <UART_SetConfig+0x2d4>)
 8003636:	fba3 2302 	umull	r2, r3, r3, r2
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	011c      	lsls	r4, r3, #4
 800363e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003642:	2200      	movs	r2, #0
 8003644:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003648:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800364c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003650:	4642      	mov	r2, r8
 8003652:	464b      	mov	r3, r9
 8003654:	1891      	adds	r1, r2, r2
 8003656:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003658:	415b      	adcs	r3, r3
 800365a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800365c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003660:	4641      	mov	r1, r8
 8003662:	eb12 0a01 	adds.w	sl, r2, r1
 8003666:	4649      	mov	r1, r9
 8003668:	eb43 0b01 	adc.w	fp, r3, r1
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003678:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800367c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003680:	4692      	mov	sl, r2
 8003682:	469b      	mov	fp, r3
 8003684:	4643      	mov	r3, r8
 8003686:	eb1a 0303 	adds.w	r3, sl, r3
 800368a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800368e:	464b      	mov	r3, r9
 8003690:	eb4b 0303 	adc.w	r3, fp, r3
 8003694:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036ac:	460b      	mov	r3, r1
 80036ae:	18db      	adds	r3, r3, r3
 80036b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80036b2:	4613      	mov	r3, r2
 80036b4:	eb42 0303 	adc.w	r3, r2, r3
 80036b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80036c2:	f7fc fdfd 	bl	80002c0 <__aeabi_uldivmod>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4611      	mov	r1, r2
 80036cc:	4b3b      	ldr	r3, [pc, #236]	@ (80037bc <UART_SetConfig+0x2d4>)
 80036ce:	fba3 2301 	umull	r2, r3, r3, r1
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2264      	movs	r2, #100	@ 0x64
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	1acb      	subs	r3, r1, r3
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80036e2:	4b36      	ldr	r3, [pc, #216]	@ (80037bc <UART_SetConfig+0x2d4>)
 80036e4:	fba3 2302 	umull	r2, r3, r3, r2
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036f0:	441c      	add	r4, r3
 80036f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003700:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003704:	4642      	mov	r2, r8
 8003706:	464b      	mov	r3, r9
 8003708:	1891      	adds	r1, r2, r2
 800370a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800370c:	415b      	adcs	r3, r3
 800370e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003714:	4641      	mov	r1, r8
 8003716:	1851      	adds	r1, r2, r1
 8003718:	6339      	str	r1, [r7, #48]	@ 0x30
 800371a:	4649      	mov	r1, r9
 800371c:	414b      	adcs	r3, r1
 800371e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800372c:	4659      	mov	r1, fp
 800372e:	00cb      	lsls	r3, r1, #3
 8003730:	4651      	mov	r1, sl
 8003732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003736:	4651      	mov	r1, sl
 8003738:	00ca      	lsls	r2, r1, #3
 800373a:	4610      	mov	r0, r2
 800373c:	4619      	mov	r1, r3
 800373e:	4603      	mov	r3, r0
 8003740:	4642      	mov	r2, r8
 8003742:	189b      	adds	r3, r3, r2
 8003744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003748:	464b      	mov	r3, r9
 800374a:	460a      	mov	r2, r1
 800374c:	eb42 0303 	adc.w	r3, r2, r3
 8003750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003760:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003764:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003768:	460b      	mov	r3, r1
 800376a:	18db      	adds	r3, r3, r3
 800376c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800376e:	4613      	mov	r3, r2
 8003770:	eb42 0303 	adc.w	r3, r2, r3
 8003774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003776:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800377a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800377e:	f7fc fd9f 	bl	80002c0 <__aeabi_uldivmod>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4b0d      	ldr	r3, [pc, #52]	@ (80037bc <UART_SetConfig+0x2d4>)
 8003788:	fba3 1302 	umull	r1, r3, r3, r2
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	2164      	movs	r1, #100	@ 0x64
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	3332      	adds	r3, #50	@ 0x32
 800379a:	4a08      	ldr	r2, [pc, #32]	@ (80037bc <UART_SetConfig+0x2d4>)
 800379c:	fba2 2303 	umull	r2, r3, r2, r3
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	f003 0207 	and.w	r2, r3, #7
 80037a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4422      	add	r2, r4
 80037ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037b0:	e106      	b.n	80039c0 <UART_SetConfig+0x4d8>
 80037b2:	bf00      	nop
 80037b4:	40011000 	.word	0x40011000
 80037b8:	40011400 	.word	0x40011400
 80037bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80037ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80037d2:	4642      	mov	r2, r8
 80037d4:	464b      	mov	r3, r9
 80037d6:	1891      	adds	r1, r2, r2
 80037d8:	6239      	str	r1, [r7, #32]
 80037da:	415b      	adcs	r3, r3
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037e2:	4641      	mov	r1, r8
 80037e4:	1854      	adds	r4, r2, r1
 80037e6:	4649      	mov	r1, r9
 80037e8:	eb43 0501 	adc.w	r5, r3, r1
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	00eb      	lsls	r3, r5, #3
 80037f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037fa:	00e2      	lsls	r2, r4, #3
 80037fc:	4614      	mov	r4, r2
 80037fe:	461d      	mov	r5, r3
 8003800:	4643      	mov	r3, r8
 8003802:	18e3      	adds	r3, r4, r3
 8003804:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003808:	464b      	mov	r3, r9
 800380a:	eb45 0303 	adc.w	r3, r5, r3
 800380e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800381e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800382e:	4629      	mov	r1, r5
 8003830:	008b      	lsls	r3, r1, #2
 8003832:	4621      	mov	r1, r4
 8003834:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003838:	4621      	mov	r1, r4
 800383a:	008a      	lsls	r2, r1, #2
 800383c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003840:	f7fc fd3e 	bl	80002c0 <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4b60      	ldr	r3, [pc, #384]	@ (80039cc <UART_SetConfig+0x4e4>)
 800384a:	fba3 2302 	umull	r2, r3, r3, r2
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	011c      	lsls	r4, r3, #4
 8003852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800385c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003860:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003864:	4642      	mov	r2, r8
 8003866:	464b      	mov	r3, r9
 8003868:	1891      	adds	r1, r2, r2
 800386a:	61b9      	str	r1, [r7, #24]
 800386c:	415b      	adcs	r3, r3
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003874:	4641      	mov	r1, r8
 8003876:	1851      	adds	r1, r2, r1
 8003878:	6139      	str	r1, [r7, #16]
 800387a:	4649      	mov	r1, r9
 800387c:	414b      	adcs	r3, r1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800388c:	4659      	mov	r1, fp
 800388e:	00cb      	lsls	r3, r1, #3
 8003890:	4651      	mov	r1, sl
 8003892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003896:	4651      	mov	r1, sl
 8003898:	00ca      	lsls	r2, r1, #3
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	4642      	mov	r2, r8
 80038a2:	189b      	adds	r3, r3, r2
 80038a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038a8:	464b      	mov	r3, r9
 80038aa:	460a      	mov	r2, r1
 80038ac:	eb42 0303 	adc.w	r3, r2, r3
 80038b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80038cc:	4649      	mov	r1, r9
 80038ce:	008b      	lsls	r3, r1, #2
 80038d0:	4641      	mov	r1, r8
 80038d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d6:	4641      	mov	r1, r8
 80038d8:	008a      	lsls	r2, r1, #2
 80038da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80038de:	f7fc fcef 	bl	80002c0 <__aeabi_uldivmod>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4611      	mov	r1, r2
 80038e8:	4b38      	ldr	r3, [pc, #224]	@ (80039cc <UART_SetConfig+0x4e4>)
 80038ea:	fba3 2301 	umull	r2, r3, r3, r1
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	2264      	movs	r2, #100	@ 0x64
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	1acb      	subs	r3, r1, r3
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	3332      	adds	r3, #50	@ 0x32
 80038fc:	4a33      	ldr	r2, [pc, #204]	@ (80039cc <UART_SetConfig+0x4e4>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003908:	441c      	add	r4, r3
 800390a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800390e:	2200      	movs	r2, #0
 8003910:	673b      	str	r3, [r7, #112]	@ 0x70
 8003912:	677a      	str	r2, [r7, #116]	@ 0x74
 8003914:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003918:	4642      	mov	r2, r8
 800391a:	464b      	mov	r3, r9
 800391c:	1891      	adds	r1, r2, r2
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	415b      	adcs	r3, r3
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003928:	4641      	mov	r1, r8
 800392a:	1851      	adds	r1, r2, r1
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	4649      	mov	r1, r9
 8003930:	414b      	adcs	r3, r1
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003940:	4659      	mov	r1, fp
 8003942:	00cb      	lsls	r3, r1, #3
 8003944:	4651      	mov	r1, sl
 8003946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800394a:	4651      	mov	r1, sl
 800394c:	00ca      	lsls	r2, r1, #3
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	4603      	mov	r3, r0
 8003954:	4642      	mov	r2, r8
 8003956:	189b      	adds	r3, r3, r2
 8003958:	66bb      	str	r3, [r7, #104]	@ 0x68
 800395a:	464b      	mov	r3, r9
 800395c:	460a      	mov	r2, r1
 800395e:	eb42 0303 	adc.w	r3, r2, r3
 8003962:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	663b      	str	r3, [r7, #96]	@ 0x60
 800396e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800397c:	4649      	mov	r1, r9
 800397e:	008b      	lsls	r3, r1, #2
 8003980:	4641      	mov	r1, r8
 8003982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003986:	4641      	mov	r1, r8
 8003988:	008a      	lsls	r2, r1, #2
 800398a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800398e:	f7fc fc97 	bl	80002c0 <__aeabi_uldivmod>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4b0d      	ldr	r3, [pc, #52]	@ (80039cc <UART_SetConfig+0x4e4>)
 8003998:	fba3 1302 	umull	r1, r3, r3, r2
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	2164      	movs	r1, #100	@ 0x64
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	3332      	adds	r3, #50	@ 0x32
 80039aa:	4a08      	ldr	r2, [pc, #32]	@ (80039cc <UART_SetConfig+0x4e4>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	f003 020f 	and.w	r2, r3, #15
 80039b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4422      	add	r2, r4
 80039be:	609a      	str	r2, [r3, #8]
}
 80039c0:	bf00      	nop
 80039c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80039c6:	46bd      	mov	sp, r7
 80039c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039cc:	51eb851f 	.word	0x51eb851f

080039d0 <siprintf>:
 80039d0:	b40e      	push	{r1, r2, r3}
 80039d2:	b510      	push	{r4, lr}
 80039d4:	b09d      	sub	sp, #116	@ 0x74
 80039d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80039d8:	9002      	str	r0, [sp, #8]
 80039da:	9006      	str	r0, [sp, #24]
 80039dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80039e0:	480a      	ldr	r0, [pc, #40]	@ (8003a0c <siprintf+0x3c>)
 80039e2:	9107      	str	r1, [sp, #28]
 80039e4:	9104      	str	r1, [sp, #16]
 80039e6:	490a      	ldr	r1, [pc, #40]	@ (8003a10 <siprintf+0x40>)
 80039e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80039ec:	9105      	str	r1, [sp, #20]
 80039ee:	2400      	movs	r4, #0
 80039f0:	a902      	add	r1, sp, #8
 80039f2:	6800      	ldr	r0, [r0, #0]
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80039f8:	f000 f994 	bl	8003d24 <_svfiprintf_r>
 80039fc:	9b02      	ldr	r3, [sp, #8]
 80039fe:	701c      	strb	r4, [r3, #0]
 8003a00:	b01d      	add	sp, #116	@ 0x74
 8003a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a06:	b003      	add	sp, #12
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000014 	.word	0x20000014
 8003a10:	ffff0208 	.word	0xffff0208

08003a14 <memset>:
 8003a14:	4402      	add	r2, r0
 8003a16:	4603      	mov	r3, r0
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d100      	bne.n	8003a1e <memset+0xa>
 8003a1c:	4770      	bx	lr
 8003a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a22:	e7f9      	b.n	8003a18 <memset+0x4>

08003a24 <__errno>:
 8003a24:	4b01      	ldr	r3, [pc, #4]	@ (8003a2c <__errno+0x8>)
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000014 	.word	0x20000014

08003a30 <__libc_init_array>:
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	4d0d      	ldr	r5, [pc, #52]	@ (8003a68 <__libc_init_array+0x38>)
 8003a34:	4c0d      	ldr	r4, [pc, #52]	@ (8003a6c <__libc_init_array+0x3c>)
 8003a36:	1b64      	subs	r4, r4, r5
 8003a38:	10a4      	asrs	r4, r4, #2
 8003a3a:	2600      	movs	r6, #0
 8003a3c:	42a6      	cmp	r6, r4
 8003a3e:	d109      	bne.n	8003a54 <__libc_init_array+0x24>
 8003a40:	4d0b      	ldr	r5, [pc, #44]	@ (8003a70 <__libc_init_array+0x40>)
 8003a42:	4c0c      	ldr	r4, [pc, #48]	@ (8003a74 <__libc_init_array+0x44>)
 8003a44:	f000 fc64 	bl	8004310 <_init>
 8003a48:	1b64      	subs	r4, r4, r5
 8003a4a:	10a4      	asrs	r4, r4, #2
 8003a4c:	2600      	movs	r6, #0
 8003a4e:	42a6      	cmp	r6, r4
 8003a50:	d105      	bne.n	8003a5e <__libc_init_array+0x2e>
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
 8003a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a58:	4798      	blx	r3
 8003a5a:	3601      	adds	r6, #1
 8003a5c:	e7ee      	b.n	8003a3c <__libc_init_array+0xc>
 8003a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a62:	4798      	blx	r3
 8003a64:	3601      	adds	r6, #1
 8003a66:	e7f2      	b.n	8003a4e <__libc_init_array+0x1e>
 8003a68:	080043dc 	.word	0x080043dc
 8003a6c:	080043dc 	.word	0x080043dc
 8003a70:	080043dc 	.word	0x080043dc
 8003a74:	080043e0 	.word	0x080043e0

08003a78 <__retarget_lock_acquire_recursive>:
 8003a78:	4770      	bx	lr

08003a7a <__retarget_lock_release_recursive>:
 8003a7a:	4770      	bx	lr

08003a7c <_free_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4605      	mov	r5, r0
 8003a80:	2900      	cmp	r1, #0
 8003a82:	d041      	beq.n	8003b08 <_free_r+0x8c>
 8003a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a88:	1f0c      	subs	r4, r1, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bfb8      	it	lt
 8003a8e:	18e4      	addlt	r4, r4, r3
 8003a90:	f000 f8e0 	bl	8003c54 <__malloc_lock>
 8003a94:	4a1d      	ldr	r2, [pc, #116]	@ (8003b0c <_free_r+0x90>)
 8003a96:	6813      	ldr	r3, [r2, #0]
 8003a98:	b933      	cbnz	r3, 8003aa8 <_free_r+0x2c>
 8003a9a:	6063      	str	r3, [r4, #4]
 8003a9c:	6014      	str	r4, [r2, #0]
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aa4:	f000 b8dc 	b.w	8003c60 <__malloc_unlock>
 8003aa8:	42a3      	cmp	r3, r4
 8003aaa:	d908      	bls.n	8003abe <_free_r+0x42>
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	1821      	adds	r1, r4, r0
 8003ab0:	428b      	cmp	r3, r1
 8003ab2:	bf01      	itttt	eq
 8003ab4:	6819      	ldreq	r1, [r3, #0]
 8003ab6:	685b      	ldreq	r3, [r3, #4]
 8003ab8:	1809      	addeq	r1, r1, r0
 8003aba:	6021      	streq	r1, [r4, #0]
 8003abc:	e7ed      	b.n	8003a9a <_free_r+0x1e>
 8003abe:	461a      	mov	r2, r3
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	b10b      	cbz	r3, 8003ac8 <_free_r+0x4c>
 8003ac4:	42a3      	cmp	r3, r4
 8003ac6:	d9fa      	bls.n	8003abe <_free_r+0x42>
 8003ac8:	6811      	ldr	r1, [r2, #0]
 8003aca:	1850      	adds	r0, r2, r1
 8003acc:	42a0      	cmp	r0, r4
 8003ace:	d10b      	bne.n	8003ae8 <_free_r+0x6c>
 8003ad0:	6820      	ldr	r0, [r4, #0]
 8003ad2:	4401      	add	r1, r0
 8003ad4:	1850      	adds	r0, r2, r1
 8003ad6:	4283      	cmp	r3, r0
 8003ad8:	6011      	str	r1, [r2, #0]
 8003ada:	d1e0      	bne.n	8003a9e <_free_r+0x22>
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	6053      	str	r3, [r2, #4]
 8003ae2:	4408      	add	r0, r1
 8003ae4:	6010      	str	r0, [r2, #0]
 8003ae6:	e7da      	b.n	8003a9e <_free_r+0x22>
 8003ae8:	d902      	bls.n	8003af0 <_free_r+0x74>
 8003aea:	230c      	movs	r3, #12
 8003aec:	602b      	str	r3, [r5, #0]
 8003aee:	e7d6      	b.n	8003a9e <_free_r+0x22>
 8003af0:	6820      	ldr	r0, [r4, #0]
 8003af2:	1821      	adds	r1, r4, r0
 8003af4:	428b      	cmp	r3, r1
 8003af6:	bf04      	itt	eq
 8003af8:	6819      	ldreq	r1, [r3, #0]
 8003afa:	685b      	ldreq	r3, [r3, #4]
 8003afc:	6063      	str	r3, [r4, #4]
 8003afe:	bf04      	itt	eq
 8003b00:	1809      	addeq	r1, r1, r0
 8003b02:	6021      	streq	r1, [r4, #0]
 8003b04:	6054      	str	r4, [r2, #4]
 8003b06:	e7ca      	b.n	8003a9e <_free_r+0x22>
 8003b08:	bd38      	pop	{r3, r4, r5, pc}
 8003b0a:	bf00      	nop
 8003b0c:	2000026c 	.word	0x2000026c

08003b10 <sbrk_aligned>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	4e0f      	ldr	r6, [pc, #60]	@ (8003b50 <sbrk_aligned+0x40>)
 8003b14:	460c      	mov	r4, r1
 8003b16:	6831      	ldr	r1, [r6, #0]
 8003b18:	4605      	mov	r5, r0
 8003b1a:	b911      	cbnz	r1, 8003b22 <sbrk_aligned+0x12>
 8003b1c:	f000 fba4 	bl	8004268 <_sbrk_r>
 8003b20:	6030      	str	r0, [r6, #0]
 8003b22:	4621      	mov	r1, r4
 8003b24:	4628      	mov	r0, r5
 8003b26:	f000 fb9f 	bl	8004268 <_sbrk_r>
 8003b2a:	1c43      	adds	r3, r0, #1
 8003b2c:	d103      	bne.n	8003b36 <sbrk_aligned+0x26>
 8003b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8003b32:	4620      	mov	r0, r4
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
 8003b36:	1cc4      	adds	r4, r0, #3
 8003b38:	f024 0403 	bic.w	r4, r4, #3
 8003b3c:	42a0      	cmp	r0, r4
 8003b3e:	d0f8      	beq.n	8003b32 <sbrk_aligned+0x22>
 8003b40:	1a21      	subs	r1, r4, r0
 8003b42:	4628      	mov	r0, r5
 8003b44:	f000 fb90 	bl	8004268 <_sbrk_r>
 8003b48:	3001      	adds	r0, #1
 8003b4a:	d1f2      	bne.n	8003b32 <sbrk_aligned+0x22>
 8003b4c:	e7ef      	b.n	8003b2e <sbrk_aligned+0x1e>
 8003b4e:	bf00      	nop
 8003b50:	20000268 	.word	0x20000268

08003b54 <_malloc_r>:
 8003b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b58:	1ccd      	adds	r5, r1, #3
 8003b5a:	f025 0503 	bic.w	r5, r5, #3
 8003b5e:	3508      	adds	r5, #8
 8003b60:	2d0c      	cmp	r5, #12
 8003b62:	bf38      	it	cc
 8003b64:	250c      	movcc	r5, #12
 8003b66:	2d00      	cmp	r5, #0
 8003b68:	4606      	mov	r6, r0
 8003b6a:	db01      	blt.n	8003b70 <_malloc_r+0x1c>
 8003b6c:	42a9      	cmp	r1, r5
 8003b6e:	d904      	bls.n	8003b7a <_malloc_r+0x26>
 8003b70:	230c      	movs	r3, #12
 8003b72:	6033      	str	r3, [r6, #0]
 8003b74:	2000      	movs	r0, #0
 8003b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c50 <_malloc_r+0xfc>
 8003b7e:	f000 f869 	bl	8003c54 <__malloc_lock>
 8003b82:	f8d8 3000 	ldr.w	r3, [r8]
 8003b86:	461c      	mov	r4, r3
 8003b88:	bb44      	cbnz	r4, 8003bdc <_malloc_r+0x88>
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	f7ff ffbf 	bl	8003b10 <sbrk_aligned>
 8003b92:	1c43      	adds	r3, r0, #1
 8003b94:	4604      	mov	r4, r0
 8003b96:	d158      	bne.n	8003c4a <_malloc_r+0xf6>
 8003b98:	f8d8 4000 	ldr.w	r4, [r8]
 8003b9c:	4627      	mov	r7, r4
 8003b9e:	2f00      	cmp	r7, #0
 8003ba0:	d143      	bne.n	8003c2a <_malloc_r+0xd6>
 8003ba2:	2c00      	cmp	r4, #0
 8003ba4:	d04b      	beq.n	8003c3e <_malloc_r+0xea>
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	4639      	mov	r1, r7
 8003baa:	4630      	mov	r0, r6
 8003bac:	eb04 0903 	add.w	r9, r4, r3
 8003bb0:	f000 fb5a 	bl	8004268 <_sbrk_r>
 8003bb4:	4581      	cmp	r9, r0
 8003bb6:	d142      	bne.n	8003c3e <_malloc_r+0xea>
 8003bb8:	6821      	ldr	r1, [r4, #0]
 8003bba:	1a6d      	subs	r5, r5, r1
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f7ff ffa6 	bl	8003b10 <sbrk_aligned>
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	d03a      	beq.n	8003c3e <_malloc_r+0xea>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	442b      	add	r3, r5
 8003bcc:	6023      	str	r3, [r4, #0]
 8003bce:	f8d8 3000 	ldr.w	r3, [r8]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	bb62      	cbnz	r2, 8003c30 <_malloc_r+0xdc>
 8003bd6:	f8c8 7000 	str.w	r7, [r8]
 8003bda:	e00f      	b.n	8003bfc <_malloc_r+0xa8>
 8003bdc:	6822      	ldr	r2, [r4, #0]
 8003bde:	1b52      	subs	r2, r2, r5
 8003be0:	d420      	bmi.n	8003c24 <_malloc_r+0xd0>
 8003be2:	2a0b      	cmp	r2, #11
 8003be4:	d917      	bls.n	8003c16 <_malloc_r+0xc2>
 8003be6:	1961      	adds	r1, r4, r5
 8003be8:	42a3      	cmp	r3, r4
 8003bea:	6025      	str	r5, [r4, #0]
 8003bec:	bf18      	it	ne
 8003bee:	6059      	strne	r1, [r3, #4]
 8003bf0:	6863      	ldr	r3, [r4, #4]
 8003bf2:	bf08      	it	eq
 8003bf4:	f8c8 1000 	streq.w	r1, [r8]
 8003bf8:	5162      	str	r2, [r4, r5]
 8003bfa:	604b      	str	r3, [r1, #4]
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	f000 f82f 	bl	8003c60 <__malloc_unlock>
 8003c02:	f104 000b 	add.w	r0, r4, #11
 8003c06:	1d23      	adds	r3, r4, #4
 8003c08:	f020 0007 	bic.w	r0, r0, #7
 8003c0c:	1ac2      	subs	r2, r0, r3
 8003c0e:	bf1c      	itt	ne
 8003c10:	1a1b      	subne	r3, r3, r0
 8003c12:	50a3      	strne	r3, [r4, r2]
 8003c14:	e7af      	b.n	8003b76 <_malloc_r+0x22>
 8003c16:	6862      	ldr	r2, [r4, #4]
 8003c18:	42a3      	cmp	r3, r4
 8003c1a:	bf0c      	ite	eq
 8003c1c:	f8c8 2000 	streq.w	r2, [r8]
 8003c20:	605a      	strne	r2, [r3, #4]
 8003c22:	e7eb      	b.n	8003bfc <_malloc_r+0xa8>
 8003c24:	4623      	mov	r3, r4
 8003c26:	6864      	ldr	r4, [r4, #4]
 8003c28:	e7ae      	b.n	8003b88 <_malloc_r+0x34>
 8003c2a:	463c      	mov	r4, r7
 8003c2c:	687f      	ldr	r7, [r7, #4]
 8003c2e:	e7b6      	b.n	8003b9e <_malloc_r+0x4a>
 8003c30:	461a      	mov	r2, r3
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	42a3      	cmp	r3, r4
 8003c36:	d1fb      	bne.n	8003c30 <_malloc_r+0xdc>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	6053      	str	r3, [r2, #4]
 8003c3c:	e7de      	b.n	8003bfc <_malloc_r+0xa8>
 8003c3e:	230c      	movs	r3, #12
 8003c40:	6033      	str	r3, [r6, #0]
 8003c42:	4630      	mov	r0, r6
 8003c44:	f000 f80c 	bl	8003c60 <__malloc_unlock>
 8003c48:	e794      	b.n	8003b74 <_malloc_r+0x20>
 8003c4a:	6005      	str	r5, [r0, #0]
 8003c4c:	e7d6      	b.n	8003bfc <_malloc_r+0xa8>
 8003c4e:	bf00      	nop
 8003c50:	2000026c 	.word	0x2000026c

08003c54 <__malloc_lock>:
 8003c54:	4801      	ldr	r0, [pc, #4]	@ (8003c5c <__malloc_lock+0x8>)
 8003c56:	f7ff bf0f 	b.w	8003a78 <__retarget_lock_acquire_recursive>
 8003c5a:	bf00      	nop
 8003c5c:	20000264 	.word	0x20000264

08003c60 <__malloc_unlock>:
 8003c60:	4801      	ldr	r0, [pc, #4]	@ (8003c68 <__malloc_unlock+0x8>)
 8003c62:	f7ff bf0a 	b.w	8003a7a <__retarget_lock_release_recursive>
 8003c66:	bf00      	nop
 8003c68:	20000264 	.word	0x20000264

08003c6c <__ssputs_r>:
 8003c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c70:	688e      	ldr	r6, [r1, #8]
 8003c72:	461f      	mov	r7, r3
 8003c74:	42be      	cmp	r6, r7
 8003c76:	680b      	ldr	r3, [r1, #0]
 8003c78:	4682      	mov	sl, r0
 8003c7a:	460c      	mov	r4, r1
 8003c7c:	4690      	mov	r8, r2
 8003c7e:	d82d      	bhi.n	8003cdc <__ssputs_r+0x70>
 8003c80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c88:	d026      	beq.n	8003cd8 <__ssputs_r+0x6c>
 8003c8a:	6965      	ldr	r5, [r4, #20]
 8003c8c:	6909      	ldr	r1, [r1, #16]
 8003c8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c92:	eba3 0901 	sub.w	r9, r3, r1
 8003c96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c9a:	1c7b      	adds	r3, r7, #1
 8003c9c:	444b      	add	r3, r9
 8003c9e:	106d      	asrs	r5, r5, #1
 8003ca0:	429d      	cmp	r5, r3
 8003ca2:	bf38      	it	cc
 8003ca4:	461d      	movcc	r5, r3
 8003ca6:	0553      	lsls	r3, r2, #21
 8003ca8:	d527      	bpl.n	8003cfa <__ssputs_r+0x8e>
 8003caa:	4629      	mov	r1, r5
 8003cac:	f7ff ff52 	bl	8003b54 <_malloc_r>
 8003cb0:	4606      	mov	r6, r0
 8003cb2:	b360      	cbz	r0, 8003d0e <__ssputs_r+0xa2>
 8003cb4:	6921      	ldr	r1, [r4, #16]
 8003cb6:	464a      	mov	r2, r9
 8003cb8:	f000 fae6 	bl	8004288 <memcpy>
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cc6:	81a3      	strh	r3, [r4, #12]
 8003cc8:	6126      	str	r6, [r4, #16]
 8003cca:	6165      	str	r5, [r4, #20]
 8003ccc:	444e      	add	r6, r9
 8003cce:	eba5 0509 	sub.w	r5, r5, r9
 8003cd2:	6026      	str	r6, [r4, #0]
 8003cd4:	60a5      	str	r5, [r4, #8]
 8003cd6:	463e      	mov	r6, r7
 8003cd8:	42be      	cmp	r6, r7
 8003cda:	d900      	bls.n	8003cde <__ssputs_r+0x72>
 8003cdc:	463e      	mov	r6, r7
 8003cde:	6820      	ldr	r0, [r4, #0]
 8003ce0:	4632      	mov	r2, r6
 8003ce2:	4641      	mov	r1, r8
 8003ce4:	f000 faa6 	bl	8004234 <memmove>
 8003ce8:	68a3      	ldr	r3, [r4, #8]
 8003cea:	1b9b      	subs	r3, r3, r6
 8003cec:	60a3      	str	r3, [r4, #8]
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	4433      	add	r3, r6
 8003cf2:	6023      	str	r3, [r4, #0]
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfa:	462a      	mov	r2, r5
 8003cfc:	f000 fad2 	bl	80042a4 <_realloc_r>
 8003d00:	4606      	mov	r6, r0
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d1e0      	bne.n	8003cc8 <__ssputs_r+0x5c>
 8003d06:	6921      	ldr	r1, [r4, #16]
 8003d08:	4650      	mov	r0, sl
 8003d0a:	f7ff feb7 	bl	8003a7c <_free_r>
 8003d0e:	230c      	movs	r3, #12
 8003d10:	f8ca 3000 	str.w	r3, [sl]
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d1a:	81a3      	strh	r3, [r4, #12]
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	e7e9      	b.n	8003cf6 <__ssputs_r+0x8a>
	...

08003d24 <_svfiprintf_r>:
 8003d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d28:	4698      	mov	r8, r3
 8003d2a:	898b      	ldrh	r3, [r1, #12]
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	b09d      	sub	sp, #116	@ 0x74
 8003d30:	4607      	mov	r7, r0
 8003d32:	460d      	mov	r5, r1
 8003d34:	4614      	mov	r4, r2
 8003d36:	d510      	bpl.n	8003d5a <_svfiprintf_r+0x36>
 8003d38:	690b      	ldr	r3, [r1, #16]
 8003d3a:	b973      	cbnz	r3, 8003d5a <_svfiprintf_r+0x36>
 8003d3c:	2140      	movs	r1, #64	@ 0x40
 8003d3e:	f7ff ff09 	bl	8003b54 <_malloc_r>
 8003d42:	6028      	str	r0, [r5, #0]
 8003d44:	6128      	str	r0, [r5, #16]
 8003d46:	b930      	cbnz	r0, 8003d56 <_svfiprintf_r+0x32>
 8003d48:	230c      	movs	r3, #12
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d50:	b01d      	add	sp, #116	@ 0x74
 8003d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d56:	2340      	movs	r3, #64	@ 0x40
 8003d58:	616b      	str	r3, [r5, #20]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d5e:	2320      	movs	r3, #32
 8003d60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d68:	2330      	movs	r3, #48	@ 0x30
 8003d6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f08 <_svfiprintf_r+0x1e4>
 8003d6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d72:	f04f 0901 	mov.w	r9, #1
 8003d76:	4623      	mov	r3, r4
 8003d78:	469a      	mov	sl, r3
 8003d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d7e:	b10a      	cbz	r2, 8003d84 <_svfiprintf_r+0x60>
 8003d80:	2a25      	cmp	r2, #37	@ 0x25
 8003d82:	d1f9      	bne.n	8003d78 <_svfiprintf_r+0x54>
 8003d84:	ebba 0b04 	subs.w	fp, sl, r4
 8003d88:	d00b      	beq.n	8003da2 <_svfiprintf_r+0x7e>
 8003d8a:	465b      	mov	r3, fp
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	4629      	mov	r1, r5
 8003d90:	4638      	mov	r0, r7
 8003d92:	f7ff ff6b 	bl	8003c6c <__ssputs_r>
 8003d96:	3001      	adds	r0, #1
 8003d98:	f000 80a7 	beq.w	8003eea <_svfiprintf_r+0x1c6>
 8003d9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d9e:	445a      	add	r2, fp
 8003da0:	9209      	str	r2, [sp, #36]	@ 0x24
 8003da2:	f89a 3000 	ldrb.w	r3, [sl]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 809f 	beq.w	8003eea <_svfiprintf_r+0x1c6>
 8003dac:	2300      	movs	r3, #0
 8003dae:	f04f 32ff 	mov.w	r2, #4294967295
 8003db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003db6:	f10a 0a01 	add.w	sl, sl, #1
 8003dba:	9304      	str	r3, [sp, #16]
 8003dbc:	9307      	str	r3, [sp, #28]
 8003dbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003dc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8003dc4:	4654      	mov	r4, sl
 8003dc6:	2205      	movs	r2, #5
 8003dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dcc:	484e      	ldr	r0, [pc, #312]	@ (8003f08 <_svfiprintf_r+0x1e4>)
 8003dce:	f7fc fa27 	bl	8000220 <memchr>
 8003dd2:	9a04      	ldr	r2, [sp, #16]
 8003dd4:	b9d8      	cbnz	r0, 8003e0e <_svfiprintf_r+0xea>
 8003dd6:	06d0      	lsls	r0, r2, #27
 8003dd8:	bf44      	itt	mi
 8003dda:	2320      	movmi	r3, #32
 8003ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003de0:	0711      	lsls	r1, r2, #28
 8003de2:	bf44      	itt	mi
 8003de4:	232b      	movmi	r3, #43	@ 0x2b
 8003de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dea:	f89a 3000 	ldrb.w	r3, [sl]
 8003dee:	2b2a      	cmp	r3, #42	@ 0x2a
 8003df0:	d015      	beq.n	8003e1e <_svfiprintf_r+0xfa>
 8003df2:	9a07      	ldr	r2, [sp, #28]
 8003df4:	4654      	mov	r4, sl
 8003df6:	2000      	movs	r0, #0
 8003df8:	f04f 0c0a 	mov.w	ip, #10
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e02:	3b30      	subs	r3, #48	@ 0x30
 8003e04:	2b09      	cmp	r3, #9
 8003e06:	d94b      	bls.n	8003ea0 <_svfiprintf_r+0x17c>
 8003e08:	b1b0      	cbz	r0, 8003e38 <_svfiprintf_r+0x114>
 8003e0a:	9207      	str	r2, [sp, #28]
 8003e0c:	e014      	b.n	8003e38 <_svfiprintf_r+0x114>
 8003e0e:	eba0 0308 	sub.w	r3, r0, r8
 8003e12:	fa09 f303 	lsl.w	r3, r9, r3
 8003e16:	4313      	orrs	r3, r2
 8003e18:	9304      	str	r3, [sp, #16]
 8003e1a:	46a2      	mov	sl, r4
 8003e1c:	e7d2      	b.n	8003dc4 <_svfiprintf_r+0xa0>
 8003e1e:	9b03      	ldr	r3, [sp, #12]
 8003e20:	1d19      	adds	r1, r3, #4
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	9103      	str	r1, [sp, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bfbb      	ittet	lt
 8003e2a:	425b      	neglt	r3, r3
 8003e2c:	f042 0202 	orrlt.w	r2, r2, #2
 8003e30:	9307      	strge	r3, [sp, #28]
 8003e32:	9307      	strlt	r3, [sp, #28]
 8003e34:	bfb8      	it	lt
 8003e36:	9204      	strlt	r2, [sp, #16]
 8003e38:	7823      	ldrb	r3, [r4, #0]
 8003e3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e3c:	d10a      	bne.n	8003e54 <_svfiprintf_r+0x130>
 8003e3e:	7863      	ldrb	r3, [r4, #1]
 8003e40:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e42:	d132      	bne.n	8003eaa <_svfiprintf_r+0x186>
 8003e44:	9b03      	ldr	r3, [sp, #12]
 8003e46:	1d1a      	adds	r2, r3, #4
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	9203      	str	r2, [sp, #12]
 8003e4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e50:	3402      	adds	r4, #2
 8003e52:	9305      	str	r3, [sp, #20]
 8003e54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f18 <_svfiprintf_r+0x1f4>
 8003e58:	7821      	ldrb	r1, [r4, #0]
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	4650      	mov	r0, sl
 8003e5e:	f7fc f9df 	bl	8000220 <memchr>
 8003e62:	b138      	cbz	r0, 8003e74 <_svfiprintf_r+0x150>
 8003e64:	9b04      	ldr	r3, [sp, #16]
 8003e66:	eba0 000a 	sub.w	r0, r0, sl
 8003e6a:	2240      	movs	r2, #64	@ 0x40
 8003e6c:	4082      	lsls	r2, r0
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	3401      	adds	r4, #1
 8003e72:	9304      	str	r3, [sp, #16]
 8003e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e78:	4824      	ldr	r0, [pc, #144]	@ (8003f0c <_svfiprintf_r+0x1e8>)
 8003e7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e7e:	2206      	movs	r2, #6
 8003e80:	f7fc f9ce 	bl	8000220 <memchr>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d036      	beq.n	8003ef6 <_svfiprintf_r+0x1d2>
 8003e88:	4b21      	ldr	r3, [pc, #132]	@ (8003f10 <_svfiprintf_r+0x1ec>)
 8003e8a:	bb1b      	cbnz	r3, 8003ed4 <_svfiprintf_r+0x1b0>
 8003e8c:	9b03      	ldr	r3, [sp, #12]
 8003e8e:	3307      	adds	r3, #7
 8003e90:	f023 0307 	bic.w	r3, r3, #7
 8003e94:	3308      	adds	r3, #8
 8003e96:	9303      	str	r3, [sp, #12]
 8003e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e9a:	4433      	add	r3, r6
 8003e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e9e:	e76a      	b.n	8003d76 <_svfiprintf_r+0x52>
 8003ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	e7a8      	b.n	8003dfc <_svfiprintf_r+0xd8>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	3401      	adds	r4, #1
 8003eae:	9305      	str	r3, [sp, #20]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f04f 0c0a 	mov.w	ip, #10
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ebc:	3a30      	subs	r2, #48	@ 0x30
 8003ebe:	2a09      	cmp	r2, #9
 8003ec0:	d903      	bls.n	8003eca <_svfiprintf_r+0x1a6>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0c6      	beq.n	8003e54 <_svfiprintf_r+0x130>
 8003ec6:	9105      	str	r1, [sp, #20]
 8003ec8:	e7c4      	b.n	8003e54 <_svfiprintf_r+0x130>
 8003eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ece:	4604      	mov	r4, r0
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e7f0      	b.n	8003eb6 <_svfiprintf_r+0x192>
 8003ed4:	ab03      	add	r3, sp, #12
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	462a      	mov	r2, r5
 8003eda:	4b0e      	ldr	r3, [pc, #56]	@ (8003f14 <_svfiprintf_r+0x1f0>)
 8003edc:	a904      	add	r1, sp, #16
 8003ede:	4638      	mov	r0, r7
 8003ee0:	f3af 8000 	nop.w
 8003ee4:	1c42      	adds	r2, r0, #1
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	d1d6      	bne.n	8003e98 <_svfiprintf_r+0x174>
 8003eea:	89ab      	ldrh	r3, [r5, #12]
 8003eec:	065b      	lsls	r3, r3, #25
 8003eee:	f53f af2d 	bmi.w	8003d4c <_svfiprintf_r+0x28>
 8003ef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ef4:	e72c      	b.n	8003d50 <_svfiprintf_r+0x2c>
 8003ef6:	ab03      	add	r3, sp, #12
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	462a      	mov	r2, r5
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <_svfiprintf_r+0x1f0>)
 8003efe:	a904      	add	r1, sp, #16
 8003f00:	4638      	mov	r0, r7
 8003f02:	f000 f879 	bl	8003ff8 <_printf_i>
 8003f06:	e7ed      	b.n	8003ee4 <_svfiprintf_r+0x1c0>
 8003f08:	080043a0 	.word	0x080043a0
 8003f0c:	080043aa 	.word	0x080043aa
 8003f10:	00000000 	.word	0x00000000
 8003f14:	08003c6d 	.word	0x08003c6d
 8003f18:	080043a6 	.word	0x080043a6

08003f1c <_printf_common>:
 8003f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f20:	4616      	mov	r6, r2
 8003f22:	4698      	mov	r8, r3
 8003f24:	688a      	ldr	r2, [r1, #8]
 8003f26:	690b      	ldr	r3, [r1, #16]
 8003f28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	bfb8      	it	lt
 8003f30:	4613      	movlt	r3, r2
 8003f32:	6033      	str	r3, [r6, #0]
 8003f34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f38:	4607      	mov	r7, r0
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	b10a      	cbz	r2, 8003f42 <_printf_common+0x26>
 8003f3e:	3301      	adds	r3, #1
 8003f40:	6033      	str	r3, [r6, #0]
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	0699      	lsls	r1, r3, #26
 8003f46:	bf42      	ittt	mi
 8003f48:	6833      	ldrmi	r3, [r6, #0]
 8003f4a:	3302      	addmi	r3, #2
 8003f4c:	6033      	strmi	r3, [r6, #0]
 8003f4e:	6825      	ldr	r5, [r4, #0]
 8003f50:	f015 0506 	ands.w	r5, r5, #6
 8003f54:	d106      	bne.n	8003f64 <_printf_common+0x48>
 8003f56:	f104 0a19 	add.w	sl, r4, #25
 8003f5a:	68e3      	ldr	r3, [r4, #12]
 8003f5c:	6832      	ldr	r2, [r6, #0]
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	42ab      	cmp	r3, r5
 8003f62:	dc26      	bgt.n	8003fb2 <_printf_common+0x96>
 8003f64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f68:	6822      	ldr	r2, [r4, #0]
 8003f6a:	3b00      	subs	r3, #0
 8003f6c:	bf18      	it	ne
 8003f6e:	2301      	movne	r3, #1
 8003f70:	0692      	lsls	r2, r2, #26
 8003f72:	d42b      	bmi.n	8003fcc <_printf_common+0xb0>
 8003f74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f78:	4641      	mov	r1, r8
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	47c8      	blx	r9
 8003f7e:	3001      	adds	r0, #1
 8003f80:	d01e      	beq.n	8003fc0 <_printf_common+0xa4>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	6922      	ldr	r2, [r4, #16]
 8003f86:	f003 0306 	and.w	r3, r3, #6
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	bf02      	ittt	eq
 8003f8e:	68e5      	ldreq	r5, [r4, #12]
 8003f90:	6833      	ldreq	r3, [r6, #0]
 8003f92:	1aed      	subeq	r5, r5, r3
 8003f94:	68a3      	ldr	r3, [r4, #8]
 8003f96:	bf0c      	ite	eq
 8003f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f9c:	2500      	movne	r5, #0
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	bfc4      	itt	gt
 8003fa2:	1a9b      	subgt	r3, r3, r2
 8003fa4:	18ed      	addgt	r5, r5, r3
 8003fa6:	2600      	movs	r6, #0
 8003fa8:	341a      	adds	r4, #26
 8003faa:	42b5      	cmp	r5, r6
 8003fac:	d11a      	bne.n	8003fe4 <_printf_common+0xc8>
 8003fae:	2000      	movs	r0, #0
 8003fb0:	e008      	b.n	8003fc4 <_printf_common+0xa8>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	4652      	mov	r2, sl
 8003fb6:	4641      	mov	r1, r8
 8003fb8:	4638      	mov	r0, r7
 8003fba:	47c8      	blx	r9
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	d103      	bne.n	8003fc8 <_printf_common+0xac>
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc8:	3501      	adds	r5, #1
 8003fca:	e7c6      	b.n	8003f5a <_printf_common+0x3e>
 8003fcc:	18e1      	adds	r1, r4, r3
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	2030      	movs	r0, #48	@ 0x30
 8003fd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fd6:	4422      	add	r2, r4
 8003fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fe0:	3302      	adds	r3, #2
 8003fe2:	e7c7      	b.n	8003f74 <_printf_common+0x58>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	4641      	mov	r1, r8
 8003fea:	4638      	mov	r0, r7
 8003fec:	47c8      	blx	r9
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d0e6      	beq.n	8003fc0 <_printf_common+0xa4>
 8003ff2:	3601      	adds	r6, #1
 8003ff4:	e7d9      	b.n	8003faa <_printf_common+0x8e>
	...

08003ff8 <_printf_i>:
 8003ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ffc:	7e0f      	ldrb	r7, [r1, #24]
 8003ffe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004000:	2f78      	cmp	r7, #120	@ 0x78
 8004002:	4691      	mov	r9, r2
 8004004:	4680      	mov	r8, r0
 8004006:	460c      	mov	r4, r1
 8004008:	469a      	mov	sl, r3
 800400a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800400e:	d807      	bhi.n	8004020 <_printf_i+0x28>
 8004010:	2f62      	cmp	r7, #98	@ 0x62
 8004012:	d80a      	bhi.n	800402a <_printf_i+0x32>
 8004014:	2f00      	cmp	r7, #0
 8004016:	f000 80d1 	beq.w	80041bc <_printf_i+0x1c4>
 800401a:	2f58      	cmp	r7, #88	@ 0x58
 800401c:	f000 80b8 	beq.w	8004190 <_printf_i+0x198>
 8004020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004024:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004028:	e03a      	b.n	80040a0 <_printf_i+0xa8>
 800402a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800402e:	2b15      	cmp	r3, #21
 8004030:	d8f6      	bhi.n	8004020 <_printf_i+0x28>
 8004032:	a101      	add	r1, pc, #4	@ (adr r1, 8004038 <_printf_i+0x40>)
 8004034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004038:	08004091 	.word	0x08004091
 800403c:	080040a5 	.word	0x080040a5
 8004040:	08004021 	.word	0x08004021
 8004044:	08004021 	.word	0x08004021
 8004048:	08004021 	.word	0x08004021
 800404c:	08004021 	.word	0x08004021
 8004050:	080040a5 	.word	0x080040a5
 8004054:	08004021 	.word	0x08004021
 8004058:	08004021 	.word	0x08004021
 800405c:	08004021 	.word	0x08004021
 8004060:	08004021 	.word	0x08004021
 8004064:	080041a3 	.word	0x080041a3
 8004068:	080040cf 	.word	0x080040cf
 800406c:	0800415d 	.word	0x0800415d
 8004070:	08004021 	.word	0x08004021
 8004074:	08004021 	.word	0x08004021
 8004078:	080041c5 	.word	0x080041c5
 800407c:	08004021 	.word	0x08004021
 8004080:	080040cf 	.word	0x080040cf
 8004084:	08004021 	.word	0x08004021
 8004088:	08004021 	.word	0x08004021
 800408c:	08004165 	.word	0x08004165
 8004090:	6833      	ldr	r3, [r6, #0]
 8004092:	1d1a      	adds	r2, r3, #4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6032      	str	r2, [r6, #0]
 8004098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800409c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040a0:	2301      	movs	r3, #1
 80040a2:	e09c      	b.n	80041de <_printf_i+0x1e6>
 80040a4:	6833      	ldr	r3, [r6, #0]
 80040a6:	6820      	ldr	r0, [r4, #0]
 80040a8:	1d19      	adds	r1, r3, #4
 80040aa:	6031      	str	r1, [r6, #0]
 80040ac:	0606      	lsls	r6, r0, #24
 80040ae:	d501      	bpl.n	80040b4 <_printf_i+0xbc>
 80040b0:	681d      	ldr	r5, [r3, #0]
 80040b2:	e003      	b.n	80040bc <_printf_i+0xc4>
 80040b4:	0645      	lsls	r5, r0, #25
 80040b6:	d5fb      	bpl.n	80040b0 <_printf_i+0xb8>
 80040b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040bc:	2d00      	cmp	r5, #0
 80040be:	da03      	bge.n	80040c8 <_printf_i+0xd0>
 80040c0:	232d      	movs	r3, #45	@ 0x2d
 80040c2:	426d      	negs	r5, r5
 80040c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040c8:	4858      	ldr	r0, [pc, #352]	@ (800422c <_printf_i+0x234>)
 80040ca:	230a      	movs	r3, #10
 80040cc:	e011      	b.n	80040f2 <_printf_i+0xfa>
 80040ce:	6821      	ldr	r1, [r4, #0]
 80040d0:	6833      	ldr	r3, [r6, #0]
 80040d2:	0608      	lsls	r0, r1, #24
 80040d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80040d8:	d402      	bmi.n	80040e0 <_printf_i+0xe8>
 80040da:	0649      	lsls	r1, r1, #25
 80040dc:	bf48      	it	mi
 80040de:	b2ad      	uxthmi	r5, r5
 80040e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80040e2:	4852      	ldr	r0, [pc, #328]	@ (800422c <_printf_i+0x234>)
 80040e4:	6033      	str	r3, [r6, #0]
 80040e6:	bf14      	ite	ne
 80040e8:	230a      	movne	r3, #10
 80040ea:	2308      	moveq	r3, #8
 80040ec:	2100      	movs	r1, #0
 80040ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040f2:	6866      	ldr	r6, [r4, #4]
 80040f4:	60a6      	str	r6, [r4, #8]
 80040f6:	2e00      	cmp	r6, #0
 80040f8:	db05      	blt.n	8004106 <_printf_i+0x10e>
 80040fa:	6821      	ldr	r1, [r4, #0]
 80040fc:	432e      	orrs	r6, r5
 80040fe:	f021 0104 	bic.w	r1, r1, #4
 8004102:	6021      	str	r1, [r4, #0]
 8004104:	d04b      	beq.n	800419e <_printf_i+0x1a6>
 8004106:	4616      	mov	r6, r2
 8004108:	fbb5 f1f3 	udiv	r1, r5, r3
 800410c:	fb03 5711 	mls	r7, r3, r1, r5
 8004110:	5dc7      	ldrb	r7, [r0, r7]
 8004112:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004116:	462f      	mov	r7, r5
 8004118:	42bb      	cmp	r3, r7
 800411a:	460d      	mov	r5, r1
 800411c:	d9f4      	bls.n	8004108 <_printf_i+0x110>
 800411e:	2b08      	cmp	r3, #8
 8004120:	d10b      	bne.n	800413a <_printf_i+0x142>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	07df      	lsls	r7, r3, #31
 8004126:	d508      	bpl.n	800413a <_printf_i+0x142>
 8004128:	6923      	ldr	r3, [r4, #16]
 800412a:	6861      	ldr	r1, [r4, #4]
 800412c:	4299      	cmp	r1, r3
 800412e:	bfde      	ittt	le
 8004130:	2330      	movle	r3, #48	@ 0x30
 8004132:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004136:	f106 36ff 	addle.w	r6, r6, #4294967295
 800413a:	1b92      	subs	r2, r2, r6
 800413c:	6122      	str	r2, [r4, #16]
 800413e:	f8cd a000 	str.w	sl, [sp]
 8004142:	464b      	mov	r3, r9
 8004144:	aa03      	add	r2, sp, #12
 8004146:	4621      	mov	r1, r4
 8004148:	4640      	mov	r0, r8
 800414a:	f7ff fee7 	bl	8003f1c <_printf_common>
 800414e:	3001      	adds	r0, #1
 8004150:	d14a      	bne.n	80041e8 <_printf_i+0x1f0>
 8004152:	f04f 30ff 	mov.w	r0, #4294967295
 8004156:	b004      	add	sp, #16
 8004158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	f043 0320 	orr.w	r3, r3, #32
 8004162:	6023      	str	r3, [r4, #0]
 8004164:	4832      	ldr	r0, [pc, #200]	@ (8004230 <_printf_i+0x238>)
 8004166:	2778      	movs	r7, #120	@ 0x78
 8004168:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	6831      	ldr	r1, [r6, #0]
 8004170:	061f      	lsls	r7, r3, #24
 8004172:	f851 5b04 	ldr.w	r5, [r1], #4
 8004176:	d402      	bmi.n	800417e <_printf_i+0x186>
 8004178:	065f      	lsls	r7, r3, #25
 800417a:	bf48      	it	mi
 800417c:	b2ad      	uxthmi	r5, r5
 800417e:	6031      	str	r1, [r6, #0]
 8004180:	07d9      	lsls	r1, r3, #31
 8004182:	bf44      	itt	mi
 8004184:	f043 0320 	orrmi.w	r3, r3, #32
 8004188:	6023      	strmi	r3, [r4, #0]
 800418a:	b11d      	cbz	r5, 8004194 <_printf_i+0x19c>
 800418c:	2310      	movs	r3, #16
 800418e:	e7ad      	b.n	80040ec <_printf_i+0xf4>
 8004190:	4826      	ldr	r0, [pc, #152]	@ (800422c <_printf_i+0x234>)
 8004192:	e7e9      	b.n	8004168 <_printf_i+0x170>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	f023 0320 	bic.w	r3, r3, #32
 800419a:	6023      	str	r3, [r4, #0]
 800419c:	e7f6      	b.n	800418c <_printf_i+0x194>
 800419e:	4616      	mov	r6, r2
 80041a0:	e7bd      	b.n	800411e <_printf_i+0x126>
 80041a2:	6833      	ldr	r3, [r6, #0]
 80041a4:	6825      	ldr	r5, [r4, #0]
 80041a6:	6961      	ldr	r1, [r4, #20]
 80041a8:	1d18      	adds	r0, r3, #4
 80041aa:	6030      	str	r0, [r6, #0]
 80041ac:	062e      	lsls	r6, r5, #24
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	d501      	bpl.n	80041b6 <_printf_i+0x1be>
 80041b2:	6019      	str	r1, [r3, #0]
 80041b4:	e002      	b.n	80041bc <_printf_i+0x1c4>
 80041b6:	0668      	lsls	r0, r5, #25
 80041b8:	d5fb      	bpl.n	80041b2 <_printf_i+0x1ba>
 80041ba:	8019      	strh	r1, [r3, #0]
 80041bc:	2300      	movs	r3, #0
 80041be:	6123      	str	r3, [r4, #16]
 80041c0:	4616      	mov	r6, r2
 80041c2:	e7bc      	b.n	800413e <_printf_i+0x146>
 80041c4:	6833      	ldr	r3, [r6, #0]
 80041c6:	1d1a      	adds	r2, r3, #4
 80041c8:	6032      	str	r2, [r6, #0]
 80041ca:	681e      	ldr	r6, [r3, #0]
 80041cc:	6862      	ldr	r2, [r4, #4]
 80041ce:	2100      	movs	r1, #0
 80041d0:	4630      	mov	r0, r6
 80041d2:	f7fc f825 	bl	8000220 <memchr>
 80041d6:	b108      	cbz	r0, 80041dc <_printf_i+0x1e4>
 80041d8:	1b80      	subs	r0, r0, r6
 80041da:	6060      	str	r0, [r4, #4]
 80041dc:	6863      	ldr	r3, [r4, #4]
 80041de:	6123      	str	r3, [r4, #16]
 80041e0:	2300      	movs	r3, #0
 80041e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041e6:	e7aa      	b.n	800413e <_printf_i+0x146>
 80041e8:	6923      	ldr	r3, [r4, #16]
 80041ea:	4632      	mov	r2, r6
 80041ec:	4649      	mov	r1, r9
 80041ee:	4640      	mov	r0, r8
 80041f0:	47d0      	blx	sl
 80041f2:	3001      	adds	r0, #1
 80041f4:	d0ad      	beq.n	8004152 <_printf_i+0x15a>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	079b      	lsls	r3, r3, #30
 80041fa:	d413      	bmi.n	8004224 <_printf_i+0x22c>
 80041fc:	68e0      	ldr	r0, [r4, #12]
 80041fe:	9b03      	ldr	r3, [sp, #12]
 8004200:	4298      	cmp	r0, r3
 8004202:	bfb8      	it	lt
 8004204:	4618      	movlt	r0, r3
 8004206:	e7a6      	b.n	8004156 <_printf_i+0x15e>
 8004208:	2301      	movs	r3, #1
 800420a:	4632      	mov	r2, r6
 800420c:	4649      	mov	r1, r9
 800420e:	4640      	mov	r0, r8
 8004210:	47d0      	blx	sl
 8004212:	3001      	adds	r0, #1
 8004214:	d09d      	beq.n	8004152 <_printf_i+0x15a>
 8004216:	3501      	adds	r5, #1
 8004218:	68e3      	ldr	r3, [r4, #12]
 800421a:	9903      	ldr	r1, [sp, #12]
 800421c:	1a5b      	subs	r3, r3, r1
 800421e:	42ab      	cmp	r3, r5
 8004220:	dcf2      	bgt.n	8004208 <_printf_i+0x210>
 8004222:	e7eb      	b.n	80041fc <_printf_i+0x204>
 8004224:	2500      	movs	r5, #0
 8004226:	f104 0619 	add.w	r6, r4, #25
 800422a:	e7f5      	b.n	8004218 <_printf_i+0x220>
 800422c:	080043b1 	.word	0x080043b1
 8004230:	080043c2 	.word	0x080043c2

08004234 <memmove>:
 8004234:	4288      	cmp	r0, r1
 8004236:	b510      	push	{r4, lr}
 8004238:	eb01 0402 	add.w	r4, r1, r2
 800423c:	d902      	bls.n	8004244 <memmove+0x10>
 800423e:	4284      	cmp	r4, r0
 8004240:	4623      	mov	r3, r4
 8004242:	d807      	bhi.n	8004254 <memmove+0x20>
 8004244:	1e43      	subs	r3, r0, #1
 8004246:	42a1      	cmp	r1, r4
 8004248:	d008      	beq.n	800425c <memmove+0x28>
 800424a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800424e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004252:	e7f8      	b.n	8004246 <memmove+0x12>
 8004254:	4402      	add	r2, r0
 8004256:	4601      	mov	r1, r0
 8004258:	428a      	cmp	r2, r1
 800425a:	d100      	bne.n	800425e <memmove+0x2a>
 800425c:	bd10      	pop	{r4, pc}
 800425e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004266:	e7f7      	b.n	8004258 <memmove+0x24>

08004268 <_sbrk_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4d06      	ldr	r5, [pc, #24]	@ (8004284 <_sbrk_r+0x1c>)
 800426c:	2300      	movs	r3, #0
 800426e:	4604      	mov	r4, r0
 8004270:	4608      	mov	r0, r1
 8004272:	602b      	str	r3, [r5, #0]
 8004274:	f7fc fd92 	bl	8000d9c <_sbrk>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	d102      	bne.n	8004282 <_sbrk_r+0x1a>
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	b103      	cbz	r3, 8004282 <_sbrk_r+0x1a>
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	bd38      	pop	{r3, r4, r5, pc}
 8004284:	20000260 	.word	0x20000260

08004288 <memcpy>:
 8004288:	440a      	add	r2, r1
 800428a:	4291      	cmp	r1, r2
 800428c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004290:	d100      	bne.n	8004294 <memcpy+0xc>
 8004292:	4770      	bx	lr
 8004294:	b510      	push	{r4, lr}
 8004296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800429a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800429e:	4291      	cmp	r1, r2
 80042a0:	d1f9      	bne.n	8004296 <memcpy+0xe>
 80042a2:	bd10      	pop	{r4, pc}

080042a4 <_realloc_r>:
 80042a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a8:	4607      	mov	r7, r0
 80042aa:	4614      	mov	r4, r2
 80042ac:	460d      	mov	r5, r1
 80042ae:	b921      	cbnz	r1, 80042ba <_realloc_r+0x16>
 80042b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042b4:	4611      	mov	r1, r2
 80042b6:	f7ff bc4d 	b.w	8003b54 <_malloc_r>
 80042ba:	b92a      	cbnz	r2, 80042c8 <_realloc_r+0x24>
 80042bc:	f7ff fbde 	bl	8003a7c <_free_r>
 80042c0:	4625      	mov	r5, r4
 80042c2:	4628      	mov	r0, r5
 80042c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042c8:	f000 f81a 	bl	8004300 <_malloc_usable_size_r>
 80042cc:	4284      	cmp	r4, r0
 80042ce:	4606      	mov	r6, r0
 80042d0:	d802      	bhi.n	80042d8 <_realloc_r+0x34>
 80042d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042d6:	d8f4      	bhi.n	80042c2 <_realloc_r+0x1e>
 80042d8:	4621      	mov	r1, r4
 80042da:	4638      	mov	r0, r7
 80042dc:	f7ff fc3a 	bl	8003b54 <_malloc_r>
 80042e0:	4680      	mov	r8, r0
 80042e2:	b908      	cbnz	r0, 80042e8 <_realloc_r+0x44>
 80042e4:	4645      	mov	r5, r8
 80042e6:	e7ec      	b.n	80042c2 <_realloc_r+0x1e>
 80042e8:	42b4      	cmp	r4, r6
 80042ea:	4622      	mov	r2, r4
 80042ec:	4629      	mov	r1, r5
 80042ee:	bf28      	it	cs
 80042f0:	4632      	movcs	r2, r6
 80042f2:	f7ff ffc9 	bl	8004288 <memcpy>
 80042f6:	4629      	mov	r1, r5
 80042f8:	4638      	mov	r0, r7
 80042fa:	f7ff fbbf 	bl	8003a7c <_free_r>
 80042fe:	e7f1      	b.n	80042e4 <_realloc_r+0x40>

08004300 <_malloc_usable_size_r>:
 8004300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004304:	1f18      	subs	r0, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	bfbc      	itt	lt
 800430a:	580b      	ldrlt	r3, [r1, r0]
 800430c:	18c0      	addlt	r0, r0, r3
 800430e:	4770      	bx	lr

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr
