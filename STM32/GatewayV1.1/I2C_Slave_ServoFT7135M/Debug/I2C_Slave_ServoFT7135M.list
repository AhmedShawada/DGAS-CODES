
I2C_Slave_ServoFT7135M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e08  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005fd8  08005fd8  00006fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006058  08006058  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006058  08006058  00007058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006060  08006060  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006060  08006060  00007060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006064  08006064  00007064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006068  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000005c  080060c4  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080060c4  00008310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001048e  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e5  00000000  00000000  0001851a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  0001a700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c65  00000000  00000000  0001b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002259f  00000000  00000000  0001c305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001336e  00000000  00000000  0003e8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3928  00000000  00000000  00051c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012553a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004848  00000000  00000000  00125580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00129dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005fc0 	.word	0x08005fc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005fc0 	.word	0x08005fc0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fc62 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f826 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f964 	bl	80008c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 f942 	bl	8000884 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000600:	f000 f916 	bl	8000830 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000604:	f000 f88c 	bl	8000720 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000608:	f000 f8b8 	bl	800077c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Start PWM signal on Timer 2 Channel 2
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800060c:	2104      	movs	r1, #4
 800060e:	4808      	ldr	r0, [pc, #32]	@ (8000630 <main+0x44>)
 8000610:	f003 ffa8 	bl	8004564 <HAL_TIM_PWM_Start>

  // Start I2C reception in interrupt mode
  HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t*)&received_angle, 1);
 8000614:	2201      	movs	r2, #1
 8000616:	4907      	ldr	r1, [pc, #28]	@ (8000634 <main+0x48>)
 8000618:	4807      	ldr	r0, [pc, #28]	@ (8000638 <main+0x4c>)
 800061a:	f001 fc0d 	bl	8001e38 <HAL_I2C_Slave_Receive_IT>

    // Notify over UART that system is ready
  HAL_UART_Transmit(&huart2, (uint8_t *)"Waiting for angle...\r\n", 23, 100);
 800061e:	2364      	movs	r3, #100	@ 0x64
 8000620:	2217      	movs	r2, #23
 8000622:	4906      	ldr	r1, [pc, #24]	@ (800063c <main+0x50>)
 8000624:	4806      	ldr	r0, [pc, #24]	@ (8000640 <main+0x54>)
 8000626:	f004 fc6f 	bl	8004f08 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <main+0x3e>
 800062e:	bf00      	nop
 8000630:	2000012c 	.word	0x2000012c
 8000634:	200001bc 	.word	0x200001bc
 8000638:	20000078 	.word	0x20000078
 800063c:	08005fd8 	.word	0x08005fd8
 8000640:	20000174 	.word	0x20000174

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	@ 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 f836 	bl	80056c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b2a      	ldr	r3, [pc, #168]	@ (8000718 <SystemClock_Config+0xd4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a29      	ldr	r2, [pc, #164]	@ (8000718 <SystemClock_Config+0xd4>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <SystemClock_Config+0xd4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b24      	ldr	r3, [pc, #144]	@ (800071c <SystemClock_Config+0xd8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000690:	4a22      	ldr	r2, [pc, #136]	@ (800071c <SystemClock_Config+0xd8>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b20      	ldr	r3, [pc, #128]	@ (800071c <SystemClock_Config+0xd8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b8:	2310      	movs	r3, #16
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fc58 	bl	8003f88 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006de:	f000 f9d2 	bl	8000a86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 f8f8 	bl	80038f4 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800070a:	f000 f9bc 	bl	8000a86 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	@ 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000726:	4a13      	ldr	r2, [pc, #76]	@ (8000774 <MX_I2C1_Init+0x54>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_I2C1_Init+0x50>)
 800072c:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_I2C1_Init+0x58>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 16;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000738:	2210      	movs	r2, #16
 800073a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_I2C1_Init+0x50>)
 800073e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000742:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_I2C1_Init+0x50>)
 800075e:	f001 fa11 	bl	8001b84 <HAL_I2C_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 f98d 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000078 	.word	0x20000078
 8000774:	40005400 	.word	0x40005400
 8000778:	000186a0 	.word	0x000186a0

0800077c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	@ 0x28
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
 800079a:	615a      	str	r2, [r3, #20]
 800079c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800079e:	4b23      	ldr	r3, [pc, #140]	@ (800082c <MX_TIM2_Init+0xb0>)
 80007a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 80007a6:	4b21      	ldr	r3, [pc, #132]	@ (800082c <MX_TIM2_Init+0xb0>)
 80007a8:	2248      	movs	r2, #72	@ 0x48
 80007aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <MX_TIM2_Init+0xb0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80007b2:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <MX_TIM2_Init+0xb0>)
 80007b4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_TIM2_Init+0xb0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_TIM2_Init+0xb0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007c6:	4819      	ldr	r0, [pc, #100]	@ (800082c <MX_TIM2_Init+0xb0>)
 80007c8:	f003 fe7c 	bl	80044c4 <HAL_TIM_PWM_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007d2:	f000 f958 	bl	8000a86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4619      	mov	r1, r3
 80007e4:	4811      	ldr	r0, [pc, #68]	@ (800082c <MX_TIM2_Init+0xb0>)
 80007e6:	f004 fac3 	bl	8004d70 <HAL_TIMEx_MasterConfigSynchronization>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80007f0:	f000 f949 	bl	8000a86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f4:	2360      	movs	r3, #96	@ 0x60
 80007f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80007f8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80007fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2204      	movs	r2, #4
 800080a:	4619      	mov	r1, r3
 800080c:	4807      	ldr	r0, [pc, #28]	@ (800082c <MX_TIM2_Init+0xb0>)
 800080e:	f003 ff71 	bl	80046f4 <HAL_TIM_PWM_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000818:	f000 f935 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800081c:	4803      	ldr	r0, [pc, #12]	@ (800082c <MX_TIM2_Init+0xb0>)
 800081e:	f000 fa0b 	bl	8000c38 <HAL_TIM_MspPostInit>

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	@ 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000012c 	.word	0x2000012c

08000830 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <MX_USART2_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000868:	f004 fafe 	bl	8004e68 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 f908 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000174 	.word	0x20000174
 8000880:	40004400 	.word	0x40004400

08000884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_DMA_Init+0x3c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a0b      	ldr	r2, [pc, #44]	@ (80008c0 <MX_DMA_Init+0x3c>)
 8000894:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_DMA_Init+0x3c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	200b      	movs	r0, #11
 80008ac:	f000 fc51 	bl	8001152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008b0:	200b      	movs	r0, #11
 80008b2:	f000 fc6a 	bl	800118a <HAL_NVIC_EnableIRQ>

}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b2d      	ldr	r3, [pc, #180]	@ (8000994 <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000994 <MX_GPIO_Init+0xd0>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000994 <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a25      	ldr	r2, [pc, #148]	@ (8000994 <MX_GPIO_Init+0xd0>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b23      	ldr	r3, [pc, #140]	@ (8000994 <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a1e      	ldr	r2, [pc, #120]	@ (8000994 <MX_GPIO_Init+0xd0>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a17      	ldr	r2, [pc, #92]	@ (8000994 <MX_GPIO_Init+0xd0>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2120      	movs	r1, #32
 800094e:	4812      	ldr	r0, [pc, #72]	@ (8000998 <MX_GPIO_Init+0xd4>)
 8000950:	f001 f8e4 	bl	8001b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800095a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	480c      	ldr	r0, [pc, #48]	@ (800099c <MX_GPIO_Init+0xd8>)
 800096c:	f000 ff42 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000970:	2320      	movs	r3, #32
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4804      	ldr	r0, [pc, #16]	@ (8000998 <MX_GPIO_Init+0xd4>)
 8000988:	f000 ff34 	bl	80017f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	@ 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000
 800099c:	40020800 	.word	0x40020800

080009a0 <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b090      	sub	sp, #64	@ 0x40
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

	Servo_Angle(received_angle);
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <HAL_I2C_SlaveRxCpltCallback+0x5c>)
 80009aa:	f993 3000 	ldrsb.w	r3, [r3]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f850 	bl	8000a54 <Servo_Angle>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // لو متوصل على LD2
 80009b4:	2120      	movs	r1, #32
 80009b6:	4812      	ldr	r0, [pc, #72]	@ (8000a00 <HAL_I2C_SlaveRxCpltCallback+0x60>)
 80009b8:	f001 f8c9 	bl	8001b4e <HAL_GPIO_TogglePin>
	// Send feedback via UART
	char msg[50];
	sprintf(msg, "Servo angle: %d\r\n", received_angle);
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <HAL_I2C_SlaveRxCpltCallback+0x5c>)
 80009be:	f993 3000 	ldrsb.w	r3, [r3]
 80009c2:	461a      	mov	r2, r3
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	490e      	ldr	r1, [pc, #56]	@ (8000a04 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f004 fe58 	bl	8005680 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 100);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fc1b 	bl	8000210 <strlen>
 80009da:	4603      	mov	r3, r0
 80009dc:	b29a      	uxth	r2, r3
 80009de:	f107 010c 	add.w	r1, r7, #12
 80009e2:	2364      	movs	r3, #100	@ 0x64
 80009e4:	4808      	ldr	r0, [pc, #32]	@ (8000a08 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80009e6:	f004 fa8f 	bl	8004f08 <HAL_UART_Transmit>

	// Re-enable I2C reception for next angle
	HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t*)&received_angle, 1);
 80009ea:	2201      	movs	r2, #1
 80009ec:	4903      	ldr	r1, [pc, #12]	@ (80009fc <HAL_I2C_SlaveRxCpltCallback+0x5c>)
 80009ee:	4807      	ldr	r0, [pc, #28]	@ (8000a0c <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80009f0:	f001 fa22 	bl	8001e38 <HAL_I2C_Slave_Receive_IT>
}
 80009f4:	bf00      	nop
 80009f6:	3740      	adds	r7, #64	@ 0x40
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200001bc 	.word	0x200001bc
 8000a00:	40020000 	.word	0x40020000
 8000a04:	08005ff0 	.word	0x08005ff0
 8000a08:	20000174 	.word	0x20000174
 8000a0c:	20000078 	.word	0x20000078

08000a10 <Servo_Set_Angle>:

void Servo_Set_Angle(int8_t angle)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
    uint16_t pulse = 1000 + ((uint32_t)angle * 1000) / 180; //1000
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a22:	fb02 f303 	mul.w	r3, r2, r3
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	4a08      	ldr	r2, [pc, #32]	@ (8000a4c <Servo_Set_Angle+0x3c>)
 8000a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000a36:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <Servo_Set_Angle+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	89fa      	ldrh	r2, [r7, #14]
 8000a3e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	16c16c17 	.word	0x16c16c17
 8000a50:	2000012c 	.word	0x2000012c

08000a54 <Servo_Angle>:


void Servo_Angle(int8_t angle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	if((angle >= -90) && (angle <= 90))
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 8000a66:	db0a      	blt.n	8000a7e <Servo_Angle+0x2a>
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b5a      	cmp	r3, #90	@ 0x5a
 8000a6e:	dc06      	bgt.n	8000a7e <Servo_Angle+0x2a>
	{
		Servo_Set_Angle((angle+90));
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	335a      	adds	r3, #90	@ 0x5a
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ffc9 	bl	8000a10 <Servo_Set_Angle>
	}
	else {}

}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8a:	b672      	cpsid	i
}
 8000a8c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8e:	bf00      	nop
 8000a90:	e7fd      	b.n	8000a8e <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a08      	ldr	r2, [pc, #32]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad2:	2007      	movs	r0, #7
 8000ad4:	f000 fb32 	bl	800113c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	@ 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a38      	ldr	r2, [pc, #224]	@ (8000be4 <HAL_I2C_MspInit+0x100>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d16a      	bne.n	8000bdc <HAL_I2C_MspInit+0xf8>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b37      	ldr	r3, [pc, #220]	@ (8000be8 <HAL_I2C_MspInit+0x104>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a36      	ldr	r2, [pc, #216]	@ (8000be8 <HAL_I2C_MspInit+0x104>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b34      	ldr	r3, [pc, #208]	@ (8000be8 <HAL_I2C_MspInit+0x104>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b28:	2312      	movs	r3, #18
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b34:	2304      	movs	r3, #4
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	482b      	ldr	r0, [pc, #172]	@ (8000bec <HAL_I2C_MspInit+0x108>)
 8000b40:	f000 fe58 	bl	80017f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <HAL_I2C_MspInit+0x104>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a26      	ldr	r2, [pc, #152]	@ (8000be8 <HAL_I2C_MspInit+0x104>)
 8000b4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b54:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <HAL_I2C_MspInit+0x104>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000b60:	4b23      	ldr	r3, [pc, #140]	@ (8000bf0 <HAL_I2C_MspInit+0x10c>)
 8000b62:	4a24      	ldr	r2, [pc, #144]	@ (8000bf4 <HAL_I2C_MspInit+0x110>)
 8000b64:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000b66:	4b22      	ldr	r3, [pc, #136]	@ (8000bf0 <HAL_I2C_MspInit+0x10c>)
 8000b68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b6c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <HAL_I2C_MspInit+0x10c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b74:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <HAL_I2C_MspInit+0x10c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <HAL_I2C_MspInit+0x10c>)
 8000b7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b80:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <HAL_I2C_MspInit+0x10c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b88:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_I2C_MspInit+0x10c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <HAL_I2C_MspInit+0x10c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b94:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <HAL_I2C_MspInit+0x10c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_I2C_MspInit+0x10c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000ba0:	4813      	ldr	r0, [pc, #76]	@ (8000bf0 <HAL_I2C_MspInit+0x10c>)
 8000ba2:	f000 fb0d 	bl	80011c0 <HAL_DMA_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000bac:	f7ff ff6b 	bl	8000a86 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf0 <HAL_I2C_MspInit+0x10c>)
 8000bb4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf0 <HAL_I2C_MspInit+0x10c>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	201f      	movs	r0, #31
 8000bc2:	f000 fac6 	bl	8001152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bc6:	201f      	movs	r0, #31
 8000bc8:	f000 fadf 	bl	800118a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2020      	movs	r0, #32
 8000bd2:	f000 fabe 	bl	8001152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000bd6:	2020      	movs	r0, #32
 8000bd8:	f000 fad7 	bl	800118a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	@ 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40005400 	.word	0x40005400
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	200000cc 	.word	0x200000cc
 8000bf4:	40026010 	.word	0x40026010

08000bf8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c08:	d10d      	bne.n	8000c26 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	@ (8000c34 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800

08000c38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c58:	d11d      	bne.n	8000c96 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <HAL_TIM_MspPostInit+0x68>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca0 <HAL_TIM_MspPostInit+0x68>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <HAL_TIM_MspPostInit+0x68>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c76:	2302      	movs	r3, #2
 8000c78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <HAL_TIM_MspPostInit+0x6c>)
 8000c92:	f000 fdaf 	bl	80017f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3720      	adds	r7, #32
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	@ 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a19      	ldr	r2, [pc, #100]	@ (8000d2c <HAL_UART_MspInit+0x84>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d12b      	bne.n	8000d22 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <HAL_UART_MspInit+0x88>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	4a17      	ldr	r2, [pc, #92]	@ (8000d30 <HAL_UART_MspInit+0x88>)
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <HAL_UART_MspInit+0x88>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <HAL_UART_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a10      	ldr	r2, [pc, #64]	@ (8000d30 <HAL_UART_MspInit+0x88>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <HAL_UART_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d02:	230c      	movs	r3, #12
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d12:	2307      	movs	r3, #7
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <HAL_UART_MspInit+0x8c>)
 8000d1e:	f000 fd69 	bl	80017f4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	@ 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40004400 	.word	0x40004400
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <NMI_Handler+0x4>

08000d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <MemManage_Handler+0x4>

08000d50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8e:	f000 f8e5 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000d9c:	4802      	ldr	r0, [pc, #8]	@ (8000da8 <DMA1_Stream0_IRQHandler+0x10>)
 8000d9e:	f000 fadf 	bl	8001360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000cc 	.word	0x200000cc

08000dac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000db0:	4802      	ldr	r0, [pc, #8]	@ (8000dbc <I2C1_EV_IRQHandler+0x10>)
 8000db2:	f001 f8b1 	bl	8001f18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000078 	.word	0x20000078

08000dc0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <I2C1_ER_IRQHandler+0x10>)
 8000dc6:	f001 fa18 	bl	80021fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000078 	.word	0x20000078

08000dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ddc:	4a14      	ldr	r2, [pc, #80]	@ (8000e30 <_sbrk+0x5c>)
 8000dde:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <_sbrk+0x60>)
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df0:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <_sbrk+0x64>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <_sbrk+0x68>)
 8000df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d207      	bcs.n	8000e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e04:	f004 fc66 	bl	80056d4 <__errno>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	e009      	b.n	8000e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <_sbrk+0x64>)
 8000e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20020000 	.word	0x20020000
 8000e34:	00000400 	.word	0x00000400
 8000e38:	200001c0 	.word	0x200001c0
 8000e3c:	20000310 	.word	0x20000310

08000e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <SystemInit+0x20>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e4a:	4a05      	ldr	r2, [pc, #20]	@ (8000e60 <SystemInit+0x20>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e68:	f7ff ffea 	bl	8000e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e6e:	490d      	ldr	r1, [pc, #52]	@ (8000ea4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e84:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f004 fc25 	bl	80056e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e96:	f7ff fba9 	bl	80005ec <main>
  bx  lr    
 8000e9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ea8:	08006068 	.word	0x08006068
  ldr r2, =_sbss
 8000eac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000eb0:	20000310 	.word	0x20000310

08000eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	@ (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f92b 	bl	800113c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f808 	bl	8000efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f7ff fdd2 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f943 	bl	80011a6 <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 f90b 	bl	8001152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	@ (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000004 	.word	0x20000004

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	200001c4 	.word	0x200001c4

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	@ (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	200001c4 	.word	0x200001c4

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fce:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	60d3      	str	r3, [r2, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db0b      	blt.n	800102a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f003 021f 	and.w	r2, r3, #31
 8001018:	4907      	ldr	r1, [pc, #28]	@ (8001038 <__NVIC_EnableIRQ+0x38>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	095b      	lsrs	r3, r3, #5
 8001020:	2001      	movs	r0, #1
 8001022:	fa00 f202 	lsl.w	r2, r0, r2
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100

0800103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	db0a      	blt.n	8001066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	490c      	ldr	r1, [pc, #48]	@ (8001088 <__NVIC_SetPriority+0x4c>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	440b      	add	r3, r1
 8001060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001064:	e00a      	b.n	800107c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4908      	ldr	r1, [pc, #32]	@ (800108c <__NVIC_SetPriority+0x50>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	3b04      	subs	r3, #4
 8001074:	0112      	lsls	r2, r2, #4
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	440b      	add	r3, r1
 800107a:	761a      	strb	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	@ 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43da      	mvns	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	4313      	orrs	r3, r2
         );
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3724      	adds	r7, #36	@ 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001108:	d301      	bcc.n	800110e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110a:	2301      	movs	r3, #1
 800110c:	e00f      	b.n	800112e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110e:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <SysTick_Config+0x40>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001116:	210f      	movs	r1, #15
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f7ff ff8e 	bl	800103c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <SysTick_Config+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001126:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <SysTick_Config+0x40>)
 8001128:	2207      	movs	r2, #7
 800112a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	e000e010 	.word	0xe000e010

0800113c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff29 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff3e 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff8e 	bl	8001090 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5d 	bl	800103c <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff31 	bl	8001000 <__NVIC_EnableIRQ>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ffa2 	bl	80010f8 <SysTick_Config>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff feda 	bl	8000f84 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e099      	b.n	8001310 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0201 	bic.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011fc:	e00f      	b.n	800121e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011fe:	f7ff fec1 	bl	8000f84 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b05      	cmp	r3, #5
 800120a:	d908      	bls.n	800121e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2220      	movs	r2, #32
 8001210:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2203      	movs	r2, #3
 8001216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e078      	b.n	8001310 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1e8      	bne.n	80011fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	4b38      	ldr	r3, [pc, #224]	@ (8001318 <HAL_DMA_Init+0x158>)
 8001238:	4013      	ands	r3, r2
 800123a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800124a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4313      	orrs	r3, r2
 800126e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001274:	2b04      	cmp	r3, #4
 8001276:	d107      	bne.n	8001288 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001280:	4313      	orrs	r3, r2
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4313      	orrs	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f023 0307 	bic.w	r3, r3, #7
 800129e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d117      	bne.n	80012e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00e      	beq.n	80012e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 fa19 	bl	80016fc <DMA_CheckFifoParam>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d008      	beq.n	80012e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2240      	movs	r2, #64	@ 0x40
 80012d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80012de:	2301      	movs	r3, #1
 80012e0:	e016      	b.n	8001310 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f9d0 	bl	8001690 <DMA_CalcBaseAndBitshift>
 80012f0:	4603      	mov	r3, r0
 80012f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f8:	223f      	movs	r2, #63	@ 0x3f
 80012fa:	409a      	lsls	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	f010803f 	.word	0xf010803f

0800131c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d004      	beq.n	800133a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2280      	movs	r2, #128	@ 0x80
 8001334:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00c      	b.n	8001354 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2205      	movs	r2, #5
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800136c:	4b8e      	ldr	r3, [pc, #568]	@ (80015a8 <HAL_DMA_IRQHandler+0x248>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a8e      	ldr	r2, [pc, #568]	@ (80015ac <HAL_DMA_IRQHandler+0x24c>)
 8001372:	fba2 2303 	umull	r2, r3, r2, r3
 8001376:	0a9b      	lsrs	r3, r3, #10
 8001378:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800138a:	2208      	movs	r2, #8
 800138c:	409a      	lsls	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d01a      	beq.n	80013cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d013      	beq.n	80013cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0204 	bic.w	r2, r2, #4
 80013b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b8:	2208      	movs	r2, #8
 80013ba:	409a      	lsls	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013d0:	2201      	movs	r2, #1
 80013d2:	409a      	lsls	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d012      	beq.n	8001402 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ee:	2201      	movs	r2, #1
 80013f0:	409a      	lsls	r2, r3
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013fa:	f043 0202 	orr.w	r2, r3, #2
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001406:	2204      	movs	r2, #4
 8001408:	409a      	lsls	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4013      	ands	r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d012      	beq.n	8001438 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00b      	beq.n	8001438 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001424:	2204      	movs	r2, #4
 8001426:	409a      	lsls	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001430:	f043 0204 	orr.w	r2, r3, #4
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800143c:	2210      	movs	r2, #16
 800143e:	409a      	lsls	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d043      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d03c      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145a:	2210      	movs	r2, #16
 800145c:	409a      	lsls	r2, r3
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d018      	beq.n	80014a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d108      	bne.n	8001490 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	2b00      	cmp	r3, #0
 8001484:	d024      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	4798      	blx	r3
 800148e:	e01f      	b.n	80014d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01b      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4798      	blx	r3
 80014a0:	e016      	b.n	80014d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d107      	bne.n	80014c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0208 	bic.w	r2, r2, #8
 80014be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d4:	2220      	movs	r2, #32
 80014d6:	409a      	lsls	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 808f 	beq.w	8001600 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8087 	beq.w	8001600 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f6:	2220      	movs	r2, #32
 80014f8:	409a      	lsls	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b05      	cmp	r3, #5
 8001508:	d136      	bne.n	8001578 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0216 	bic.w	r2, r2, #22
 8001518:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	695a      	ldr	r2, [r3, #20]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001528:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	2b00      	cmp	r3, #0
 8001530:	d103      	bne.n	800153a <HAL_DMA_IRQHandler+0x1da>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001536:	2b00      	cmp	r3, #0
 8001538:	d007      	beq.n	800154a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0208 	bic.w	r2, r2, #8
 8001548:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800154e:	223f      	movs	r2, #63	@ 0x3f
 8001550:	409a      	lsls	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800156a:	2b00      	cmp	r3, #0
 800156c:	d07e      	beq.n	800166c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4798      	blx	r3
        }
        return;
 8001576:	e079      	b.n	800166c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d01d      	beq.n	80015c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10d      	bne.n	80015b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001598:	2b00      	cmp	r3, #0
 800159a:	d031      	beq.n	8001600 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	4798      	blx	r3
 80015a4:	e02c      	b.n	8001600 <HAL_DMA_IRQHandler+0x2a0>
 80015a6:	bf00      	nop
 80015a8:	20000000 	.word	0x20000000
 80015ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d023      	beq.n	8001600 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	4798      	blx	r3
 80015c0:	e01e      	b.n	8001600 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10f      	bne.n	80015f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0210 	bic.w	r2, r2, #16
 80015de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001604:	2b00      	cmp	r3, #0
 8001606:	d032      	beq.n	800166e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d022      	beq.n	800165a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2205      	movs	r2, #5
 8001618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0201 	bic.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	3301      	adds	r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	429a      	cmp	r2, r3
 8001636:	d307      	bcc.n	8001648 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f2      	bne.n	800162c <HAL_DMA_IRQHandler+0x2cc>
 8001646:	e000      	b.n	800164a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001648:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	4798      	blx	r3
 800166a:	e000      	b.n	800166e <HAL_DMA_IRQHandler+0x30e>
        return;
 800166c:	bf00      	nop
    }
  }
}
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001682:	b2db      	uxtb	r3, r3
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	3b10      	subs	r3, #16
 80016a0:	4a14      	ldr	r2, [pc, #80]	@ (80016f4 <DMA_CalcBaseAndBitshift+0x64>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016aa:	4a13      	ldr	r2, [pc, #76]	@ (80016f8 <DMA_CalcBaseAndBitshift+0x68>)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d909      	bls.n	80016d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80016c6:	f023 0303 	bic.w	r3, r3, #3
 80016ca:	1d1a      	adds	r2, r3, #4
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80016d0:	e007      	b.n	80016e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80016da:	f023 0303 	bic.w	r3, r3, #3
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	aaaaaaab 	.word	0xaaaaaaab
 80016f8:	0800601c 	.word	0x0800601c

080016fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d11f      	bne.n	8001756 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d856      	bhi.n	80017ca <DMA_CheckFifoParam+0xce>
 800171c:	a201      	add	r2, pc, #4	@ (adr r2, 8001724 <DMA_CheckFifoParam+0x28>)
 800171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001722:	bf00      	nop
 8001724:	08001735 	.word	0x08001735
 8001728:	08001747 	.word	0x08001747
 800172c:	08001735 	.word	0x08001735
 8001730:	080017cb 	.word	0x080017cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d046      	beq.n	80017ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001744:	e043      	b.n	80017ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800174e:	d140      	bne.n	80017d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001754:	e03d      	b.n	80017d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800175e:	d121      	bne.n	80017a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d837      	bhi.n	80017d6 <DMA_CheckFifoParam+0xda>
 8001766:	a201      	add	r2, pc, #4	@ (adr r2, 800176c <DMA_CheckFifoParam+0x70>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	0800177d 	.word	0x0800177d
 8001770:	08001783 	.word	0x08001783
 8001774:	0800177d 	.word	0x0800177d
 8001778:	08001795 	.word	0x08001795
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
      break;
 8001780:	e030      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001786:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d025      	beq.n	80017da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001792:	e022      	b.n	80017da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001798:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800179c:	d11f      	bne.n	80017de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017a2:	e01c      	b.n	80017de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d903      	bls.n	80017b2 <DMA_CheckFifoParam+0xb6>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d003      	beq.n	80017b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017b0:	e018      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
      break;
 80017b6:	e015      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00e      	beq.n	80017e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
      break;
 80017c8:	e00b      	b.n	80017e2 <DMA_CheckFifoParam+0xe6>
      break;
 80017ca:	bf00      	nop
 80017cc:	e00a      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017ce:	bf00      	nop
 80017d0:	e008      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017d2:	bf00      	nop
 80017d4:	e006      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017d6:	bf00      	nop
 80017d8:	e004      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017da:	bf00      	nop
 80017dc:	e002      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80017de:	bf00      	nop
 80017e0:	e000      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017e2:	bf00      	nop
    }
  } 
  
  return status; 
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop

080017f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	@ 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	e165      	b.n	8001adc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	429a      	cmp	r2, r3
 800182a:	f040 8154 	bne.w	8001ad6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d005      	beq.n	8001846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001842:	2b02      	cmp	r3, #2
 8001844:	d130      	bne.n	80018a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 0201 	and.w	r2, r3, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d017      	beq.n	80018e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d123      	bne.n	8001938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	08da      	lsrs	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3208      	adds	r2, #8
 80018f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	08da      	lsrs	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3208      	adds	r2, #8
 8001932:	69b9      	ldr	r1, [r7, #24]
 8001934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0203 	and.w	r2, r3, #3
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80ae 	beq.w	8001ad6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b5d      	ldr	r3, [pc, #372]	@ (8001af4 <HAL_GPIO_Init+0x300>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	4a5c      	ldr	r2, [pc, #368]	@ (8001af4 <HAL_GPIO_Init+0x300>)
 8001984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001988:	6453      	str	r3, [r2, #68]	@ 0x44
 800198a:	4b5a      	ldr	r3, [pc, #360]	@ (8001af4 <HAL_GPIO_Init+0x300>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001996:	4a58      	ldr	r2, [pc, #352]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4f      	ldr	r2, [pc, #316]	@ (8001afc <HAL_GPIO_Init+0x308>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d025      	beq.n	8001a0e <HAL_GPIO_Init+0x21a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001b00 <HAL_GPIO_Init+0x30c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d01f      	beq.n	8001a0a <HAL_GPIO_Init+0x216>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001b04 <HAL_GPIO_Init+0x310>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d019      	beq.n	8001a06 <HAL_GPIO_Init+0x212>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001b08 <HAL_GPIO_Init+0x314>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0x20e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4b      	ldr	r2, [pc, #300]	@ (8001b0c <HAL_GPIO_Init+0x318>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00d      	beq.n	80019fe <HAL_GPIO_Init+0x20a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001b10 <HAL_GPIO_Init+0x31c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d007      	beq.n	80019fa <HAL_GPIO_Init+0x206>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a49      	ldr	r2, [pc, #292]	@ (8001b14 <HAL_GPIO_Init+0x320>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d101      	bne.n	80019f6 <HAL_GPIO_Init+0x202>
 80019f2:	2306      	movs	r3, #6
 80019f4:	e00c      	b.n	8001a10 <HAL_GPIO_Init+0x21c>
 80019f6:	2307      	movs	r3, #7
 80019f8:	e00a      	b.n	8001a10 <HAL_GPIO_Init+0x21c>
 80019fa:	2305      	movs	r3, #5
 80019fc:	e008      	b.n	8001a10 <HAL_GPIO_Init+0x21c>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x21c>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e004      	b.n	8001a10 <HAL_GPIO_Init+0x21c>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_Init+0x21c>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x21c>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f002 0203 	and.w	r2, r2, #3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a20:	4935      	ldr	r1, [pc, #212]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a52:	4a31      	ldr	r2, [pc, #196]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a58:	4b2f      	ldr	r3, [pc, #188]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a7c:	4a26      	ldr	r2, [pc, #152]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a82:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aac:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad0:	4a11      	ldr	r2, [pc, #68]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	f67f ae96 	bls.w	8001810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40021400 	.word	0x40021400
 8001b14:	40021800 	.word	0x40021800
 8001b18:	40013c00 	.word	0x40013c00

08001b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b2c:	787b      	ldrb	r3, [r7, #1]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b32:	887a      	ldrh	r2, [r7, #2]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b38:	e003      	b.n	8001b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	041a      	lsls	r2, r3, #16
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	619a      	str	r2, [r3, #24]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b085      	sub	sp, #20
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	460b      	mov	r3, r1
 8001b58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b60:	887a      	ldrh	r2, [r7, #2]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4013      	ands	r3, r2
 8001b66:	041a      	lsls	r2, r3, #16
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	43d9      	mvns	r1, r3
 8001b6c:	887b      	ldrh	r3, [r7, #2]
 8001b6e:	400b      	ands	r3, r1
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e12b      	b.n	8001dee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe ff9a 	bl	8000ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2224      	movs	r2, #36	@ 0x24
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001be8:	f001 ff76 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8001bec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4a81      	ldr	r2, [pc, #516]	@ (8001df8 <HAL_I2C_Init+0x274>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d807      	bhi.n	8001c08 <HAL_I2C_Init+0x84>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4a80      	ldr	r2, [pc, #512]	@ (8001dfc <HAL_I2C_Init+0x278>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	bf94      	ite	ls
 8001c00:	2301      	movls	r3, #1
 8001c02:	2300      	movhi	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	e006      	b.n	8001c16 <HAL_I2C_Init+0x92>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4a7d      	ldr	r2, [pc, #500]	@ (8001e00 <HAL_I2C_Init+0x27c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	bf94      	ite	ls
 8001c10:	2301      	movls	r3, #1
 8001c12:	2300      	movhi	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0e7      	b.n	8001dee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4a78      	ldr	r2, [pc, #480]	@ (8001e04 <HAL_I2C_Init+0x280>)
 8001c22:	fba2 2303 	umull	r2, r3, r2, r3
 8001c26:	0c9b      	lsrs	r3, r3, #18
 8001c28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a6a      	ldr	r2, [pc, #424]	@ (8001df8 <HAL_I2C_Init+0x274>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d802      	bhi.n	8001c58 <HAL_I2C_Init+0xd4>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	3301      	adds	r3, #1
 8001c56:	e009      	b.n	8001c6c <HAL_I2C_Init+0xe8>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	4a69      	ldr	r2, [pc, #420]	@ (8001e08 <HAL_I2C_Init+0x284>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	099b      	lsrs	r3, r3, #6
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	495c      	ldr	r1, [pc, #368]	@ (8001df8 <HAL_I2C_Init+0x274>)
 8001c88:	428b      	cmp	r3, r1
 8001c8a:	d819      	bhi.n	8001cc0 <HAL_I2C_Init+0x13c>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1e59      	subs	r1, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c9a:	1c59      	adds	r1, r3, #1
 8001c9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ca0:	400b      	ands	r3, r1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00a      	beq.n	8001cbc <HAL_I2C_Init+0x138>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1e59      	subs	r1, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cba:	e051      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	e04f      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d111      	bne.n	8001cec <HAL_I2C_Init+0x168>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1e58      	subs	r0, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	440b      	add	r3, r1
 8001cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e012      	b.n	8001d12 <HAL_I2C_Init+0x18e>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1e58      	subs	r0, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	0099      	lsls	r1, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf0c      	ite	eq
 8001d0c:	2301      	moveq	r3, #1
 8001d0e:	2300      	movne	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Init+0x196>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e022      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10e      	bne.n	8001d40 <HAL_I2C_Init+0x1bc>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1e58      	subs	r0, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6859      	ldr	r1, [r3, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	440b      	add	r3, r1
 8001d30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d3e:	e00f      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1e58      	subs	r0, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	0099      	lsls	r1, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	6809      	ldr	r1, [r1, #0]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69da      	ldr	r2, [r3, #28]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6911      	ldr	r1, [r2, #16]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68d2      	ldr	r2, [r2, #12]
 8001d9a:	4311      	orrs	r1, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	000186a0 	.word	0x000186a0
 8001dfc:	001e847f 	.word	0x001e847f
 8001e00:	003d08ff 	.word	0x003d08ff
 8001e04:	431bde83 	.word	0x431bde83
 8001e08:	10624dd3 	.word	0x10624dd3

08001e0c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1e:	2b80      	cmp	r3, #128	@ 0x80
 8001e20:	d103      	bne.n	8001e2a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	d158      	bne.n	8001f04 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_I2C_Slave_Receive_IT+0x26>
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e051      	b.n	8001f06 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_I2C_Slave_Receive_IT+0x38>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e04a      	b.n	8001f06 <HAL_I2C_Slave_Receive_IT+0xce>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d007      	beq.n	8001e96 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ea4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2222      	movs	r2, #34	@ 0x22
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	88fa      	ldrh	r2, [r7, #6]
 8001ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8001f14 <HAL_I2C_Slave_Receive_IT+0xdc>)
 8001ed6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001efe:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e000      	b.n	8001f06 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
  }
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	ffff0000 	.word	0xffff0000

08001f18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f30:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f38:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f40:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	2b10      	cmp	r3, #16
 8001f46:	d003      	beq.n	8001f50 <HAL_I2C_EV_IRQHandler+0x38>
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	2b40      	cmp	r3, #64	@ 0x40
 8001f4c:	f040 80c1 	bne.w	80020d2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10d      	bne.n	8001f86 <HAL_I2C_EV_IRQHandler+0x6e>
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001f70:	d003      	beq.n	8001f7a <HAL_I2C_EV_IRQHandler+0x62>
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001f78:	d101      	bne.n	8001f7e <HAL_I2C_EV_IRQHandler+0x66>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_I2C_EV_IRQHandler+0x68>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	f000 8132 	beq.w	80021ea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00c      	beq.n	8001faa <HAL_I2C_EV_IRQHandler+0x92>
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	0a5b      	lsrs	r3, r3, #9
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f001 fc8d 	bl	80038bc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fd91 	bl	8002aca <I2C_Master_SB>
 8001fa8:	e092      	b.n	80020d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	08db      	lsrs	r3, r3, #3
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <HAL_I2C_EV_IRQHandler+0xb2>
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	0a5b      	lsrs	r3, r3, #9
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fe07 	bl	8002bd6 <I2C_Master_ADD10>
 8001fc8:	e082      	b.n	80020d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <HAL_I2C_EV_IRQHandler+0xd2>
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	0a5b      	lsrs	r3, r3, #9
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fe21 	bl	8002c2a <I2C_Master_ADDR>
 8001fe8:	e072      	b.n	80020d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d03b      	beq.n	800206e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002004:	f000 80f3 	beq.w	80021ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	09db      	lsrs	r3, r3, #7
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00f      	beq.n	8002034 <HAL_I2C_EV_IRQHandler+0x11c>
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	0a9b      	lsrs	r3, r3, #10
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <HAL_I2C_EV_IRQHandler+0x11c>
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d103      	bne.n	8002034 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f9e9 	bl	8002404 <I2C_MasterTransmit_TXE>
 8002032:	e04d      	b.n	80020d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80d6 	beq.w	80021ee <HAL_I2C_EV_IRQHandler+0x2d6>
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	0a5b      	lsrs	r3, r3, #9
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80cf 	beq.w	80021ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002050:	7bbb      	ldrb	r3, [r7, #14]
 8002052:	2b21      	cmp	r3, #33	@ 0x21
 8002054:	d103      	bne.n	800205e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fa70 	bl	800253c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800205c:	e0c7      	b.n	80021ee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b40      	cmp	r3, #64	@ 0x40
 8002062:	f040 80c4 	bne.w	80021ee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fade 	bl	8002628 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800206c:	e0bf      	b.n	80021ee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800207c:	f000 80b7 	beq.w	80021ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	099b      	lsrs	r3, r3, #6
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00f      	beq.n	80020ac <HAL_I2C_EV_IRQHandler+0x194>
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	0a9b      	lsrs	r3, r3, #10
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d009      	beq.n	80020ac <HAL_I2C_EV_IRQHandler+0x194>
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d103      	bne.n	80020ac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fb57 	bl	8002758 <I2C_MasterReceive_RXNE>
 80020aa:	e011      	b.n	80020d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 809a 	beq.w	80021ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	0a5b      	lsrs	r3, r3, #9
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8093 	beq.w	80021ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fc0d 	bl	80028e8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ce:	e08e      	b.n	80021ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80020d0:	e08d      	b.n	80021ee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	e007      	b.n	80020f4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d012      	beq.n	8002126 <HAL_I2C_EV_IRQHandler+0x20e>
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	0a5b      	lsrs	r3, r3, #9
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00c      	beq.n	8002126 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800211c:	69b9      	ldr	r1, [r7, #24]
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 ffd2 	bl	80030c8 <I2C_Slave_ADDR>
 8002124:	e066      	b.n	80021f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_I2C_EV_IRQHandler+0x22e>
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	0a5b      	lsrs	r3, r3, #9
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f001 f80c 	bl	800315c <I2C_Slave_STOPF>
 8002144:	e056      	b.n	80021f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002146:	7bbb      	ldrb	r3, [r7, #14]
 8002148:	2b21      	cmp	r3, #33	@ 0x21
 800214a:	d002      	beq.n	8002152 <HAL_I2C_EV_IRQHandler+0x23a>
 800214c:	7bbb      	ldrb	r3, [r7, #14]
 800214e:	2b29      	cmp	r3, #41	@ 0x29
 8002150:	d125      	bne.n	800219e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	09db      	lsrs	r3, r3, #7
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00f      	beq.n	800217e <HAL_I2C_EV_IRQHandler+0x266>
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	0a9b      	lsrs	r3, r3, #10
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <HAL_I2C_EV_IRQHandler+0x266>
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fee8 	bl	8002f4c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800217c:	e039      	b.n	80021f2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d033      	beq.n	80021f2 <HAL_I2C_EV_IRQHandler+0x2da>
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	0a5b      	lsrs	r3, r3, #9
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d02d      	beq.n	80021f2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 ff15 	bl	8002fc6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800219c:	e029      	b.n	80021f2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00f      	beq.n	80021ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	0a9b      	lsrs	r3, r3, #10
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 ff20 	bl	8003008 <I2C_SlaveReceive_RXNE>
 80021c8:	e014      	b.n	80021f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00e      	beq.n	80021f4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	0a5b      	lsrs	r3, r3, #9
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 ff4e 	bl	8003084 <I2C_SlaveReceive_BTF>
 80021e8:	e004      	b.n	80021f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80021ea:	bf00      	nop
 80021ec:	e002      	b.n	80021f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021ee:	bf00      	nop
 80021f0:	e000      	b.n	80021f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b08a      	sub	sp, #40	@ 0x28
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800221c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00e      	beq.n	8002248 <HAL_I2C_ER_IRQHandler+0x4e>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002246:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	0a5b      	lsrs	r3, r3, #9
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00e      	beq.n	8002272 <HAL_I2C_ER_IRQHandler+0x78>
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002270:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	0a9b      	lsrs	r3, r3, #10
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d03f      	beq.n	80022fe <HAL_I2C_ER_IRQHandler+0x104>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d039      	beq.n	80022fe <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800228a:	7efb      	ldrb	r3, [r7, #27]
 800228c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800229c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80022a4:	7ebb      	ldrb	r3, [r7, #26]
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d112      	bne.n	80022d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10f      	bne.n	80022d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	2b21      	cmp	r3, #33	@ 0x21
 80022b4:	d008      	beq.n	80022c8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80022b6:	7cfb      	ldrb	r3, [r7, #19]
 80022b8:	2b29      	cmp	r3, #41	@ 0x29
 80022ba:	d005      	beq.n	80022c8 <HAL_I2C_ER_IRQHandler+0xce>
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	2b28      	cmp	r3, #40	@ 0x28
 80022c0:	d106      	bne.n	80022d0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b21      	cmp	r3, #33	@ 0x21
 80022c6:	d103      	bne.n	80022d0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f001 f877 	bl	80033bc <I2C_Slave_AF>
 80022ce:	e016      	b.n	80022fe <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022d8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80022da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80022e2:	7efb      	ldrb	r3, [r7, #27]
 80022e4:	2b10      	cmp	r3, #16
 80022e6:	d002      	beq.n	80022ee <HAL_I2C_ER_IRQHandler+0xf4>
 80022e8:	7efb      	ldrb	r3, [r7, #27]
 80022ea:	2b40      	cmp	r3, #64	@ 0x40
 80022ec:	d107      	bne.n	80022fe <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022fc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	0adb      	lsrs	r3, r3, #11
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00e      	beq.n	8002328 <HAL_I2C_ER_IRQHandler+0x12e>
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	f043 0308 	orr.w	r3, r3, #8
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002326:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f001 f8b2 	bl	80034a4 <I2C_ITError>
  }
}
 8002340:	bf00      	nop
 8002342:	3728      	adds	r7, #40	@ 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
 8002390:	4613      	mov	r3, r2
 8002392:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002412:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800241a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002426:	2b00      	cmp	r3, #0
 8002428:	d150      	bne.n	80024cc <I2C_MasterTransmit_TXE+0xc8>
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	2b21      	cmp	r3, #33	@ 0x21
 800242e:	d14d      	bne.n	80024cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b08      	cmp	r3, #8
 8002434:	d01d      	beq.n	8002472 <I2C_MasterTransmit_TXE+0x6e>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b20      	cmp	r3, #32
 800243a:	d01a      	beq.n	8002472 <I2C_MasterTransmit_TXE+0x6e>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002442:	d016      	beq.n	8002472 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002452:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2211      	movs	r2, #17
 8002458:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ff6c 	bl	8002348 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002470:	e060      	b.n	8002534 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002480:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002490:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b40      	cmp	r3, #64	@ 0x40
 80024aa:	d107      	bne.n	80024bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff7d 	bl	80023b4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024ba:	e03b      	b.n	8002534 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff3f 	bl	8002348 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024ca:	e033      	b.n	8002534 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b21      	cmp	r3, #33	@ 0x21
 80024d0:	d005      	beq.n	80024de <I2C_MasterTransmit_TXE+0xda>
 80024d2:	7bbb      	ldrb	r3, [r7, #14]
 80024d4:	2b40      	cmp	r3, #64	@ 0x40
 80024d6:	d12d      	bne.n	8002534 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b22      	cmp	r3, #34	@ 0x22
 80024dc:	d12a      	bne.n	8002534 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d108      	bne.n	80024fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80024f8:	e01c      	b.n	8002534 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b40      	cmp	r3, #64	@ 0x40
 8002504:	d103      	bne.n	800250e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f88e 	bl	8002628 <I2C_MemoryTransmit_TXE_BTF>
}
 800250c:	e012      	b.n	8002534 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002532:	e7ff      	b.n	8002534 <I2C_MasterTransmit_TXE+0x130>
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002548:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b21      	cmp	r3, #33	@ 0x21
 8002554:	d164      	bne.n	8002620 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d012      	beq.n	8002586 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002584:	e04c      	b.n	8002620 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d01d      	beq.n	80025c8 <I2C_MasterTransmit_BTF+0x8c>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b20      	cmp	r3, #32
 8002590:	d01a      	beq.n	80025c8 <I2C_MasterTransmit_BTF+0x8c>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002598:	d016      	beq.n	80025c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2211      	movs	r2, #17
 80025ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff fec1 	bl	8002348 <HAL_I2C_MasterTxCpltCallback>
}
 80025c6:	e02b      	b.n	8002620 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b40      	cmp	r3, #64	@ 0x40
 8002600:	d107      	bne.n	8002612 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff fed2 	bl	80023b4 <HAL_I2C_MemTxCpltCallback>
}
 8002610:	e006      	b.n	8002620 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fe94 	bl	8002348 <HAL_I2C_MasterTxCpltCallback>
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002636:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800263c:	2b00      	cmp	r3, #0
 800263e:	d11d      	bne.n	800267c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002644:	2b01      	cmp	r3, #1
 8002646:	d10b      	bne.n	8002660 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800264c:	b2da      	uxtb	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002658:	1c9a      	adds	r2, r3, #2
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800265e:	e077      	b.n	8002750 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002664:	b29b      	uxth	r3, r3
 8002666:	121b      	asrs	r3, r3, #8
 8002668:	b2da      	uxtb	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800267a:	e069      	b.n	8002750 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002680:	2b01      	cmp	r3, #1
 8002682:	d10b      	bne.n	800269c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002688:	b2da      	uxtb	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800269a:	e059      	b.n	8002750 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d152      	bne.n	800274a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b22      	cmp	r3, #34	@ 0x22
 80026a8:	d10d      	bne.n	80026c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80026c4:	e044      	b.n	8002750 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b21      	cmp	r3, #33	@ 0x21
 80026d4:	d112      	bne.n	80026fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80026fa:	e029      	b.n	8002750 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d124      	bne.n	8002750 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	2b21      	cmp	r3, #33	@ 0x21
 800270a:	d121      	bne.n	8002750 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800271a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800272a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fe36 	bl	80023b4 <HAL_I2C_MemTxCpltCallback>
}
 8002748:	e002      	b.n	8002750 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fb5e 	bl	8001e0c <I2C_Flush_DR>
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b22      	cmp	r3, #34	@ 0x22
 800276a:	f040 80b9 	bne.w	80028e0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002772:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d921      	bls.n	80027c6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	f040 8096 	bne.w	80028e0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027c2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80027c4:	e08c      	b.n	80028e0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d07f      	beq.n	80028ce <I2C_MasterReceive_RXNE+0x176>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d002      	beq.n	80027da <I2C_MasterReceive_RXNE+0x82>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d179      	bne.n	80028ce <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f001 f83c 	bl	8003858 <I2C_WaitOnSTOPRequestThroughIT>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d14c      	bne.n	8002880 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027f4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002804:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b40      	cmp	r3, #64	@ 0x40
 800283e:	d10a      	bne.n	8002856 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff fdba 	bl	80023c8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002854:	e044      	b.n	80028e0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b08      	cmp	r3, #8
 8002862:	d002      	beq.n	800286a <I2C_MasterReceive_RXNE+0x112>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b20      	cmp	r3, #32
 8002868:	d103      	bne.n	8002872 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002870:	e002      	b.n	8002878 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2212      	movs	r2, #18
 8002876:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fd6f 	bl	800235c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800287e:	e02f      	b.n	80028e0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800288e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff fd88 	bl	80023dc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028cc:	e008      	b.n	80028e0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028dc:	605a      	str	r2, [r3, #4]
}
 80028de:	e7ff      	b.n	80028e0 <I2C_MasterReceive_RXNE+0x188>
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d11b      	bne.n	8002938 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800290e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002936:	e0c4      	b.n	8002ac2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b03      	cmp	r3, #3
 8002940:	d129      	bne.n	8002996 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002950:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b04      	cmp	r3, #4
 8002956:	d00a      	beq.n	800296e <I2C_MasterReceive_BTF+0x86>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d007      	beq.n	800296e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800296c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002994:	e095      	b.n	8002ac2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d17d      	bne.n	8002a9c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d002      	beq.n	80029ac <I2C_MasterReceive_BTF+0xc4>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d108      	bne.n	80029be <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	e016      	b.n	80029ec <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d002      	beq.n	80029ca <I2C_MasterReceive_BTF+0xe2>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d108      	bne.n	80029dc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e007      	b.n	80029ec <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002a46:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b40      	cmp	r3, #64	@ 0x40
 8002a5a:	d10a      	bne.n	8002a72 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff fcac 	bl	80023c8 <HAL_I2C_MemRxCpltCallback>
}
 8002a70:	e027      	b.n	8002ac2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d002      	beq.n	8002a86 <I2C_MasterReceive_BTF+0x19e>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d103      	bne.n	8002a8e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a8c:	e002      	b.n	8002a94 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2212      	movs	r2, #18
 8002a92:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff fc61 	bl	800235c <HAL_I2C_MasterRxCpltCallback>
}
 8002a9a:	e012      	b.n	8002ac2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b40      	cmp	r3, #64	@ 0x40
 8002adc:	d117      	bne.n	8002b0e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002af6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002af8:	e067      	b.n	8002bca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	611a      	str	r2, [r3, #16]
}
 8002b0c:	e05d      	b.n	8002bca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b16:	d133      	bne.n	8002b80 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b21      	cmp	r3, #33	@ 0x21
 8002b22:	d109      	bne.n	8002b38 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b34:	611a      	str	r2, [r3, #16]
 8002b36:	e008      	b.n	8002b4a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d004      	beq.n	8002b5c <I2C_Master_SB+0x92>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d108      	bne.n	8002b6e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d032      	beq.n	8002bca <I2C_Master_SB+0x100>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d02d      	beq.n	8002bca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b7c:	605a      	str	r2, [r3, #4]
}
 8002b7e:	e024      	b.n	8002bca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10e      	bne.n	8002ba6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	11db      	asrs	r3, r3, #7
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f003 0306 	and.w	r3, r3, #6
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f063 030f 	orn	r3, r3, #15
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	611a      	str	r2, [r3, #16]
}
 8002ba4:	e011      	b.n	8002bca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10d      	bne.n	8002bca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	11db      	asrs	r3, r3, #7
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f003 0306 	and.w	r3, r3, #6
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f063 030e 	orn	r3, r3, #14
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	611a      	str	r2, [r3, #16]
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d004      	beq.n	8002bfc <I2C_Master_ADD10+0x26>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d108      	bne.n	8002c0e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00c      	beq.n	8002c1e <I2C_Master_ADD10+0x48>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c1c:	605a      	str	r2, [r3, #4]
  }
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b091      	sub	sp, #68	@ 0x44
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c38:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b22      	cmp	r3, #34	@ 0x22
 8002c52:	f040 8169 	bne.w	8002f28 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10f      	bne.n	8002c7e <I2C_Master_ADDR+0x54>
 8002c5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002c62:	2b40      	cmp	r3, #64	@ 0x40
 8002c64:	d10b      	bne.n	8002c7e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c66:	2300      	movs	r3, #0
 8002c68:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7c:	e160      	b.n	8002f40 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d11d      	bne.n	8002cc2 <I2C_Master_ADDR+0x98>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002c8e:	d118      	bne.n	8002cc2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cb4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	651a      	str	r2, [r3, #80]	@ 0x50
 8002cc0:	e13e      	b.n	8002f40 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d113      	bne.n	8002cf4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ccc:	2300      	movs	r3, #0
 8002cce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e115      	b.n	8002f20 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	f040 808a 	bne.w	8002e14 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d02:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d06:	d137      	bne.n	8002d78 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d16:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d26:	d113      	bne.n	8002d50 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d36:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	e0e7      	b.n	8002f20 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	623b      	str	r3, [r7, #32]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	e0d3      	b.n	8002f20 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d02e      	beq.n	8002ddc <I2C_Master_ADDR+0x1b2>
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d02b      	beq.n	8002ddc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d86:	2b12      	cmp	r3, #18
 8002d88:	d102      	bne.n	8002d90 <I2C_Master_ADDR+0x166>
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d125      	bne.n	8002ddc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d00e      	beq.n	8002db4 <I2C_Master_ADDR+0x18a>
 8002d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d00b      	beq.n	8002db4 <I2C_Master_ADDR+0x18a>
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d008      	beq.n	8002db4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e007      	b.n	8002dc4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dc2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	61fb      	str	r3, [r7, #28]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	e0a1      	b.n	8002f20 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	61bb      	str	r3, [r7, #24]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e085      	b.n	8002f20 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d14d      	bne.n	8002eba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d016      	beq.n	8002e52 <I2C_Master_ADDR+0x228>
 8002e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d013      	beq.n	8002e52 <I2C_Master_ADDR+0x228>
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d010      	beq.n	8002e52 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e3e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	e007      	b.n	8002e62 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e60:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e70:	d117      	bne.n	8002ea2 <I2C_Master_ADDR+0x278>
 8002e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e78:	d00b      	beq.n	8002e92 <I2C_Master_ADDR+0x268>
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d008      	beq.n	8002e92 <I2C_Master_ADDR+0x268>
 8002e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d005      	beq.n	8002e92 <I2C_Master_ADDR+0x268>
 8002e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d002      	beq.n	8002e92 <I2C_Master_ADDR+0x268>
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d107      	bne.n	8002ea2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ea0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	e032      	b.n	8002f20 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ec8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ed4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ed8:	d117      	bne.n	8002f0a <I2C_Master_ADDR+0x2e0>
 8002eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002edc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ee0:	d00b      	beq.n	8002efa <I2C_Master_ADDR+0x2d0>
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d008      	beq.n	8002efa <I2C_Master_ADDR+0x2d0>
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d005      	beq.n	8002efa <I2C_Master_ADDR+0x2d0>
 8002eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d002      	beq.n	8002efa <I2C_Master_ADDR+0x2d0>
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d107      	bne.n	8002f0a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002f26:	e00b      	b.n	8002f40 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
}
 8002f3e:	e7ff      	b.n	8002f40 <I2C_Master_ADDR+0x316>
 8002f40:	bf00      	nop
 8002f42:	3744      	adds	r7, #68	@ 0x44
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d02b      	beq.n	8002fbe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d114      	bne.n	8002fbe <I2C_SlaveTransmit_TXE+0x72>
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2b29      	cmp	r3, #41	@ 0x29
 8002f98:	d111      	bne.n	8002fbe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2221      	movs	r2, #33	@ 0x21
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2228      	movs	r2, #40	@ 0x28
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff f9d9 	bl	8002370 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d011      	beq.n	8002ffc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003016:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d02c      	beq.n	800307c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d114      	bne.n	800307c <I2C_SlaveReceive_RXNE+0x74>
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b2a      	cmp	r3, #42	@ 0x2a
 8003056:	d111      	bne.n	800307c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003066:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2222      	movs	r2, #34	@ 0x22
 800306c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2228      	movs	r2, #40	@ 0x28
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fd fc92 	bl	80009a0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d012      	beq.n	80030bc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80030e2:	2b28      	cmp	r3, #40	@ 0x28
 80030e4:	d127      	bne.n	8003136 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	09db      	lsrs	r3, r3, #7
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	81bb      	strh	r3, [r7, #12]
 8003118:	e002      	b.n	8003120 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003128:	89ba      	ldrh	r2, [r7, #12]
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff f928 	bl	8002384 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003134:	e00e      	b.n	8003154 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800316a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800317a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031b8:	d172      	bne.n	80032a0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	2b22      	cmp	r3, #34	@ 0x22
 80031be:	d002      	beq.n	80031c6 <I2C_Slave_STOPF+0x6a>
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80031c4:	d135      	bne.n	8003232 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	f043 0204 	orr.w	r2, r3, #4
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe fa38 	bl	8001674 <HAL_DMA_GetState>
 8003204:	4603      	mov	r3, r0
 8003206:	2b01      	cmp	r3, #1
 8003208:	d049      	beq.n	800329e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320e:	4a69      	ldr	r2, [pc, #420]	@ (80033b4 <I2C_Slave_STOPF+0x258>)
 8003210:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe f880 	bl	800131c <HAL_DMA_Abort_IT>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d03d      	beq.n	800329e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800322c:	4610      	mov	r0, r2
 800322e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003230:	e035      	b.n	800329e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	f043 0204 	orr.w	r2, r3, #4
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003264:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe fa02 	bl	8001674 <HAL_DMA_GetState>
 8003270:	4603      	mov	r3, r0
 8003272:	2b01      	cmp	r3, #1
 8003274:	d014      	beq.n	80032a0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800327a:	4a4e      	ldr	r2, [pc, #312]	@ (80033b4 <I2C_Slave_STOPF+0x258>)
 800327c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe f84a 	bl	800131c <HAL_DMA_Abort_IT>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003298:	4610      	mov	r0, r2
 800329a:	4798      	blx	r3
 800329c:	e000      	b.n	80032a0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800329e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d03e      	beq.n	8003328 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d112      	bne.n	80032de <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e8:	2b40      	cmp	r3, #64	@ 0x40
 80032ea:	d112      	bne.n	8003312 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	f043 0204 	orr.w	r2, r3, #4
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f8b7 	bl	80034a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003336:	e039      	b.n	80033ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	2b2a      	cmp	r3, #42	@ 0x2a
 800333c:	d109      	bne.n	8003352 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2228      	movs	r2, #40	@ 0x28
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7fd fb27 	bl	80009a0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b28      	cmp	r3, #40	@ 0x28
 800335c:	d111      	bne.n	8003382 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a15      	ldr	r2, [pc, #84]	@ (80033b8 <I2C_Slave_STOPF+0x25c>)
 8003362:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff f810 	bl	80023a0 <HAL_I2C_ListenCpltCallback>
}
 8003380:	e014      	b.n	80033ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	2b22      	cmp	r3, #34	@ 0x22
 8003388:	d002      	beq.n	8003390 <I2C_Slave_STOPF+0x234>
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	2b22      	cmp	r3, #34	@ 0x22
 800338e:	d10d      	bne.n	80033ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fd fafa 	bl	80009a0 <HAL_I2C_SlaveRxCpltCallback>
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	08003709 	.word	0x08003709
 80033b8:	ffff0000 	.word	0xffff0000

080033bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d002      	beq.n	80033de <I2C_Slave_AF+0x22>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d129      	bne.n	8003432 <I2C_Slave_AF+0x76>
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	2b28      	cmp	r3, #40	@ 0x28
 80033e2:	d126      	bne.n	8003432 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a2e      	ldr	r2, [pc, #184]	@ (80034a0 <I2C_Slave_AF+0xe4>)
 80033e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003402:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe ffb8 	bl	80023a0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003430:	e031      	b.n	8003496 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	2b21      	cmp	r3, #33	@ 0x21
 8003436:	d129      	bne.n	800348c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a19      	ldr	r2, [pc, #100]	@ (80034a0 <I2C_Slave_AF+0xe4>)
 800343c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2221      	movs	r2, #33	@ 0x21
 8003442:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003462:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800346c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800347c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fe fcc4 	bl	8001e0c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7fe ff73 	bl	8002370 <HAL_I2C_SlaveTxCpltCallback>
}
 800348a:	e004      	b.n	8003496 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003494:	615a      	str	r2, [r3, #20]
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	ffff0000 	.word	0xffff0000

080034a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034bc:	7bbb      	ldrb	r3, [r7, #14]
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d002      	beq.n	80034c8 <I2C_ITError+0x24>
 80034c2:	7bbb      	ldrb	r3, [r7, #14]
 80034c4:	2b40      	cmp	r3, #64	@ 0x40
 80034c6:	d10a      	bne.n	80034de <I2C_ITError+0x3a>
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b22      	cmp	r3, #34	@ 0x22
 80034cc:	d107      	bne.n	80034de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80034e4:	2b28      	cmp	r3, #40	@ 0x28
 80034e6:	d107      	bne.n	80034f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2228      	movs	r2, #40	@ 0x28
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80034f6:	e015      	b.n	8003524 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003502:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003506:	d00a      	beq.n	800351e <I2C_ITError+0x7a>
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b60      	cmp	r3, #96	@ 0x60
 800350c:	d007      	beq.n	800351e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800352e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003532:	d162      	bne.n	80035fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003542:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003548:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d020      	beq.n	8003594 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003556:	4a6a      	ldr	r2, [pc, #424]	@ (8003700 <I2C_ITError+0x25c>)
 8003558:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800355e:	4618      	mov	r0, r3
 8003560:	f7fd fedc 	bl	800131c <HAL_DMA_Abort_IT>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8089 	beq.w	800367e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800358e:	4610      	mov	r0, r2
 8003590:	4798      	blx	r3
 8003592:	e074      	b.n	800367e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	4a59      	ldr	r2, [pc, #356]	@ (8003700 <I2C_ITError+0x25c>)
 800359a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fd febb 	bl	800131c <HAL_DMA_Abort_IT>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d068      	beq.n	800367e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b6:	2b40      	cmp	r3, #64	@ 0x40
 80035b8:	d10b      	bne.n	80035d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0201 	bic.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035f4:	4610      	mov	r0, r2
 80035f6:	4798      	blx	r3
 80035f8:	e041      	b.n	800367e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b60      	cmp	r3, #96	@ 0x60
 8003604:	d125      	bne.n	8003652 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361e:	2b40      	cmp	r3, #64	@ 0x40
 8003620:	d10b      	bne.n	800363a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fe fed0 	bl	80023f0 <HAL_I2C_AbortCpltCallback>
 8003650:	e015      	b.n	800367e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365c:	2b40      	cmp	r3, #64	@ 0x40
 800365e:	d10b      	bne.n	8003678 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7fe feaf 	bl	80023dc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10e      	bne.n	80036ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d113      	bne.n	80036f8 <I2C_ITError+0x254>
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b28      	cmp	r3, #40	@ 0x28
 80036d4:	d110      	bne.n	80036f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003704 <I2C_ITError+0x260>)
 80036da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe fe54 	bl	80023a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	08003709 	.word	0x08003709
 8003704:	ffff0000 	.word	0xffff0000

08003708 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003718:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003720:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003722:	4b4b      	ldr	r3, [pc, #300]	@ (8003850 <I2C_DMAAbort+0x148>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	08db      	lsrs	r3, r3, #3
 8003728:	4a4a      	ldr	r2, [pc, #296]	@ (8003854 <I2C_DMAAbort+0x14c>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	0a1a      	lsrs	r2, r3, #8
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	00da      	lsls	r2, r3, #3
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003746:	f043 0220 	orr.w	r2, r3, #32
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800374e:	e00a      	b.n	8003766 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	3b01      	subs	r3, #1
 8003754:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003764:	d0ea      	beq.n	800373c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003772:	2200      	movs	r2, #0
 8003774:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003782:	2200      	movs	r2, #0
 8003784:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003794:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a8:	2200      	movs	r2, #0
 80037aa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b8:	2200      	movs	r2, #0
 80037ba:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b60      	cmp	r3, #96	@ 0x60
 80037d6:	d10e      	bne.n	80037f6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2200      	movs	r2, #0
 80037ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037ee:	6978      	ldr	r0, [r7, #20]
 80037f0:	f7fe fdfe 	bl	80023f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037f4:	e027      	b.n	8003846 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037fc:	2b28      	cmp	r3, #40	@ 0x28
 80037fe:	d117      	bne.n	8003830 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800381e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2200      	movs	r2, #0
 8003824:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2228      	movs	r2, #40	@ 0x28
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800382e:	e007      	b.n	8003840 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003840:	6978      	ldr	r0, [r7, #20]
 8003842:	f7fe fdcb 	bl	80023dc <HAL_I2C_ErrorCallback>
}
 8003846:	bf00      	nop
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000000 	.word	0x20000000
 8003854:	14f8b589 	.word	0x14f8b589

08003858 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003864:	4b13      	ldr	r3, [pc, #76]	@ (80038b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	08db      	lsrs	r3, r3, #3
 800386a:	4a13      	ldr	r2, [pc, #76]	@ (80038b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	0a1a      	lsrs	r2, r3, #8
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3b01      	subs	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d107      	bne.n	8003896 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e008      	b.n	80038a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038a4:	d0e9      	beq.n	800387a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	20000000 	.word	0x20000000
 80038b8:	14f8b589 	.word	0x14f8b589

080038bc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80038cc:	d103      	bne.n	80038d6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80038d4:	e007      	b.n	80038e6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80038de:	d102      	bne.n	80038e6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2208      	movs	r2, #8
 80038e4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0cc      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003908:	4b68      	ldr	r3, [pc, #416]	@ (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d90c      	bls.n	8003930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b65      	ldr	r3, [pc, #404]	@ (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b63      	ldr	r3, [pc, #396]	@ (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0b8      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d020      	beq.n	800397e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003948:	4b59      	ldr	r3, [pc, #356]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	4a58      	ldr	r2, [pc, #352]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003952:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003960:	4b53      	ldr	r3, [pc, #332]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4a52      	ldr	r2, [pc, #328]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800396a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800396c:	4b50      	ldr	r3, [pc, #320]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	494d      	ldr	r1, [pc, #308]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d044      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	4b47      	ldr	r3, [pc, #284]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d119      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e07f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d003      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e06f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e067      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d2:	4b37      	ldr	r3, [pc, #220]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f023 0203 	bic.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4934      	ldr	r1, [pc, #208]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e4:	f7fd face 	bl	8000f84 <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ec:	f7fd faca 	bl	8000f84 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e04f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 020c 	and.w	r2, r3, #12
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d1eb      	bne.n	80039ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a14:	4b25      	ldr	r3, [pc, #148]	@ (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d20c      	bcs.n	8003a3c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b22      	ldr	r3, [pc, #136]	@ (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b20      	ldr	r3, [pc, #128]	@ (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e032      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a48:	4b19      	ldr	r3, [pc, #100]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4916      	ldr	r1, [pc, #88]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a66:	4b12      	ldr	r3, [pc, #72]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	490e      	ldr	r1, [pc, #56]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a7a:	f000 f855 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	490a      	ldr	r1, [pc, #40]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a8c:	5ccb      	ldrb	r3, [r1, r3]
 8003a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a92:	4a09      	ldr	r2, [pc, #36]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a96:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd fa2e 	bl	8000efc <HAL_InitTick>

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023c00 	.word	0x40023c00
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	08006004 	.word	0x08006004
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	20000004 	.word	0x20000004

08003ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	@ (8003ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000000 	.word	0x20000000

08003ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003adc:	f7ff fff0 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	0a9b      	lsrs	r3, r3, #10
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4903      	ldr	r1, [pc, #12]	@ (8003afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40023800 	.word	0x40023800
 8003afc:	08006014 	.word	0x08006014

08003b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b04:	f7ff ffdc 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	0b5b      	lsrs	r3, r3, #13
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	@ (8003b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40023800 	.word	0x40023800
 8003b24:	08006014 	.word	0x08006014

08003b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b2c:	b0ae      	sub	sp, #184	@ 0xb8
 8003b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b4e:	4bcb      	ldr	r3, [pc, #812]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b0c      	cmp	r3, #12
 8003b58:	f200 8206 	bhi.w	8003f68 <HAL_RCC_GetSysClockFreq+0x440>
 8003b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b62:	bf00      	nop
 8003b64:	08003b99 	.word	0x08003b99
 8003b68:	08003f69 	.word	0x08003f69
 8003b6c:	08003f69 	.word	0x08003f69
 8003b70:	08003f69 	.word	0x08003f69
 8003b74:	08003ba1 	.word	0x08003ba1
 8003b78:	08003f69 	.word	0x08003f69
 8003b7c:	08003f69 	.word	0x08003f69
 8003b80:	08003f69 	.word	0x08003f69
 8003b84:	08003ba9 	.word	0x08003ba9
 8003b88:	08003f69 	.word	0x08003f69
 8003b8c:	08003f69 	.word	0x08003f69
 8003b90:	08003f69 	.word	0x08003f69
 8003b94:	08003d99 	.word	0x08003d99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b98:	4bb9      	ldr	r3, [pc, #740]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b9e:	e1e7      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ba0:	4bb8      	ldr	r3, [pc, #736]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ba6:	e1e3      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba8:	4bb4      	ldr	r3, [pc, #720]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bb4:	4bb1      	ldr	r3, [pc, #708]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d071      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc0:	4bae      	ldr	r3, [pc, #696]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	099b      	lsrs	r3, r3, #6
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bcc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003be2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003be6:	4622      	mov	r2, r4
 8003be8:	462b      	mov	r3, r5
 8003bea:	f04f 0000 	mov.w	r0, #0
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	0159      	lsls	r1, r3, #5
 8003bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf8:	0150      	lsls	r0, r2, #5
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4621      	mov	r1, r4
 8003c00:	1a51      	subs	r1, r2, r1
 8003c02:	6439      	str	r1, [r7, #64]	@ 0x40
 8003c04:	4629      	mov	r1, r5
 8003c06:	eb63 0301 	sbc.w	r3, r3, r1
 8003c0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003c18:	4649      	mov	r1, r9
 8003c1a:	018b      	lsls	r3, r1, #6
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c22:	4641      	mov	r1, r8
 8003c24:	018a      	lsls	r2, r1, #6
 8003c26:	4641      	mov	r1, r8
 8003c28:	1a51      	subs	r1, r2, r1
 8003c2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003c40:	4649      	mov	r1, r9
 8003c42:	00cb      	lsls	r3, r1, #3
 8003c44:	4641      	mov	r1, r8
 8003c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4a:	4641      	mov	r1, r8
 8003c4c:	00ca      	lsls	r2, r1, #3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	4622      	mov	r2, r4
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c5a:	462b      	mov	r3, r5
 8003c5c:	460a      	mov	r2, r1
 8003c5e:	eb42 0303 	adc.w	r3, r2, r3
 8003c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c70:	4629      	mov	r1, r5
 8003c72:	024b      	lsls	r3, r1, #9
 8003c74:	4621      	mov	r1, r4
 8003c76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	024a      	lsls	r2, r1, #9
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003c94:	f7fc fb14 	bl	80002c0 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ca2:	e067      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca4:	4b75      	ldr	r3, [pc, #468]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	099b      	lsrs	r3, r3, #6
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cb0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cc2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	462b      	mov	r3, r5
 8003cca:	f04f 0000 	mov.w	r0, #0
 8003cce:	f04f 0100 	mov.w	r1, #0
 8003cd2:	0159      	lsls	r1, r3, #5
 8003cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd8:	0150      	lsls	r0, r2, #5
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4621      	mov	r1, r4
 8003ce0:	1a51      	subs	r1, r2, r1
 8003ce2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	018b      	lsls	r3, r1, #6
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d02:	4641      	mov	r1, r8
 8003d04:	018a      	lsls	r2, r1, #6
 8003d06:	4641      	mov	r1, r8
 8003d08:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d26:	4692      	mov	sl, r2
 8003d28:	469b      	mov	fp, r3
 8003d2a:	4623      	mov	r3, r4
 8003d2c:	eb1a 0303 	adds.w	r3, sl, r3
 8003d30:	623b      	str	r3, [r7, #32]
 8003d32:	462b      	mov	r3, r5
 8003d34:	eb4b 0303 	adc.w	r3, fp, r3
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d46:	4629      	mov	r1, r5
 8003d48:	028b      	lsls	r3, r1, #10
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d50:	4621      	mov	r1, r4
 8003d52:	028a      	lsls	r2, r1, #10
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d60:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003d66:	f7fc faab 	bl	80002c0 <__aeabi_uldivmod>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4613      	mov	r3, r2
 8003d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d74:	4b41      	ldr	r3, [pc, #260]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d96:	e0eb      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d98:	4b38      	ldr	r3, [pc, #224]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003da0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003da4:	4b35      	ldr	r3, [pc, #212]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d06b      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db0:	4b32      	ldr	r3, [pc, #200]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	099b      	lsrs	r3, r3, #6
 8003db6:	2200      	movs	r2, #0
 8003db8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003dbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dc8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003dcc:	4622      	mov	r2, r4
 8003dce:	462b      	mov	r3, r5
 8003dd0:	f04f 0000 	mov.w	r0, #0
 8003dd4:	f04f 0100 	mov.w	r1, #0
 8003dd8:	0159      	lsls	r1, r3, #5
 8003dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dde:	0150      	lsls	r0, r2, #5
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4621      	mov	r1, r4
 8003de6:	1a51      	subs	r1, r2, r1
 8003de8:	61b9      	str	r1, [r7, #24]
 8003dea:	4629      	mov	r1, r5
 8003dec:	eb63 0301 	sbc.w	r3, r3, r1
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003dfe:	4659      	mov	r1, fp
 8003e00:	018b      	lsls	r3, r1, #6
 8003e02:	4651      	mov	r1, sl
 8003e04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e08:	4651      	mov	r1, sl
 8003e0a:	018a      	lsls	r2, r1, #6
 8003e0c:	4651      	mov	r1, sl
 8003e0e:	ebb2 0801 	subs.w	r8, r2, r1
 8003e12:	4659      	mov	r1, fp
 8003e14:	eb63 0901 	sbc.w	r9, r3, r1
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e2c:	4690      	mov	r8, r2
 8003e2e:	4699      	mov	r9, r3
 8003e30:	4623      	mov	r3, r4
 8003e32:	eb18 0303 	adds.w	r3, r8, r3
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	462b      	mov	r3, r5
 8003e3a:	eb49 0303 	adc.w	r3, r9, r3
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	024b      	lsls	r3, r1, #9
 8003e50:	4621      	mov	r1, r4
 8003e52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e56:	4621      	mov	r1, r4
 8003e58:	024a      	lsls	r2, r1, #9
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e62:	2200      	movs	r2, #0
 8003e64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e66:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003e68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e6c:	f7fc fa28 	bl	80002c0 <__aeabi_uldivmod>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4613      	mov	r3, r2
 8003e76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e7a:	e065      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x420>
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	00f42400 	.word	0x00f42400
 8003e84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e88:	4b3d      	ldr	r3, [pc, #244]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	2200      	movs	r2, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	4611      	mov	r1, r2
 8003e94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e98:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003ea2:	4642      	mov	r2, r8
 8003ea4:	464b      	mov	r3, r9
 8003ea6:	f04f 0000 	mov.w	r0, #0
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	0159      	lsls	r1, r3, #5
 8003eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eb4:	0150      	lsls	r0, r2, #5
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4641      	mov	r1, r8
 8003ebc:	1a51      	subs	r1, r2, r1
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	018b      	lsls	r3, r1, #6
 8003ed8:	4651      	mov	r1, sl
 8003eda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ede:	4651      	mov	r1, sl
 8003ee0:	018a      	lsls	r2, r1, #6
 8003ee2:	4651      	mov	r1, sl
 8003ee4:	1a54      	subs	r4, r2, r1
 8003ee6:	4659      	mov	r1, fp
 8003ee8:	eb63 0501 	sbc.w	r5, r3, r1
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	00eb      	lsls	r3, r5, #3
 8003ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003efa:	00e2      	lsls	r2, r4, #3
 8003efc:	4614      	mov	r4, r2
 8003efe:	461d      	mov	r5, r3
 8003f00:	4643      	mov	r3, r8
 8003f02:	18e3      	adds	r3, r4, r3
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	464b      	mov	r3, r9
 8003f08:	eb45 0303 	adc.w	r3, r5, r3
 8003f0c:	607b      	str	r3, [r7, #4]
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	028b      	lsls	r3, r1, #10
 8003f1e:	4621      	mov	r1, r4
 8003f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f24:	4621      	mov	r1, r4
 8003f26:	028a      	lsls	r2, r1, #10
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f30:	2200      	movs	r2, #0
 8003f32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f34:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003f36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f3a:	f7fc f9c1 	bl	80002c0 <__aeabi_uldivmod>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4613      	mov	r3, r2
 8003f44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f48:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	0f1b      	lsrs	r3, r3, #28
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f66:	e003      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f68:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	37b8      	adds	r7, #184	@ 0xb8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
 8003f84:	00f42400 	.word	0x00f42400

08003f88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e28d      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8083 	beq.w	80040ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fa8:	4b94      	ldr	r3, [pc, #592]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d019      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fb4:	4b91      	ldr	r3, [pc, #580]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
        || \
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d106      	bne.n	8003fce <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fc0:	4b8e      	ldr	r3, [pc, #568]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fcc:	d00c      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fce:	4b8b      	ldr	r3, [pc, #556]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fd6:	2b0c      	cmp	r3, #12
 8003fd8:	d112      	bne.n	8004000 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fda:	4b88      	ldr	r3, [pc, #544]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fe6:	d10b      	bne.n	8004000 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe8:	4b84      	ldr	r3, [pc, #528]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d05b      	beq.n	80040ac <HAL_RCC_OscConfig+0x124>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d157      	bne.n	80040ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e25a      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004008:	d106      	bne.n	8004018 <HAL_RCC_OscConfig+0x90>
 800400a:	4b7c      	ldr	r3, [pc, #496]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7b      	ldr	r2, [pc, #492]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e01d      	b.n	8004054 <HAL_RCC_OscConfig+0xcc>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004020:	d10c      	bne.n	800403c <HAL_RCC_OscConfig+0xb4>
 8004022:	4b76      	ldr	r3, [pc, #472]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a75      	ldr	r2, [pc, #468]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b73      	ldr	r3, [pc, #460]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a72      	ldr	r2, [pc, #456]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e00b      	b.n	8004054 <HAL_RCC_OscConfig+0xcc>
 800403c:	4b6f      	ldr	r3, [pc, #444]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a6e      	ldr	r2, [pc, #440]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4b6c      	ldr	r3, [pc, #432]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6b      	ldr	r2, [pc, #428]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800404e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d013      	beq.n	8004084 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fc ff92 	bl	8000f84 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004064:	f7fc ff8e 	bl	8000f84 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	@ 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e21f      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004076:	4b61      	ldr	r3, [pc, #388]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0xdc>
 8004082:	e014      	b.n	80040ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fc ff7e 	bl	8000f84 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800408c:	f7fc ff7a 	bl	8000f84 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	@ 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e20b      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409e:	4b57      	ldr	r3, [pc, #348]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x104>
 80040aa:	e000      	b.n	80040ae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d06f      	beq.n	800419a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040ba:	4b50      	ldr	r3, [pc, #320]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d017      	beq.n	80040f6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040c6:	4b4d      	ldr	r3, [pc, #308]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
        || \
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d105      	bne.n	80040de <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040d2:	4b4a      	ldr	r3, [pc, #296]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040de:	4b47      	ldr	r3, [pc, #284]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d11c      	bne.n	8004124 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ea:	4b44      	ldr	r3, [pc, #272]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d116      	bne.n	8004124 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f6:	4b41      	ldr	r3, [pc, #260]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_RCC_OscConfig+0x186>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d001      	beq.n	800410e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e1d3      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410e:	4b3b      	ldr	r3, [pc, #236]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4937      	ldr	r1, [pc, #220]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004122:	e03a      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d020      	beq.n	800416e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800412c:	4b34      	ldr	r3, [pc, #208]	@ (8004200 <HAL_RCC_OscConfig+0x278>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fc ff27 	bl	8000f84 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413a:	f7fc ff23 	bl	8000f84 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e1b4      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414c:	4b2b      	ldr	r3, [pc, #172]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004158:	4b28      	ldr	r3, [pc, #160]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4925      	ldr	r1, [pc, #148]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004168:	4313      	orrs	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
 800416c:	e015      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416e:	4b24      	ldr	r3, [pc, #144]	@ (8004200 <HAL_RCC_OscConfig+0x278>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fc ff06 	bl	8000f84 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fc ff02 	bl	8000f84 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e193      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	4b1b      	ldr	r3, [pc, #108]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d036      	beq.n	8004214 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d016      	beq.n	80041dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ae:	4b15      	ldr	r3, [pc, #84]	@ (8004204 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fc fee6 	bl	8000f84 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041bc:	f7fc fee2 	bl	8000f84 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e173      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ce:	4b0b      	ldr	r3, [pc, #44]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80041d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x234>
 80041da:	e01b      	b.n	8004214 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041dc:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <HAL_RCC_OscConfig+0x27c>)
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e2:	f7fc fecf 	bl	8000f84 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e8:	e00e      	b.n	8004208 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ea:	f7fc fecb 	bl	8000f84 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d907      	bls.n	8004208 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e15c      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
 80041fc:	40023800 	.word	0x40023800
 8004200:	42470000 	.word	0x42470000
 8004204:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004208:	4b8a      	ldr	r3, [pc, #552]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800420a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1ea      	bne.n	80041ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8097 	beq.w	8004350 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004226:	4b83      	ldr	r3, [pc, #524]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10f      	bne.n	8004252 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	4b7f      	ldr	r3, [pc, #508]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	4a7e      	ldr	r2, [pc, #504]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004240:	6413      	str	r3, [r2, #64]	@ 0x40
 8004242:	4b7c      	ldr	r3, [pc, #496]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424e:	2301      	movs	r3, #1
 8004250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004252:	4b79      	ldr	r3, [pc, #484]	@ (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d118      	bne.n	8004290 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800425e:	4b76      	ldr	r3, [pc, #472]	@ (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a75      	ldr	r2, [pc, #468]	@ (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426a:	f7fc fe8b 	bl	8000f84 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004272:	f7fc fe87 	bl	8000f84 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e118      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004284:	4b6c      	ldr	r3, [pc, #432]	@ (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x31e>
 8004298:	4b66      	ldr	r3, [pc, #408]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429c:	4a65      	ldr	r2, [pc, #404]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042a4:	e01c      	b.n	80042e0 <HAL_RCC_OscConfig+0x358>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x340>
 80042ae:	4b61      	ldr	r3, [pc, #388]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b2:	4a60      	ldr	r2, [pc, #384]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042b4:	f043 0304 	orr.w	r3, r3, #4
 80042b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ba:	4b5e      	ldr	r3, [pc, #376]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042be:	4a5d      	ldr	r2, [pc, #372]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c6:	e00b      	b.n	80042e0 <HAL_RCC_OscConfig+0x358>
 80042c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042cc:	4a59      	ldr	r2, [pc, #356]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d4:	4b57      	ldr	r3, [pc, #348]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d8:	4a56      	ldr	r2, [pc, #344]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042da:	f023 0304 	bic.w	r3, r3, #4
 80042de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d015      	beq.n	8004314 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7fc fe4c 	bl	8000f84 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f0:	f7fc fe48 	bl	8000f84 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e0d7      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004306:	4b4b      	ldr	r3, [pc, #300]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ee      	beq.n	80042f0 <HAL_RCC_OscConfig+0x368>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fc fe36 	bl	8000f84 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431a:	e00a      	b.n	8004332 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431c:	f7fc fe32 	bl	8000f84 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e0c1      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004332:	4b40      	ldr	r3, [pc, #256]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ee      	bne.n	800431c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004344:	4b3b      	ldr	r3, [pc, #236]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	4a3a      	ldr	r2, [pc, #232]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800434a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800434e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80ad 	beq.w	80044b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800435a:	4b36      	ldr	r3, [pc, #216]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b08      	cmp	r3, #8
 8004364:	d060      	beq.n	8004428 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d145      	bne.n	80043fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436e:	4b33      	ldr	r3, [pc, #204]	@ (800443c <HAL_RCC_OscConfig+0x4b4>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fc fe06 	bl	8000f84 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437c:	f7fc fe02 	bl	8000f84 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e093      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	4b29      	ldr	r3, [pc, #164]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	019b      	lsls	r3, r3, #6
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	3b01      	subs	r3, #1
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	061b      	lsls	r3, r3, #24
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c4:	071b      	lsls	r3, r3, #28
 80043c6:	491b      	ldr	r1, [pc, #108]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043cc:	4b1b      	ldr	r3, [pc, #108]	@ (800443c <HAL_RCC_OscConfig+0x4b4>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d2:	f7fc fdd7 	bl	8000f84 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043da:	f7fc fdd3 	bl	8000f84 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e064      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ec:	4b11      	ldr	r3, [pc, #68]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCC_OscConfig+0x452>
 80043f8:	e05c      	b.n	80044b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fa:	4b10      	ldr	r3, [pc, #64]	@ (800443c <HAL_RCC_OscConfig+0x4b4>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fc fdc0 	bl	8000f84 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004408:	f7fc fdbc 	bl	8000f84 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e04d      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x480>
 8004426:	e045      	b.n	80044b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e040      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
 8004434:	40023800 	.word	0x40023800
 8004438:	40007000 	.word	0x40007000
 800443c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004440:	4b1f      	ldr	r3, [pc, #124]	@ (80044c0 <HAL_RCC_OscConfig+0x538>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d030      	beq.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d129      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d122      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004470:	4013      	ands	r3, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004478:	4293      	cmp	r3, r2
 800447a:	d119      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004486:	085b      	lsrs	r3, r3, #1
 8004488:	3b01      	subs	r3, #1
 800448a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d10f      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d107      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800

080044c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e041      	b.n	800455a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fc fb84 	bl	8000bf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f000 f9b8 	bl	8004878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d109      	bne.n	8004588 <HAL_TIM_PWM_Start+0x24>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	bf14      	ite	ne
 8004580:	2301      	movne	r3, #1
 8004582:	2300      	moveq	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	e022      	b.n	80045ce <HAL_TIM_PWM_Start+0x6a>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b04      	cmp	r3, #4
 800458c:	d109      	bne.n	80045a2 <HAL_TIM_PWM_Start+0x3e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	bf14      	ite	ne
 800459a:	2301      	movne	r3, #1
 800459c:	2300      	moveq	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	e015      	b.n	80045ce <HAL_TIM_PWM_Start+0x6a>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d109      	bne.n	80045bc <HAL_TIM_PWM_Start+0x58>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	bf14      	ite	ne
 80045b4:	2301      	movne	r3, #1
 80045b6:	2300      	moveq	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	e008      	b.n	80045ce <HAL_TIM_PWM_Start+0x6a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	bf14      	ite	ne
 80045c8:	2301      	movne	r3, #1
 80045ca:	2300      	moveq	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e07c      	b.n	80046d0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <HAL_TIM_PWM_Start+0x82>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045e4:	e013      	b.n	800460e <HAL_TIM_PWM_Start+0xaa>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d104      	bne.n	80045f6 <HAL_TIM_PWM_Start+0x92>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045f4:	e00b      	b.n	800460e <HAL_TIM_PWM_Start+0xaa>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d104      	bne.n	8004606 <HAL_TIM_PWM_Start+0xa2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004604:	e003      	b.n	800460e <HAL_TIM_PWM_Start+0xaa>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2201      	movs	r2, #1
 8004614:	6839      	ldr	r1, [r7, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fb84 	bl	8004d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a2d      	ldr	r2, [pc, #180]	@ (80046d8 <HAL_TIM_PWM_Start+0x174>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d004      	beq.n	8004630 <HAL_TIM_PWM_Start+0xcc>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a2c      	ldr	r2, [pc, #176]	@ (80046dc <HAL_TIM_PWM_Start+0x178>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d101      	bne.n	8004634 <HAL_TIM_PWM_Start+0xd0>
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <HAL_TIM_PWM_Start+0xd2>
 8004634:	2300      	movs	r3, #0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004648:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a22      	ldr	r2, [pc, #136]	@ (80046d8 <HAL_TIM_PWM_Start+0x174>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d022      	beq.n	800469a <HAL_TIM_PWM_Start+0x136>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800465c:	d01d      	beq.n	800469a <HAL_TIM_PWM_Start+0x136>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1f      	ldr	r2, [pc, #124]	@ (80046e0 <HAL_TIM_PWM_Start+0x17c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d018      	beq.n	800469a <HAL_TIM_PWM_Start+0x136>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <HAL_TIM_PWM_Start+0x180>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <HAL_TIM_PWM_Start+0x136>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1c      	ldr	r2, [pc, #112]	@ (80046e8 <HAL_TIM_PWM_Start+0x184>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00e      	beq.n	800469a <HAL_TIM_PWM_Start+0x136>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a16      	ldr	r2, [pc, #88]	@ (80046dc <HAL_TIM_PWM_Start+0x178>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d009      	beq.n	800469a <HAL_TIM_PWM_Start+0x136>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a18      	ldr	r2, [pc, #96]	@ (80046ec <HAL_TIM_PWM_Start+0x188>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d004      	beq.n	800469a <HAL_TIM_PWM_Start+0x136>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a16      	ldr	r2, [pc, #88]	@ (80046f0 <HAL_TIM_PWM_Start+0x18c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d111      	bne.n	80046be <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b06      	cmp	r3, #6
 80046aa:	d010      	beq.n	80046ce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046bc:	e007      	b.n	80046ce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0201 	orr.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40010400 	.word	0x40010400
 80046e0:	40000400 	.word	0x40000400
 80046e4:	40000800 	.word	0x40000800
 80046e8:	40000c00 	.word	0x40000c00
 80046ec:	40014000 	.word	0x40014000
 80046f0:	40001800 	.word	0x40001800

080046f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800470e:	2302      	movs	r3, #2
 8004710:	e0ae      	b.n	8004870 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b0c      	cmp	r3, #12
 800471e:	f200 809f 	bhi.w	8004860 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004722:	a201      	add	r2, pc, #4	@ (adr r2, 8004728 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004728:	0800475d 	.word	0x0800475d
 800472c:	08004861 	.word	0x08004861
 8004730:	08004861 	.word	0x08004861
 8004734:	08004861 	.word	0x08004861
 8004738:	0800479d 	.word	0x0800479d
 800473c:	08004861 	.word	0x08004861
 8004740:	08004861 	.word	0x08004861
 8004744:	08004861 	.word	0x08004861
 8004748:	080047df 	.word	0x080047df
 800474c:	08004861 	.word	0x08004861
 8004750:	08004861 	.word	0x08004861
 8004754:	08004861 	.word	0x08004861
 8004758:	0800481f 	.word	0x0800481f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f92e 	bl	80049c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0208 	orr.w	r2, r2, #8
 8004776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0204 	bic.w	r2, r2, #4
 8004786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6999      	ldr	r1, [r3, #24]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	619a      	str	r2, [r3, #24]
      break;
 800479a:	e064      	b.n	8004866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f97e 	bl	8004aa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6999      	ldr	r1, [r3, #24]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	021a      	lsls	r2, r3, #8
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	619a      	str	r2, [r3, #24]
      break;
 80047dc:	e043      	b.n	8004866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 f9d3 	bl	8004b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0208 	orr.w	r2, r2, #8
 80047f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0204 	bic.w	r2, r2, #4
 8004808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69d9      	ldr	r1, [r3, #28]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	61da      	str	r2, [r3, #28]
      break;
 800481c:	e023      	b.n	8004866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fa27 	bl	8004c78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69d9      	ldr	r1, [r3, #28]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	021a      	lsls	r2, r3, #8
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	61da      	str	r2, [r3, #28]
      break;
 800485e:	e002      	b.n	8004866 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	75fb      	strb	r3, [r7, #23]
      break;
 8004864:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800486e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a43      	ldr	r2, [pc, #268]	@ (8004998 <TIM_Base_SetConfig+0x120>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d013      	beq.n	80048b8 <TIM_Base_SetConfig+0x40>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004896:	d00f      	beq.n	80048b8 <TIM_Base_SetConfig+0x40>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a40      	ldr	r2, [pc, #256]	@ (800499c <TIM_Base_SetConfig+0x124>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00b      	beq.n	80048b8 <TIM_Base_SetConfig+0x40>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a3f      	ldr	r2, [pc, #252]	@ (80049a0 <TIM_Base_SetConfig+0x128>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d007      	beq.n	80048b8 <TIM_Base_SetConfig+0x40>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a3e      	ldr	r2, [pc, #248]	@ (80049a4 <TIM_Base_SetConfig+0x12c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3d      	ldr	r2, [pc, #244]	@ (80049a8 <TIM_Base_SetConfig+0x130>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d108      	bne.n	80048ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a32      	ldr	r2, [pc, #200]	@ (8004998 <TIM_Base_SetConfig+0x120>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d02b      	beq.n	800492a <TIM_Base_SetConfig+0xb2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d8:	d027      	beq.n	800492a <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a2f      	ldr	r2, [pc, #188]	@ (800499c <TIM_Base_SetConfig+0x124>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d023      	beq.n	800492a <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a2e      	ldr	r2, [pc, #184]	@ (80049a0 <TIM_Base_SetConfig+0x128>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d01f      	beq.n	800492a <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2d      	ldr	r2, [pc, #180]	@ (80049a4 <TIM_Base_SetConfig+0x12c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01b      	beq.n	800492a <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2c      	ldr	r2, [pc, #176]	@ (80049a8 <TIM_Base_SetConfig+0x130>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d017      	beq.n	800492a <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2b      	ldr	r2, [pc, #172]	@ (80049ac <TIM_Base_SetConfig+0x134>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d013      	beq.n	800492a <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2a      	ldr	r2, [pc, #168]	@ (80049b0 <TIM_Base_SetConfig+0x138>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00f      	beq.n	800492a <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a29      	ldr	r2, [pc, #164]	@ (80049b4 <TIM_Base_SetConfig+0x13c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00b      	beq.n	800492a <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a28      	ldr	r2, [pc, #160]	@ (80049b8 <TIM_Base_SetConfig+0x140>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a27      	ldr	r2, [pc, #156]	@ (80049bc <TIM_Base_SetConfig+0x144>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d003      	beq.n	800492a <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a26      	ldr	r2, [pc, #152]	@ (80049c0 <TIM_Base_SetConfig+0x148>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d108      	bne.n	800493c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a0e      	ldr	r2, [pc, #56]	@ (8004998 <TIM_Base_SetConfig+0x120>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_Base_SetConfig+0xf2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a10      	ldr	r2, [pc, #64]	@ (80049a8 <TIM_Base_SetConfig+0x130>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d103      	bne.n	8004972 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f043 0204 	orr.w	r2, r3, #4
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40010000 	.word	0x40010000
 800499c:	40000400 	.word	0x40000400
 80049a0:	40000800 	.word	0x40000800
 80049a4:	40000c00 	.word	0x40000c00
 80049a8:	40010400 	.word	0x40010400
 80049ac:	40014000 	.word	0x40014000
 80049b0:	40014400 	.word	0x40014400
 80049b4:	40014800 	.word	0x40014800
 80049b8:	40001800 	.word	0x40001800
 80049bc:	40001c00 	.word	0x40001c00
 80049c0:	40002000 	.word	0x40002000

080049c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f023 0201 	bic.w	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0303 	bic.w	r3, r3, #3
 80049fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f023 0302 	bic.w	r3, r3, #2
 8004a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a20      	ldr	r2, [pc, #128]	@ (8004a9c <TIM_OC1_SetConfig+0xd8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_OC1_SetConfig+0x64>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a1f      	ldr	r2, [pc, #124]	@ (8004aa0 <TIM_OC1_SetConfig+0xdc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d10c      	bne.n	8004a42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f023 0308 	bic.w	r3, r3, #8
 8004a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f023 0304 	bic.w	r3, r3, #4
 8004a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a15      	ldr	r2, [pc, #84]	@ (8004a9c <TIM_OC1_SetConfig+0xd8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d003      	beq.n	8004a52 <TIM_OC1_SetConfig+0x8e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a14      	ldr	r2, [pc, #80]	@ (8004aa0 <TIM_OC1_SetConfig+0xdc>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d111      	bne.n	8004a76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	621a      	str	r2, [r3, #32]
}
 8004a90:	bf00      	nop
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40010400 	.word	0x40010400

08004aa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f023 0210 	bic.w	r2, r3, #16
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0320 	bic.w	r3, r3, #32
 8004aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a22      	ldr	r2, [pc, #136]	@ (8004b88 <TIM_OC2_SetConfig+0xe4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_OC2_SetConfig+0x68>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a21      	ldr	r2, [pc, #132]	@ (8004b8c <TIM_OC2_SetConfig+0xe8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d10d      	bne.n	8004b28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a17      	ldr	r2, [pc, #92]	@ (8004b88 <TIM_OC2_SetConfig+0xe4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_OC2_SetConfig+0x94>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a16      	ldr	r2, [pc, #88]	@ (8004b8c <TIM_OC2_SetConfig+0xe8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d113      	bne.n	8004b60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	621a      	str	r2, [r3, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40010000 	.word	0x40010000
 8004b8c:	40010400 	.word	0x40010400

08004b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a21      	ldr	r2, [pc, #132]	@ (8004c70 <TIM_OC3_SetConfig+0xe0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d003      	beq.n	8004bf6 <TIM_OC3_SetConfig+0x66>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a20      	ldr	r2, [pc, #128]	@ (8004c74 <TIM_OC3_SetConfig+0xe4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d10d      	bne.n	8004c12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a16      	ldr	r2, [pc, #88]	@ (8004c70 <TIM_OC3_SetConfig+0xe0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_OC3_SetConfig+0x92>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a15      	ldr	r2, [pc, #84]	@ (8004c74 <TIM_OC3_SetConfig+0xe4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d113      	bne.n	8004c4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	621a      	str	r2, [r3, #32]
}
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40010000 	.word	0x40010000
 8004c74:	40010400 	.word	0x40010400

08004c78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	031b      	lsls	r3, r3, #12
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a12      	ldr	r2, [pc, #72]	@ (8004d1c <TIM_OC4_SetConfig+0xa4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_OC4_SetConfig+0x68>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a11      	ldr	r2, [pc, #68]	@ (8004d20 <TIM_OC4_SetConfig+0xa8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d109      	bne.n	8004cf4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ce6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	019b      	lsls	r3, r3, #6
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40010400 	.word	0x40010400

08004d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	2201      	movs	r2, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1a      	ldr	r2, [r3, #32]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	401a      	ands	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a1a      	ldr	r2, [r3, #32]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f003 031f 	and.w	r3, r3, #31
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e05a      	b.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a21      	ldr	r2, [pc, #132]	@ (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d022      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd4:	d01d      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1d      	ldr	r2, [pc, #116]	@ (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d018      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1a      	ldr	r2, [pc, #104]	@ (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a18      	ldr	r2, [pc, #96]	@ (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a17      	ldr	r2, [pc, #92]	@ (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a15      	ldr	r2, [pc, #84]	@ (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d10c      	bne.n	8004e2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40010400 	.word	0x40010400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40001800 	.word	0x40001800

08004e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e042      	b.n	8004f00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fb ff0a 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2224      	movs	r2, #36	@ 0x24
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f973 	bl	8005198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695a      	ldr	r2, [r3, #20]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	@ 0x28
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	4613      	mov	r3, r2
 8004f16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d175      	bne.n	8005014 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_UART_Transmit+0x2c>
 8004f2e:	88fb      	ldrh	r3, [r7, #6]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e06e      	b.n	8005016 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2221      	movs	r2, #33	@ 0x21
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f46:	f7fc f81d 	bl	8000f84 <HAL_GetTick>
 8004f4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	88fa      	ldrh	r2, [r7, #6]
 8004f50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	88fa      	ldrh	r2, [r7, #6]
 8004f56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f60:	d108      	bne.n	8004f74 <HAL_UART_Transmit+0x6c>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	61bb      	str	r3, [r7, #24]
 8004f72:	e003      	b.n	8004f7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f7c:	e02e      	b.n	8004fdc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2200      	movs	r2, #0
 8004f86:	2180      	movs	r1, #128	@ 0x80
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f848 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e03a      	b.n	8005016 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10b      	bne.n	8004fbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	3302      	adds	r3, #2
 8004fba:	61bb      	str	r3, [r7, #24]
 8004fbc:	e007      	b.n	8004fce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	781a      	ldrb	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1cb      	bne.n	8004f7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2200      	movs	r2, #0
 8004fee:	2140      	movs	r1, #64	@ 0x40
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f814 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e006      	b.n	8005016 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	e000      	b.n	8005016 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005014:	2302      	movs	r3, #2
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b086      	sub	sp, #24
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	603b      	str	r3, [r7, #0]
 800502a:	4613      	mov	r3, r2
 800502c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800502e:	e03b      	b.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d037      	beq.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005038:	f7fb ffa4 	bl	8000f84 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	6a3a      	ldr	r2, [r7, #32]
 8005044:	429a      	cmp	r2, r3
 8005046:	d302      	bcc.n	800504e <UART_WaitOnFlagUntilTimeout+0x30>
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e03a      	b.n	80050c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d023      	beq.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b80      	cmp	r3, #128	@ 0x80
 8005064:	d020      	beq.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b40      	cmp	r3, #64	@ 0x40
 800506a:	d01d      	beq.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b08      	cmp	r3, #8
 8005078:	d116      	bne.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800507a:	2300      	movs	r3, #0
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f81d 	bl	80050d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2208      	movs	r2, #8
 800509a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e00f      	b.n	80050c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4013      	ands	r3, r2
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	bf0c      	ite	eq
 80050b8:	2301      	moveq	r3, #1
 80050ba:	2300      	movne	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d0b4      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b095      	sub	sp, #84	@ 0x54
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	330c      	adds	r3, #12
 80050f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80050fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e5      	bne.n	80050d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3314      	adds	r3, #20
 8005112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	61fb      	str	r3, [r7, #28]
   return(result);
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3314      	adds	r3, #20
 800512a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800512c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800512e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e5      	bne.n	800510c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005144:	2b01      	cmp	r3, #1
 8005146:	d119      	bne.n	800517c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	60bb      	str	r3, [r7, #8]
   return(result);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f023 0310 	bic.w	r3, r3, #16
 800515e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	330c      	adds	r3, #12
 8005166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005168:	61ba      	str	r2, [r7, #24]
 800516a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	6979      	ldr	r1, [r7, #20]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	613b      	str	r3, [r7, #16]
   return(result);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e5      	bne.n	8005148 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800518a:	bf00      	nop
 800518c:	3754      	adds	r7, #84	@ 0x54
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800519c:	b0c0      	sub	sp, #256	@ 0x100
 800519e:	af00      	add	r7, sp, #0
 80051a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b4:	68d9      	ldr	r1, [r3, #12]
 80051b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	ea40 0301 	orr.w	r3, r0, r1
 80051c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051f0:	f021 010c 	bic.w	r1, r1, #12
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051fe:	430b      	orrs	r3, r1
 8005200:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800520e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005212:	6999      	ldr	r1, [r3, #24]
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	ea40 0301 	orr.w	r3, r0, r1
 800521e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	4b8f      	ldr	r3, [pc, #572]	@ (8005464 <UART_SetConfig+0x2cc>)
 8005228:	429a      	cmp	r2, r3
 800522a:	d005      	beq.n	8005238 <UART_SetConfig+0xa0>
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b8d      	ldr	r3, [pc, #564]	@ (8005468 <UART_SetConfig+0x2d0>)
 8005234:	429a      	cmp	r2, r3
 8005236:	d104      	bne.n	8005242 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005238:	f7fe fc62 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 800523c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005240:	e003      	b.n	800524a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005242:	f7fe fc49 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8005246:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800524a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005254:	f040 810c 	bne.w	8005470 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800525c:	2200      	movs	r2, #0
 800525e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005262:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005266:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800526a:	4622      	mov	r2, r4
 800526c:	462b      	mov	r3, r5
 800526e:	1891      	adds	r1, r2, r2
 8005270:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005272:	415b      	adcs	r3, r3
 8005274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800527a:	4621      	mov	r1, r4
 800527c:	eb12 0801 	adds.w	r8, r2, r1
 8005280:	4629      	mov	r1, r5
 8005282:	eb43 0901 	adc.w	r9, r3, r1
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800529a:	4690      	mov	r8, r2
 800529c:	4699      	mov	r9, r3
 800529e:	4623      	mov	r3, r4
 80052a0:	eb18 0303 	adds.w	r3, r8, r3
 80052a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052a8:	462b      	mov	r3, r5
 80052aa:	eb49 0303 	adc.w	r3, r9, r3
 80052ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80052c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052c6:	460b      	mov	r3, r1
 80052c8:	18db      	adds	r3, r3, r3
 80052ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80052cc:	4613      	mov	r3, r2
 80052ce:	eb42 0303 	adc.w	r3, r2, r3
 80052d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80052d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80052d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052dc:	f7fa fff0 	bl	80002c0 <__aeabi_uldivmod>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4b61      	ldr	r3, [pc, #388]	@ (800546c <UART_SetConfig+0x2d4>)
 80052e6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	011c      	lsls	r4, r3, #4
 80052ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005300:	4642      	mov	r2, r8
 8005302:	464b      	mov	r3, r9
 8005304:	1891      	adds	r1, r2, r2
 8005306:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005308:	415b      	adcs	r3, r3
 800530a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800530c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005310:	4641      	mov	r1, r8
 8005312:	eb12 0a01 	adds.w	sl, r2, r1
 8005316:	4649      	mov	r1, r9
 8005318:	eb43 0b01 	adc.w	fp, r3, r1
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800532c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005330:	4692      	mov	sl, r2
 8005332:	469b      	mov	fp, r3
 8005334:	4643      	mov	r3, r8
 8005336:	eb1a 0303 	adds.w	r3, sl, r3
 800533a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800533e:	464b      	mov	r3, r9
 8005340:	eb4b 0303 	adc.w	r3, fp, r3
 8005344:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005354:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005358:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800535c:	460b      	mov	r3, r1
 800535e:	18db      	adds	r3, r3, r3
 8005360:	643b      	str	r3, [r7, #64]	@ 0x40
 8005362:	4613      	mov	r3, r2
 8005364:	eb42 0303 	adc.w	r3, r2, r3
 8005368:	647b      	str	r3, [r7, #68]	@ 0x44
 800536a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800536e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005372:	f7fa ffa5 	bl	80002c0 <__aeabi_uldivmod>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4611      	mov	r1, r2
 800537c:	4b3b      	ldr	r3, [pc, #236]	@ (800546c <UART_SetConfig+0x2d4>)
 800537e:	fba3 2301 	umull	r2, r3, r3, r1
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	2264      	movs	r2, #100	@ 0x64
 8005386:	fb02 f303 	mul.w	r3, r2, r3
 800538a:	1acb      	subs	r3, r1, r3
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005392:	4b36      	ldr	r3, [pc, #216]	@ (800546c <UART_SetConfig+0x2d4>)
 8005394:	fba3 2302 	umull	r2, r3, r3, r2
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053a0:	441c      	add	r4, r3
 80053a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80053b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80053b4:	4642      	mov	r2, r8
 80053b6:	464b      	mov	r3, r9
 80053b8:	1891      	adds	r1, r2, r2
 80053ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053bc:	415b      	adcs	r3, r3
 80053be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053c4:	4641      	mov	r1, r8
 80053c6:	1851      	adds	r1, r2, r1
 80053c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80053ca:	4649      	mov	r1, r9
 80053cc:	414b      	adcs	r3, r1
 80053ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053dc:	4659      	mov	r1, fp
 80053de:	00cb      	lsls	r3, r1, #3
 80053e0:	4651      	mov	r1, sl
 80053e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053e6:	4651      	mov	r1, sl
 80053e8:	00ca      	lsls	r2, r1, #3
 80053ea:	4610      	mov	r0, r2
 80053ec:	4619      	mov	r1, r3
 80053ee:	4603      	mov	r3, r0
 80053f0:	4642      	mov	r2, r8
 80053f2:	189b      	adds	r3, r3, r2
 80053f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053f8:	464b      	mov	r3, r9
 80053fa:	460a      	mov	r2, r1
 80053fc:	eb42 0303 	adc.w	r3, r2, r3
 8005400:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005410:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005418:	460b      	mov	r3, r1
 800541a:	18db      	adds	r3, r3, r3
 800541c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800541e:	4613      	mov	r3, r2
 8005420:	eb42 0303 	adc.w	r3, r2, r3
 8005424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800542a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800542e:	f7fa ff47 	bl	80002c0 <__aeabi_uldivmod>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4b0d      	ldr	r3, [pc, #52]	@ (800546c <UART_SetConfig+0x2d4>)
 8005438:	fba3 1302 	umull	r1, r3, r3, r2
 800543c:	095b      	lsrs	r3, r3, #5
 800543e:	2164      	movs	r1, #100	@ 0x64
 8005440:	fb01 f303 	mul.w	r3, r1, r3
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	3332      	adds	r3, #50	@ 0x32
 800544a:	4a08      	ldr	r2, [pc, #32]	@ (800546c <UART_SetConfig+0x2d4>)
 800544c:	fba2 2303 	umull	r2, r3, r2, r3
 8005450:	095b      	lsrs	r3, r3, #5
 8005452:	f003 0207 	and.w	r2, r3, #7
 8005456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4422      	add	r2, r4
 800545e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005460:	e106      	b.n	8005670 <UART_SetConfig+0x4d8>
 8005462:	bf00      	nop
 8005464:	40011000 	.word	0x40011000
 8005468:	40011400 	.word	0x40011400
 800546c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005474:	2200      	movs	r2, #0
 8005476:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800547a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800547e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005482:	4642      	mov	r2, r8
 8005484:	464b      	mov	r3, r9
 8005486:	1891      	adds	r1, r2, r2
 8005488:	6239      	str	r1, [r7, #32]
 800548a:	415b      	adcs	r3, r3
 800548c:	627b      	str	r3, [r7, #36]	@ 0x24
 800548e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005492:	4641      	mov	r1, r8
 8005494:	1854      	adds	r4, r2, r1
 8005496:	4649      	mov	r1, r9
 8005498:	eb43 0501 	adc.w	r5, r3, r1
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	00eb      	lsls	r3, r5, #3
 80054a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054aa:	00e2      	lsls	r2, r4, #3
 80054ac:	4614      	mov	r4, r2
 80054ae:	461d      	mov	r5, r3
 80054b0:	4643      	mov	r3, r8
 80054b2:	18e3      	adds	r3, r4, r3
 80054b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054b8:	464b      	mov	r3, r9
 80054ba:	eb45 0303 	adc.w	r3, r5, r3
 80054be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054de:	4629      	mov	r1, r5
 80054e0:	008b      	lsls	r3, r1, #2
 80054e2:	4621      	mov	r1, r4
 80054e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054e8:	4621      	mov	r1, r4
 80054ea:	008a      	lsls	r2, r1, #2
 80054ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054f0:	f7fa fee6 	bl	80002c0 <__aeabi_uldivmod>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	4b60      	ldr	r3, [pc, #384]	@ (800567c <UART_SetConfig+0x4e4>)
 80054fa:	fba3 2302 	umull	r2, r3, r3, r2
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	011c      	lsls	r4, r3, #4
 8005502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005506:	2200      	movs	r2, #0
 8005508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800550c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005510:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005514:	4642      	mov	r2, r8
 8005516:	464b      	mov	r3, r9
 8005518:	1891      	adds	r1, r2, r2
 800551a:	61b9      	str	r1, [r7, #24]
 800551c:	415b      	adcs	r3, r3
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005524:	4641      	mov	r1, r8
 8005526:	1851      	adds	r1, r2, r1
 8005528:	6139      	str	r1, [r7, #16]
 800552a:	4649      	mov	r1, r9
 800552c:	414b      	adcs	r3, r1
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800553c:	4659      	mov	r1, fp
 800553e:	00cb      	lsls	r3, r1, #3
 8005540:	4651      	mov	r1, sl
 8005542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005546:	4651      	mov	r1, sl
 8005548:	00ca      	lsls	r2, r1, #3
 800554a:	4610      	mov	r0, r2
 800554c:	4619      	mov	r1, r3
 800554e:	4603      	mov	r3, r0
 8005550:	4642      	mov	r2, r8
 8005552:	189b      	adds	r3, r3, r2
 8005554:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005558:	464b      	mov	r3, r9
 800555a:	460a      	mov	r2, r1
 800555c:	eb42 0303 	adc.w	r3, r2, r3
 8005560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800556e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800557c:	4649      	mov	r1, r9
 800557e:	008b      	lsls	r3, r1, #2
 8005580:	4641      	mov	r1, r8
 8005582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005586:	4641      	mov	r1, r8
 8005588:	008a      	lsls	r2, r1, #2
 800558a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800558e:	f7fa fe97 	bl	80002c0 <__aeabi_uldivmod>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4611      	mov	r1, r2
 8005598:	4b38      	ldr	r3, [pc, #224]	@ (800567c <UART_SetConfig+0x4e4>)
 800559a:	fba3 2301 	umull	r2, r3, r3, r1
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	2264      	movs	r2, #100	@ 0x64
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	1acb      	subs	r3, r1, r3
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	3332      	adds	r3, #50	@ 0x32
 80055ac:	4a33      	ldr	r2, [pc, #204]	@ (800567c <UART_SetConfig+0x4e4>)
 80055ae:	fba2 2303 	umull	r2, r3, r2, r3
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055b8:	441c      	add	r4, r3
 80055ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055be:	2200      	movs	r2, #0
 80055c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80055c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80055c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80055c8:	4642      	mov	r2, r8
 80055ca:	464b      	mov	r3, r9
 80055cc:	1891      	adds	r1, r2, r2
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	415b      	adcs	r3, r3
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055d8:	4641      	mov	r1, r8
 80055da:	1851      	adds	r1, r2, r1
 80055dc:	6039      	str	r1, [r7, #0]
 80055de:	4649      	mov	r1, r9
 80055e0:	414b      	adcs	r3, r1
 80055e2:	607b      	str	r3, [r7, #4]
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055f0:	4659      	mov	r1, fp
 80055f2:	00cb      	lsls	r3, r1, #3
 80055f4:	4651      	mov	r1, sl
 80055f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055fa:	4651      	mov	r1, sl
 80055fc:	00ca      	lsls	r2, r1, #3
 80055fe:	4610      	mov	r0, r2
 8005600:	4619      	mov	r1, r3
 8005602:	4603      	mov	r3, r0
 8005604:	4642      	mov	r2, r8
 8005606:	189b      	adds	r3, r3, r2
 8005608:	66bb      	str	r3, [r7, #104]	@ 0x68
 800560a:	464b      	mov	r3, r9
 800560c:	460a      	mov	r2, r1
 800560e:	eb42 0303 	adc.w	r3, r2, r3
 8005612:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	663b      	str	r3, [r7, #96]	@ 0x60
 800561e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800562c:	4649      	mov	r1, r9
 800562e:	008b      	lsls	r3, r1, #2
 8005630:	4641      	mov	r1, r8
 8005632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005636:	4641      	mov	r1, r8
 8005638:	008a      	lsls	r2, r1, #2
 800563a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800563e:	f7fa fe3f 	bl	80002c0 <__aeabi_uldivmod>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <UART_SetConfig+0x4e4>)
 8005648:	fba3 1302 	umull	r1, r3, r3, r2
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	2164      	movs	r1, #100	@ 0x64
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	3332      	adds	r3, #50	@ 0x32
 800565a:	4a08      	ldr	r2, [pc, #32]	@ (800567c <UART_SetConfig+0x4e4>)
 800565c:	fba2 2303 	umull	r2, r3, r2, r3
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	f003 020f 	and.w	r2, r3, #15
 8005666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4422      	add	r2, r4
 800566e:	609a      	str	r2, [r3, #8]
}
 8005670:	bf00      	nop
 8005672:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005676:	46bd      	mov	sp, r7
 8005678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800567c:	51eb851f 	.word	0x51eb851f

08005680 <siprintf>:
 8005680:	b40e      	push	{r1, r2, r3}
 8005682:	b510      	push	{r4, lr}
 8005684:	b09d      	sub	sp, #116	@ 0x74
 8005686:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005688:	9002      	str	r0, [sp, #8]
 800568a:	9006      	str	r0, [sp, #24]
 800568c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005690:	480a      	ldr	r0, [pc, #40]	@ (80056bc <siprintf+0x3c>)
 8005692:	9107      	str	r1, [sp, #28]
 8005694:	9104      	str	r1, [sp, #16]
 8005696:	490a      	ldr	r1, [pc, #40]	@ (80056c0 <siprintf+0x40>)
 8005698:	f853 2b04 	ldr.w	r2, [r3], #4
 800569c:	9105      	str	r1, [sp, #20]
 800569e:	2400      	movs	r4, #0
 80056a0:	a902      	add	r1, sp, #8
 80056a2:	6800      	ldr	r0, [r0, #0]
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80056a8:	f000 f994 	bl	80059d4 <_svfiprintf_r>
 80056ac:	9b02      	ldr	r3, [sp, #8]
 80056ae:	701c      	strb	r4, [r3, #0]
 80056b0:	b01d      	add	sp, #116	@ 0x74
 80056b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056b6:	b003      	add	sp, #12
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	2000000c 	.word	0x2000000c
 80056c0:	ffff0208 	.word	0xffff0208

080056c4 <memset>:
 80056c4:	4402      	add	r2, r0
 80056c6:	4603      	mov	r3, r0
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d100      	bne.n	80056ce <memset+0xa>
 80056cc:	4770      	bx	lr
 80056ce:	f803 1b01 	strb.w	r1, [r3], #1
 80056d2:	e7f9      	b.n	80056c8 <memset+0x4>

080056d4 <__errno>:
 80056d4:	4b01      	ldr	r3, [pc, #4]	@ (80056dc <__errno+0x8>)
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	2000000c 	.word	0x2000000c

080056e0 <__libc_init_array>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	4d0d      	ldr	r5, [pc, #52]	@ (8005718 <__libc_init_array+0x38>)
 80056e4:	4c0d      	ldr	r4, [pc, #52]	@ (800571c <__libc_init_array+0x3c>)
 80056e6:	1b64      	subs	r4, r4, r5
 80056e8:	10a4      	asrs	r4, r4, #2
 80056ea:	2600      	movs	r6, #0
 80056ec:	42a6      	cmp	r6, r4
 80056ee:	d109      	bne.n	8005704 <__libc_init_array+0x24>
 80056f0:	4d0b      	ldr	r5, [pc, #44]	@ (8005720 <__libc_init_array+0x40>)
 80056f2:	4c0c      	ldr	r4, [pc, #48]	@ (8005724 <__libc_init_array+0x44>)
 80056f4:	f000 fc64 	bl	8005fc0 <_init>
 80056f8:	1b64      	subs	r4, r4, r5
 80056fa:	10a4      	asrs	r4, r4, #2
 80056fc:	2600      	movs	r6, #0
 80056fe:	42a6      	cmp	r6, r4
 8005700:	d105      	bne.n	800570e <__libc_init_array+0x2e>
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	f855 3b04 	ldr.w	r3, [r5], #4
 8005708:	4798      	blx	r3
 800570a:	3601      	adds	r6, #1
 800570c:	e7ee      	b.n	80056ec <__libc_init_array+0xc>
 800570e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005712:	4798      	blx	r3
 8005714:	3601      	adds	r6, #1
 8005716:	e7f2      	b.n	80056fe <__libc_init_array+0x1e>
 8005718:	08006060 	.word	0x08006060
 800571c:	08006060 	.word	0x08006060
 8005720:	08006060 	.word	0x08006060
 8005724:	08006064 	.word	0x08006064

08005728 <__retarget_lock_acquire_recursive>:
 8005728:	4770      	bx	lr

0800572a <__retarget_lock_release_recursive>:
 800572a:	4770      	bx	lr

0800572c <_free_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4605      	mov	r5, r0
 8005730:	2900      	cmp	r1, #0
 8005732:	d041      	beq.n	80057b8 <_free_r+0x8c>
 8005734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005738:	1f0c      	subs	r4, r1, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	bfb8      	it	lt
 800573e:	18e4      	addlt	r4, r4, r3
 8005740:	f000 f8e0 	bl	8005904 <__malloc_lock>
 8005744:	4a1d      	ldr	r2, [pc, #116]	@ (80057bc <_free_r+0x90>)
 8005746:	6813      	ldr	r3, [r2, #0]
 8005748:	b933      	cbnz	r3, 8005758 <_free_r+0x2c>
 800574a:	6063      	str	r3, [r4, #4]
 800574c:	6014      	str	r4, [r2, #0]
 800574e:	4628      	mov	r0, r5
 8005750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005754:	f000 b8dc 	b.w	8005910 <__malloc_unlock>
 8005758:	42a3      	cmp	r3, r4
 800575a:	d908      	bls.n	800576e <_free_r+0x42>
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	1821      	adds	r1, r4, r0
 8005760:	428b      	cmp	r3, r1
 8005762:	bf01      	itttt	eq
 8005764:	6819      	ldreq	r1, [r3, #0]
 8005766:	685b      	ldreq	r3, [r3, #4]
 8005768:	1809      	addeq	r1, r1, r0
 800576a:	6021      	streq	r1, [r4, #0]
 800576c:	e7ed      	b.n	800574a <_free_r+0x1e>
 800576e:	461a      	mov	r2, r3
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	b10b      	cbz	r3, 8005778 <_free_r+0x4c>
 8005774:	42a3      	cmp	r3, r4
 8005776:	d9fa      	bls.n	800576e <_free_r+0x42>
 8005778:	6811      	ldr	r1, [r2, #0]
 800577a:	1850      	adds	r0, r2, r1
 800577c:	42a0      	cmp	r0, r4
 800577e:	d10b      	bne.n	8005798 <_free_r+0x6c>
 8005780:	6820      	ldr	r0, [r4, #0]
 8005782:	4401      	add	r1, r0
 8005784:	1850      	adds	r0, r2, r1
 8005786:	4283      	cmp	r3, r0
 8005788:	6011      	str	r1, [r2, #0]
 800578a:	d1e0      	bne.n	800574e <_free_r+0x22>
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	6053      	str	r3, [r2, #4]
 8005792:	4408      	add	r0, r1
 8005794:	6010      	str	r0, [r2, #0]
 8005796:	e7da      	b.n	800574e <_free_r+0x22>
 8005798:	d902      	bls.n	80057a0 <_free_r+0x74>
 800579a:	230c      	movs	r3, #12
 800579c:	602b      	str	r3, [r5, #0]
 800579e:	e7d6      	b.n	800574e <_free_r+0x22>
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	1821      	adds	r1, r4, r0
 80057a4:	428b      	cmp	r3, r1
 80057a6:	bf04      	itt	eq
 80057a8:	6819      	ldreq	r1, [r3, #0]
 80057aa:	685b      	ldreq	r3, [r3, #4]
 80057ac:	6063      	str	r3, [r4, #4]
 80057ae:	bf04      	itt	eq
 80057b0:	1809      	addeq	r1, r1, r0
 80057b2:	6021      	streq	r1, [r4, #0]
 80057b4:	6054      	str	r4, [r2, #4]
 80057b6:	e7ca      	b.n	800574e <_free_r+0x22>
 80057b8:	bd38      	pop	{r3, r4, r5, pc}
 80057ba:	bf00      	nop
 80057bc:	2000030c 	.word	0x2000030c

080057c0 <sbrk_aligned>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	4e0f      	ldr	r6, [pc, #60]	@ (8005800 <sbrk_aligned+0x40>)
 80057c4:	460c      	mov	r4, r1
 80057c6:	6831      	ldr	r1, [r6, #0]
 80057c8:	4605      	mov	r5, r0
 80057ca:	b911      	cbnz	r1, 80057d2 <sbrk_aligned+0x12>
 80057cc:	f000 fba4 	bl	8005f18 <_sbrk_r>
 80057d0:	6030      	str	r0, [r6, #0]
 80057d2:	4621      	mov	r1, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	f000 fb9f 	bl	8005f18 <_sbrk_r>
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	d103      	bne.n	80057e6 <sbrk_aligned+0x26>
 80057de:	f04f 34ff 	mov.w	r4, #4294967295
 80057e2:	4620      	mov	r0, r4
 80057e4:	bd70      	pop	{r4, r5, r6, pc}
 80057e6:	1cc4      	adds	r4, r0, #3
 80057e8:	f024 0403 	bic.w	r4, r4, #3
 80057ec:	42a0      	cmp	r0, r4
 80057ee:	d0f8      	beq.n	80057e2 <sbrk_aligned+0x22>
 80057f0:	1a21      	subs	r1, r4, r0
 80057f2:	4628      	mov	r0, r5
 80057f4:	f000 fb90 	bl	8005f18 <_sbrk_r>
 80057f8:	3001      	adds	r0, #1
 80057fa:	d1f2      	bne.n	80057e2 <sbrk_aligned+0x22>
 80057fc:	e7ef      	b.n	80057de <sbrk_aligned+0x1e>
 80057fe:	bf00      	nop
 8005800:	20000308 	.word	0x20000308

08005804 <_malloc_r>:
 8005804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005808:	1ccd      	adds	r5, r1, #3
 800580a:	f025 0503 	bic.w	r5, r5, #3
 800580e:	3508      	adds	r5, #8
 8005810:	2d0c      	cmp	r5, #12
 8005812:	bf38      	it	cc
 8005814:	250c      	movcc	r5, #12
 8005816:	2d00      	cmp	r5, #0
 8005818:	4606      	mov	r6, r0
 800581a:	db01      	blt.n	8005820 <_malloc_r+0x1c>
 800581c:	42a9      	cmp	r1, r5
 800581e:	d904      	bls.n	800582a <_malloc_r+0x26>
 8005820:	230c      	movs	r3, #12
 8005822:	6033      	str	r3, [r6, #0]
 8005824:	2000      	movs	r0, #0
 8005826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800582a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005900 <_malloc_r+0xfc>
 800582e:	f000 f869 	bl	8005904 <__malloc_lock>
 8005832:	f8d8 3000 	ldr.w	r3, [r8]
 8005836:	461c      	mov	r4, r3
 8005838:	bb44      	cbnz	r4, 800588c <_malloc_r+0x88>
 800583a:	4629      	mov	r1, r5
 800583c:	4630      	mov	r0, r6
 800583e:	f7ff ffbf 	bl	80057c0 <sbrk_aligned>
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	4604      	mov	r4, r0
 8005846:	d158      	bne.n	80058fa <_malloc_r+0xf6>
 8005848:	f8d8 4000 	ldr.w	r4, [r8]
 800584c:	4627      	mov	r7, r4
 800584e:	2f00      	cmp	r7, #0
 8005850:	d143      	bne.n	80058da <_malloc_r+0xd6>
 8005852:	2c00      	cmp	r4, #0
 8005854:	d04b      	beq.n	80058ee <_malloc_r+0xea>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	4639      	mov	r1, r7
 800585a:	4630      	mov	r0, r6
 800585c:	eb04 0903 	add.w	r9, r4, r3
 8005860:	f000 fb5a 	bl	8005f18 <_sbrk_r>
 8005864:	4581      	cmp	r9, r0
 8005866:	d142      	bne.n	80058ee <_malloc_r+0xea>
 8005868:	6821      	ldr	r1, [r4, #0]
 800586a:	1a6d      	subs	r5, r5, r1
 800586c:	4629      	mov	r1, r5
 800586e:	4630      	mov	r0, r6
 8005870:	f7ff ffa6 	bl	80057c0 <sbrk_aligned>
 8005874:	3001      	adds	r0, #1
 8005876:	d03a      	beq.n	80058ee <_malloc_r+0xea>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	442b      	add	r3, r5
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	f8d8 3000 	ldr.w	r3, [r8]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	bb62      	cbnz	r2, 80058e0 <_malloc_r+0xdc>
 8005886:	f8c8 7000 	str.w	r7, [r8]
 800588a:	e00f      	b.n	80058ac <_malloc_r+0xa8>
 800588c:	6822      	ldr	r2, [r4, #0]
 800588e:	1b52      	subs	r2, r2, r5
 8005890:	d420      	bmi.n	80058d4 <_malloc_r+0xd0>
 8005892:	2a0b      	cmp	r2, #11
 8005894:	d917      	bls.n	80058c6 <_malloc_r+0xc2>
 8005896:	1961      	adds	r1, r4, r5
 8005898:	42a3      	cmp	r3, r4
 800589a:	6025      	str	r5, [r4, #0]
 800589c:	bf18      	it	ne
 800589e:	6059      	strne	r1, [r3, #4]
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	bf08      	it	eq
 80058a4:	f8c8 1000 	streq.w	r1, [r8]
 80058a8:	5162      	str	r2, [r4, r5]
 80058aa:	604b      	str	r3, [r1, #4]
 80058ac:	4630      	mov	r0, r6
 80058ae:	f000 f82f 	bl	8005910 <__malloc_unlock>
 80058b2:	f104 000b 	add.w	r0, r4, #11
 80058b6:	1d23      	adds	r3, r4, #4
 80058b8:	f020 0007 	bic.w	r0, r0, #7
 80058bc:	1ac2      	subs	r2, r0, r3
 80058be:	bf1c      	itt	ne
 80058c0:	1a1b      	subne	r3, r3, r0
 80058c2:	50a3      	strne	r3, [r4, r2]
 80058c4:	e7af      	b.n	8005826 <_malloc_r+0x22>
 80058c6:	6862      	ldr	r2, [r4, #4]
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	bf0c      	ite	eq
 80058cc:	f8c8 2000 	streq.w	r2, [r8]
 80058d0:	605a      	strne	r2, [r3, #4]
 80058d2:	e7eb      	b.n	80058ac <_malloc_r+0xa8>
 80058d4:	4623      	mov	r3, r4
 80058d6:	6864      	ldr	r4, [r4, #4]
 80058d8:	e7ae      	b.n	8005838 <_malloc_r+0x34>
 80058da:	463c      	mov	r4, r7
 80058dc:	687f      	ldr	r7, [r7, #4]
 80058de:	e7b6      	b.n	800584e <_malloc_r+0x4a>
 80058e0:	461a      	mov	r2, r3
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	d1fb      	bne.n	80058e0 <_malloc_r+0xdc>
 80058e8:	2300      	movs	r3, #0
 80058ea:	6053      	str	r3, [r2, #4]
 80058ec:	e7de      	b.n	80058ac <_malloc_r+0xa8>
 80058ee:	230c      	movs	r3, #12
 80058f0:	6033      	str	r3, [r6, #0]
 80058f2:	4630      	mov	r0, r6
 80058f4:	f000 f80c 	bl	8005910 <__malloc_unlock>
 80058f8:	e794      	b.n	8005824 <_malloc_r+0x20>
 80058fa:	6005      	str	r5, [r0, #0]
 80058fc:	e7d6      	b.n	80058ac <_malloc_r+0xa8>
 80058fe:	bf00      	nop
 8005900:	2000030c 	.word	0x2000030c

08005904 <__malloc_lock>:
 8005904:	4801      	ldr	r0, [pc, #4]	@ (800590c <__malloc_lock+0x8>)
 8005906:	f7ff bf0f 	b.w	8005728 <__retarget_lock_acquire_recursive>
 800590a:	bf00      	nop
 800590c:	20000304 	.word	0x20000304

08005910 <__malloc_unlock>:
 8005910:	4801      	ldr	r0, [pc, #4]	@ (8005918 <__malloc_unlock+0x8>)
 8005912:	f7ff bf0a 	b.w	800572a <__retarget_lock_release_recursive>
 8005916:	bf00      	nop
 8005918:	20000304 	.word	0x20000304

0800591c <__ssputs_r>:
 800591c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005920:	688e      	ldr	r6, [r1, #8]
 8005922:	461f      	mov	r7, r3
 8005924:	42be      	cmp	r6, r7
 8005926:	680b      	ldr	r3, [r1, #0]
 8005928:	4682      	mov	sl, r0
 800592a:	460c      	mov	r4, r1
 800592c:	4690      	mov	r8, r2
 800592e:	d82d      	bhi.n	800598c <__ssputs_r+0x70>
 8005930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005934:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005938:	d026      	beq.n	8005988 <__ssputs_r+0x6c>
 800593a:	6965      	ldr	r5, [r4, #20]
 800593c:	6909      	ldr	r1, [r1, #16]
 800593e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005942:	eba3 0901 	sub.w	r9, r3, r1
 8005946:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800594a:	1c7b      	adds	r3, r7, #1
 800594c:	444b      	add	r3, r9
 800594e:	106d      	asrs	r5, r5, #1
 8005950:	429d      	cmp	r5, r3
 8005952:	bf38      	it	cc
 8005954:	461d      	movcc	r5, r3
 8005956:	0553      	lsls	r3, r2, #21
 8005958:	d527      	bpl.n	80059aa <__ssputs_r+0x8e>
 800595a:	4629      	mov	r1, r5
 800595c:	f7ff ff52 	bl	8005804 <_malloc_r>
 8005960:	4606      	mov	r6, r0
 8005962:	b360      	cbz	r0, 80059be <__ssputs_r+0xa2>
 8005964:	6921      	ldr	r1, [r4, #16]
 8005966:	464a      	mov	r2, r9
 8005968:	f000 fae6 	bl	8005f38 <memcpy>
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005976:	81a3      	strh	r3, [r4, #12]
 8005978:	6126      	str	r6, [r4, #16]
 800597a:	6165      	str	r5, [r4, #20]
 800597c:	444e      	add	r6, r9
 800597e:	eba5 0509 	sub.w	r5, r5, r9
 8005982:	6026      	str	r6, [r4, #0]
 8005984:	60a5      	str	r5, [r4, #8]
 8005986:	463e      	mov	r6, r7
 8005988:	42be      	cmp	r6, r7
 800598a:	d900      	bls.n	800598e <__ssputs_r+0x72>
 800598c:	463e      	mov	r6, r7
 800598e:	6820      	ldr	r0, [r4, #0]
 8005990:	4632      	mov	r2, r6
 8005992:	4641      	mov	r1, r8
 8005994:	f000 faa6 	bl	8005ee4 <memmove>
 8005998:	68a3      	ldr	r3, [r4, #8]
 800599a:	1b9b      	subs	r3, r3, r6
 800599c:	60a3      	str	r3, [r4, #8]
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	4433      	add	r3, r6
 80059a2:	6023      	str	r3, [r4, #0]
 80059a4:	2000      	movs	r0, #0
 80059a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059aa:	462a      	mov	r2, r5
 80059ac:	f000 fad2 	bl	8005f54 <_realloc_r>
 80059b0:	4606      	mov	r6, r0
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d1e0      	bne.n	8005978 <__ssputs_r+0x5c>
 80059b6:	6921      	ldr	r1, [r4, #16]
 80059b8:	4650      	mov	r0, sl
 80059ba:	f7ff feb7 	bl	800572c <_free_r>
 80059be:	230c      	movs	r3, #12
 80059c0:	f8ca 3000 	str.w	r3, [sl]
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059ca:	81a3      	strh	r3, [r4, #12]
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295
 80059d0:	e7e9      	b.n	80059a6 <__ssputs_r+0x8a>
	...

080059d4 <_svfiprintf_r>:
 80059d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d8:	4698      	mov	r8, r3
 80059da:	898b      	ldrh	r3, [r1, #12]
 80059dc:	061b      	lsls	r3, r3, #24
 80059de:	b09d      	sub	sp, #116	@ 0x74
 80059e0:	4607      	mov	r7, r0
 80059e2:	460d      	mov	r5, r1
 80059e4:	4614      	mov	r4, r2
 80059e6:	d510      	bpl.n	8005a0a <_svfiprintf_r+0x36>
 80059e8:	690b      	ldr	r3, [r1, #16]
 80059ea:	b973      	cbnz	r3, 8005a0a <_svfiprintf_r+0x36>
 80059ec:	2140      	movs	r1, #64	@ 0x40
 80059ee:	f7ff ff09 	bl	8005804 <_malloc_r>
 80059f2:	6028      	str	r0, [r5, #0]
 80059f4:	6128      	str	r0, [r5, #16]
 80059f6:	b930      	cbnz	r0, 8005a06 <_svfiprintf_r+0x32>
 80059f8:	230c      	movs	r3, #12
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005a00:	b01d      	add	sp, #116	@ 0x74
 8005a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a06:	2340      	movs	r3, #64	@ 0x40
 8005a08:	616b      	str	r3, [r5, #20]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a0e:	2320      	movs	r3, #32
 8005a10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a18:	2330      	movs	r3, #48	@ 0x30
 8005a1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005bb8 <_svfiprintf_r+0x1e4>
 8005a1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a22:	f04f 0901 	mov.w	r9, #1
 8005a26:	4623      	mov	r3, r4
 8005a28:	469a      	mov	sl, r3
 8005a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a2e:	b10a      	cbz	r2, 8005a34 <_svfiprintf_r+0x60>
 8005a30:	2a25      	cmp	r2, #37	@ 0x25
 8005a32:	d1f9      	bne.n	8005a28 <_svfiprintf_r+0x54>
 8005a34:	ebba 0b04 	subs.w	fp, sl, r4
 8005a38:	d00b      	beq.n	8005a52 <_svfiprintf_r+0x7e>
 8005a3a:	465b      	mov	r3, fp
 8005a3c:	4622      	mov	r2, r4
 8005a3e:	4629      	mov	r1, r5
 8005a40:	4638      	mov	r0, r7
 8005a42:	f7ff ff6b 	bl	800591c <__ssputs_r>
 8005a46:	3001      	adds	r0, #1
 8005a48:	f000 80a7 	beq.w	8005b9a <_svfiprintf_r+0x1c6>
 8005a4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a4e:	445a      	add	r2, fp
 8005a50:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a52:	f89a 3000 	ldrb.w	r3, [sl]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 809f 	beq.w	8005b9a <_svfiprintf_r+0x1c6>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a66:	f10a 0a01 	add.w	sl, sl, #1
 8005a6a:	9304      	str	r3, [sp, #16]
 8005a6c:	9307      	str	r3, [sp, #28]
 8005a6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a72:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a74:	4654      	mov	r4, sl
 8005a76:	2205      	movs	r2, #5
 8005a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a7c:	484e      	ldr	r0, [pc, #312]	@ (8005bb8 <_svfiprintf_r+0x1e4>)
 8005a7e:	f7fa fbcf 	bl	8000220 <memchr>
 8005a82:	9a04      	ldr	r2, [sp, #16]
 8005a84:	b9d8      	cbnz	r0, 8005abe <_svfiprintf_r+0xea>
 8005a86:	06d0      	lsls	r0, r2, #27
 8005a88:	bf44      	itt	mi
 8005a8a:	2320      	movmi	r3, #32
 8005a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a90:	0711      	lsls	r1, r2, #28
 8005a92:	bf44      	itt	mi
 8005a94:	232b      	movmi	r3, #43	@ 0x2b
 8005a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aa0:	d015      	beq.n	8005ace <_svfiprintf_r+0xfa>
 8005aa2:	9a07      	ldr	r2, [sp, #28]
 8005aa4:	4654      	mov	r4, sl
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	f04f 0c0a 	mov.w	ip, #10
 8005aac:	4621      	mov	r1, r4
 8005aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ab2:	3b30      	subs	r3, #48	@ 0x30
 8005ab4:	2b09      	cmp	r3, #9
 8005ab6:	d94b      	bls.n	8005b50 <_svfiprintf_r+0x17c>
 8005ab8:	b1b0      	cbz	r0, 8005ae8 <_svfiprintf_r+0x114>
 8005aba:	9207      	str	r2, [sp, #28]
 8005abc:	e014      	b.n	8005ae8 <_svfiprintf_r+0x114>
 8005abe:	eba0 0308 	sub.w	r3, r0, r8
 8005ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	9304      	str	r3, [sp, #16]
 8005aca:	46a2      	mov	sl, r4
 8005acc:	e7d2      	b.n	8005a74 <_svfiprintf_r+0xa0>
 8005ace:	9b03      	ldr	r3, [sp, #12]
 8005ad0:	1d19      	adds	r1, r3, #4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	9103      	str	r1, [sp, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bfbb      	ittet	lt
 8005ada:	425b      	neglt	r3, r3
 8005adc:	f042 0202 	orrlt.w	r2, r2, #2
 8005ae0:	9307      	strge	r3, [sp, #28]
 8005ae2:	9307      	strlt	r3, [sp, #28]
 8005ae4:	bfb8      	it	lt
 8005ae6:	9204      	strlt	r2, [sp, #16]
 8005ae8:	7823      	ldrb	r3, [r4, #0]
 8005aea:	2b2e      	cmp	r3, #46	@ 0x2e
 8005aec:	d10a      	bne.n	8005b04 <_svfiprintf_r+0x130>
 8005aee:	7863      	ldrb	r3, [r4, #1]
 8005af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005af2:	d132      	bne.n	8005b5a <_svfiprintf_r+0x186>
 8005af4:	9b03      	ldr	r3, [sp, #12]
 8005af6:	1d1a      	adds	r2, r3, #4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	9203      	str	r2, [sp, #12]
 8005afc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b00:	3402      	adds	r4, #2
 8005b02:	9305      	str	r3, [sp, #20]
 8005b04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005bc8 <_svfiprintf_r+0x1f4>
 8005b08:	7821      	ldrb	r1, [r4, #0]
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	4650      	mov	r0, sl
 8005b0e:	f7fa fb87 	bl	8000220 <memchr>
 8005b12:	b138      	cbz	r0, 8005b24 <_svfiprintf_r+0x150>
 8005b14:	9b04      	ldr	r3, [sp, #16]
 8005b16:	eba0 000a 	sub.w	r0, r0, sl
 8005b1a:	2240      	movs	r2, #64	@ 0x40
 8005b1c:	4082      	lsls	r2, r0
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	3401      	adds	r4, #1
 8005b22:	9304      	str	r3, [sp, #16]
 8005b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b28:	4824      	ldr	r0, [pc, #144]	@ (8005bbc <_svfiprintf_r+0x1e8>)
 8005b2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b2e:	2206      	movs	r2, #6
 8005b30:	f7fa fb76 	bl	8000220 <memchr>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d036      	beq.n	8005ba6 <_svfiprintf_r+0x1d2>
 8005b38:	4b21      	ldr	r3, [pc, #132]	@ (8005bc0 <_svfiprintf_r+0x1ec>)
 8005b3a:	bb1b      	cbnz	r3, 8005b84 <_svfiprintf_r+0x1b0>
 8005b3c:	9b03      	ldr	r3, [sp, #12]
 8005b3e:	3307      	adds	r3, #7
 8005b40:	f023 0307 	bic.w	r3, r3, #7
 8005b44:	3308      	adds	r3, #8
 8005b46:	9303      	str	r3, [sp, #12]
 8005b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b4a:	4433      	add	r3, r6
 8005b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b4e:	e76a      	b.n	8005a26 <_svfiprintf_r+0x52>
 8005b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b54:	460c      	mov	r4, r1
 8005b56:	2001      	movs	r0, #1
 8005b58:	e7a8      	b.n	8005aac <_svfiprintf_r+0xd8>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	3401      	adds	r4, #1
 8005b5e:	9305      	str	r3, [sp, #20]
 8005b60:	4619      	mov	r1, r3
 8005b62:	f04f 0c0a 	mov.w	ip, #10
 8005b66:	4620      	mov	r0, r4
 8005b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b6c:	3a30      	subs	r2, #48	@ 0x30
 8005b6e:	2a09      	cmp	r2, #9
 8005b70:	d903      	bls.n	8005b7a <_svfiprintf_r+0x1a6>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0c6      	beq.n	8005b04 <_svfiprintf_r+0x130>
 8005b76:	9105      	str	r1, [sp, #20]
 8005b78:	e7c4      	b.n	8005b04 <_svfiprintf_r+0x130>
 8005b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b7e:	4604      	mov	r4, r0
 8005b80:	2301      	movs	r3, #1
 8005b82:	e7f0      	b.n	8005b66 <_svfiprintf_r+0x192>
 8005b84:	ab03      	add	r3, sp, #12
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	462a      	mov	r2, r5
 8005b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc4 <_svfiprintf_r+0x1f0>)
 8005b8c:	a904      	add	r1, sp, #16
 8005b8e:	4638      	mov	r0, r7
 8005b90:	f3af 8000 	nop.w
 8005b94:	1c42      	adds	r2, r0, #1
 8005b96:	4606      	mov	r6, r0
 8005b98:	d1d6      	bne.n	8005b48 <_svfiprintf_r+0x174>
 8005b9a:	89ab      	ldrh	r3, [r5, #12]
 8005b9c:	065b      	lsls	r3, r3, #25
 8005b9e:	f53f af2d 	bmi.w	80059fc <_svfiprintf_r+0x28>
 8005ba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ba4:	e72c      	b.n	8005a00 <_svfiprintf_r+0x2c>
 8005ba6:	ab03      	add	r3, sp, #12
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	462a      	mov	r2, r5
 8005bac:	4b05      	ldr	r3, [pc, #20]	@ (8005bc4 <_svfiprintf_r+0x1f0>)
 8005bae:	a904      	add	r1, sp, #16
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	f000 f879 	bl	8005ca8 <_printf_i>
 8005bb6:	e7ed      	b.n	8005b94 <_svfiprintf_r+0x1c0>
 8005bb8:	08006024 	.word	0x08006024
 8005bbc:	0800602e 	.word	0x0800602e
 8005bc0:	00000000 	.word	0x00000000
 8005bc4:	0800591d 	.word	0x0800591d
 8005bc8:	0800602a 	.word	0x0800602a

08005bcc <_printf_common>:
 8005bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd0:	4616      	mov	r6, r2
 8005bd2:	4698      	mov	r8, r3
 8005bd4:	688a      	ldr	r2, [r1, #8]
 8005bd6:	690b      	ldr	r3, [r1, #16]
 8005bd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	bfb8      	it	lt
 8005be0:	4613      	movlt	r3, r2
 8005be2:	6033      	str	r3, [r6, #0]
 8005be4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005be8:	4607      	mov	r7, r0
 8005bea:	460c      	mov	r4, r1
 8005bec:	b10a      	cbz	r2, 8005bf2 <_printf_common+0x26>
 8005bee:	3301      	adds	r3, #1
 8005bf0:	6033      	str	r3, [r6, #0]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	0699      	lsls	r1, r3, #26
 8005bf6:	bf42      	ittt	mi
 8005bf8:	6833      	ldrmi	r3, [r6, #0]
 8005bfa:	3302      	addmi	r3, #2
 8005bfc:	6033      	strmi	r3, [r6, #0]
 8005bfe:	6825      	ldr	r5, [r4, #0]
 8005c00:	f015 0506 	ands.w	r5, r5, #6
 8005c04:	d106      	bne.n	8005c14 <_printf_common+0x48>
 8005c06:	f104 0a19 	add.w	sl, r4, #25
 8005c0a:	68e3      	ldr	r3, [r4, #12]
 8005c0c:	6832      	ldr	r2, [r6, #0]
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	42ab      	cmp	r3, r5
 8005c12:	dc26      	bgt.n	8005c62 <_printf_common+0x96>
 8005c14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c18:	6822      	ldr	r2, [r4, #0]
 8005c1a:	3b00      	subs	r3, #0
 8005c1c:	bf18      	it	ne
 8005c1e:	2301      	movne	r3, #1
 8005c20:	0692      	lsls	r2, r2, #26
 8005c22:	d42b      	bmi.n	8005c7c <_printf_common+0xb0>
 8005c24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c28:	4641      	mov	r1, r8
 8005c2a:	4638      	mov	r0, r7
 8005c2c:	47c8      	blx	r9
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d01e      	beq.n	8005c70 <_printf_common+0xa4>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	6922      	ldr	r2, [r4, #16]
 8005c36:	f003 0306 	and.w	r3, r3, #6
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	bf02      	ittt	eq
 8005c3e:	68e5      	ldreq	r5, [r4, #12]
 8005c40:	6833      	ldreq	r3, [r6, #0]
 8005c42:	1aed      	subeq	r5, r5, r3
 8005c44:	68a3      	ldr	r3, [r4, #8]
 8005c46:	bf0c      	ite	eq
 8005c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c4c:	2500      	movne	r5, #0
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	bfc4      	itt	gt
 8005c52:	1a9b      	subgt	r3, r3, r2
 8005c54:	18ed      	addgt	r5, r5, r3
 8005c56:	2600      	movs	r6, #0
 8005c58:	341a      	adds	r4, #26
 8005c5a:	42b5      	cmp	r5, r6
 8005c5c:	d11a      	bne.n	8005c94 <_printf_common+0xc8>
 8005c5e:	2000      	movs	r0, #0
 8005c60:	e008      	b.n	8005c74 <_printf_common+0xa8>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4652      	mov	r2, sl
 8005c66:	4641      	mov	r1, r8
 8005c68:	4638      	mov	r0, r7
 8005c6a:	47c8      	blx	r9
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d103      	bne.n	8005c78 <_printf_common+0xac>
 8005c70:	f04f 30ff 	mov.w	r0, #4294967295
 8005c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c78:	3501      	adds	r5, #1
 8005c7a:	e7c6      	b.n	8005c0a <_printf_common+0x3e>
 8005c7c:	18e1      	adds	r1, r4, r3
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	2030      	movs	r0, #48	@ 0x30
 8005c82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c86:	4422      	add	r2, r4
 8005c88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c90:	3302      	adds	r3, #2
 8005c92:	e7c7      	b.n	8005c24 <_printf_common+0x58>
 8005c94:	2301      	movs	r3, #1
 8005c96:	4622      	mov	r2, r4
 8005c98:	4641      	mov	r1, r8
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	47c8      	blx	r9
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d0e6      	beq.n	8005c70 <_printf_common+0xa4>
 8005ca2:	3601      	adds	r6, #1
 8005ca4:	e7d9      	b.n	8005c5a <_printf_common+0x8e>
	...

08005ca8 <_printf_i>:
 8005ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cac:	7e0f      	ldrb	r7, [r1, #24]
 8005cae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cb0:	2f78      	cmp	r7, #120	@ 0x78
 8005cb2:	4691      	mov	r9, r2
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	469a      	mov	sl, r3
 8005cba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cbe:	d807      	bhi.n	8005cd0 <_printf_i+0x28>
 8005cc0:	2f62      	cmp	r7, #98	@ 0x62
 8005cc2:	d80a      	bhi.n	8005cda <_printf_i+0x32>
 8005cc4:	2f00      	cmp	r7, #0
 8005cc6:	f000 80d1 	beq.w	8005e6c <_printf_i+0x1c4>
 8005cca:	2f58      	cmp	r7, #88	@ 0x58
 8005ccc:	f000 80b8 	beq.w	8005e40 <_printf_i+0x198>
 8005cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cd8:	e03a      	b.n	8005d50 <_printf_i+0xa8>
 8005cda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cde:	2b15      	cmp	r3, #21
 8005ce0:	d8f6      	bhi.n	8005cd0 <_printf_i+0x28>
 8005ce2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ce8 <_printf_i+0x40>)
 8005ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ce8:	08005d41 	.word	0x08005d41
 8005cec:	08005d55 	.word	0x08005d55
 8005cf0:	08005cd1 	.word	0x08005cd1
 8005cf4:	08005cd1 	.word	0x08005cd1
 8005cf8:	08005cd1 	.word	0x08005cd1
 8005cfc:	08005cd1 	.word	0x08005cd1
 8005d00:	08005d55 	.word	0x08005d55
 8005d04:	08005cd1 	.word	0x08005cd1
 8005d08:	08005cd1 	.word	0x08005cd1
 8005d0c:	08005cd1 	.word	0x08005cd1
 8005d10:	08005cd1 	.word	0x08005cd1
 8005d14:	08005e53 	.word	0x08005e53
 8005d18:	08005d7f 	.word	0x08005d7f
 8005d1c:	08005e0d 	.word	0x08005e0d
 8005d20:	08005cd1 	.word	0x08005cd1
 8005d24:	08005cd1 	.word	0x08005cd1
 8005d28:	08005e75 	.word	0x08005e75
 8005d2c:	08005cd1 	.word	0x08005cd1
 8005d30:	08005d7f 	.word	0x08005d7f
 8005d34:	08005cd1 	.word	0x08005cd1
 8005d38:	08005cd1 	.word	0x08005cd1
 8005d3c:	08005e15 	.word	0x08005e15
 8005d40:	6833      	ldr	r3, [r6, #0]
 8005d42:	1d1a      	adds	r2, r3, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6032      	str	r2, [r6, #0]
 8005d48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d50:	2301      	movs	r3, #1
 8005d52:	e09c      	b.n	8005e8e <_printf_i+0x1e6>
 8005d54:	6833      	ldr	r3, [r6, #0]
 8005d56:	6820      	ldr	r0, [r4, #0]
 8005d58:	1d19      	adds	r1, r3, #4
 8005d5a:	6031      	str	r1, [r6, #0]
 8005d5c:	0606      	lsls	r6, r0, #24
 8005d5e:	d501      	bpl.n	8005d64 <_printf_i+0xbc>
 8005d60:	681d      	ldr	r5, [r3, #0]
 8005d62:	e003      	b.n	8005d6c <_printf_i+0xc4>
 8005d64:	0645      	lsls	r5, r0, #25
 8005d66:	d5fb      	bpl.n	8005d60 <_printf_i+0xb8>
 8005d68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d6c:	2d00      	cmp	r5, #0
 8005d6e:	da03      	bge.n	8005d78 <_printf_i+0xd0>
 8005d70:	232d      	movs	r3, #45	@ 0x2d
 8005d72:	426d      	negs	r5, r5
 8005d74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d78:	4858      	ldr	r0, [pc, #352]	@ (8005edc <_printf_i+0x234>)
 8005d7a:	230a      	movs	r3, #10
 8005d7c:	e011      	b.n	8005da2 <_printf_i+0xfa>
 8005d7e:	6821      	ldr	r1, [r4, #0]
 8005d80:	6833      	ldr	r3, [r6, #0]
 8005d82:	0608      	lsls	r0, r1, #24
 8005d84:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d88:	d402      	bmi.n	8005d90 <_printf_i+0xe8>
 8005d8a:	0649      	lsls	r1, r1, #25
 8005d8c:	bf48      	it	mi
 8005d8e:	b2ad      	uxthmi	r5, r5
 8005d90:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d92:	4852      	ldr	r0, [pc, #328]	@ (8005edc <_printf_i+0x234>)
 8005d94:	6033      	str	r3, [r6, #0]
 8005d96:	bf14      	ite	ne
 8005d98:	230a      	movne	r3, #10
 8005d9a:	2308      	moveq	r3, #8
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005da2:	6866      	ldr	r6, [r4, #4]
 8005da4:	60a6      	str	r6, [r4, #8]
 8005da6:	2e00      	cmp	r6, #0
 8005da8:	db05      	blt.n	8005db6 <_printf_i+0x10e>
 8005daa:	6821      	ldr	r1, [r4, #0]
 8005dac:	432e      	orrs	r6, r5
 8005dae:	f021 0104 	bic.w	r1, r1, #4
 8005db2:	6021      	str	r1, [r4, #0]
 8005db4:	d04b      	beq.n	8005e4e <_printf_i+0x1a6>
 8005db6:	4616      	mov	r6, r2
 8005db8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dbc:	fb03 5711 	mls	r7, r3, r1, r5
 8005dc0:	5dc7      	ldrb	r7, [r0, r7]
 8005dc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dc6:	462f      	mov	r7, r5
 8005dc8:	42bb      	cmp	r3, r7
 8005dca:	460d      	mov	r5, r1
 8005dcc:	d9f4      	bls.n	8005db8 <_printf_i+0x110>
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d10b      	bne.n	8005dea <_printf_i+0x142>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	07df      	lsls	r7, r3, #31
 8005dd6:	d508      	bpl.n	8005dea <_printf_i+0x142>
 8005dd8:	6923      	ldr	r3, [r4, #16]
 8005dda:	6861      	ldr	r1, [r4, #4]
 8005ddc:	4299      	cmp	r1, r3
 8005dde:	bfde      	ittt	le
 8005de0:	2330      	movle	r3, #48	@ 0x30
 8005de2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005de6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dea:	1b92      	subs	r2, r2, r6
 8005dec:	6122      	str	r2, [r4, #16]
 8005dee:	f8cd a000 	str.w	sl, [sp]
 8005df2:	464b      	mov	r3, r9
 8005df4:	aa03      	add	r2, sp, #12
 8005df6:	4621      	mov	r1, r4
 8005df8:	4640      	mov	r0, r8
 8005dfa:	f7ff fee7 	bl	8005bcc <_printf_common>
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d14a      	bne.n	8005e98 <_printf_i+0x1f0>
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295
 8005e06:	b004      	add	sp, #16
 8005e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	f043 0320 	orr.w	r3, r3, #32
 8005e12:	6023      	str	r3, [r4, #0]
 8005e14:	4832      	ldr	r0, [pc, #200]	@ (8005ee0 <_printf_i+0x238>)
 8005e16:	2778      	movs	r7, #120	@ 0x78
 8005e18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	6831      	ldr	r1, [r6, #0]
 8005e20:	061f      	lsls	r7, r3, #24
 8005e22:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e26:	d402      	bmi.n	8005e2e <_printf_i+0x186>
 8005e28:	065f      	lsls	r7, r3, #25
 8005e2a:	bf48      	it	mi
 8005e2c:	b2ad      	uxthmi	r5, r5
 8005e2e:	6031      	str	r1, [r6, #0]
 8005e30:	07d9      	lsls	r1, r3, #31
 8005e32:	bf44      	itt	mi
 8005e34:	f043 0320 	orrmi.w	r3, r3, #32
 8005e38:	6023      	strmi	r3, [r4, #0]
 8005e3a:	b11d      	cbz	r5, 8005e44 <_printf_i+0x19c>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	e7ad      	b.n	8005d9c <_printf_i+0xf4>
 8005e40:	4826      	ldr	r0, [pc, #152]	@ (8005edc <_printf_i+0x234>)
 8005e42:	e7e9      	b.n	8005e18 <_printf_i+0x170>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	f023 0320 	bic.w	r3, r3, #32
 8005e4a:	6023      	str	r3, [r4, #0]
 8005e4c:	e7f6      	b.n	8005e3c <_printf_i+0x194>
 8005e4e:	4616      	mov	r6, r2
 8005e50:	e7bd      	b.n	8005dce <_printf_i+0x126>
 8005e52:	6833      	ldr	r3, [r6, #0]
 8005e54:	6825      	ldr	r5, [r4, #0]
 8005e56:	6961      	ldr	r1, [r4, #20]
 8005e58:	1d18      	adds	r0, r3, #4
 8005e5a:	6030      	str	r0, [r6, #0]
 8005e5c:	062e      	lsls	r6, r5, #24
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	d501      	bpl.n	8005e66 <_printf_i+0x1be>
 8005e62:	6019      	str	r1, [r3, #0]
 8005e64:	e002      	b.n	8005e6c <_printf_i+0x1c4>
 8005e66:	0668      	lsls	r0, r5, #25
 8005e68:	d5fb      	bpl.n	8005e62 <_printf_i+0x1ba>
 8005e6a:	8019      	strh	r1, [r3, #0]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	6123      	str	r3, [r4, #16]
 8005e70:	4616      	mov	r6, r2
 8005e72:	e7bc      	b.n	8005dee <_printf_i+0x146>
 8005e74:	6833      	ldr	r3, [r6, #0]
 8005e76:	1d1a      	adds	r2, r3, #4
 8005e78:	6032      	str	r2, [r6, #0]
 8005e7a:	681e      	ldr	r6, [r3, #0]
 8005e7c:	6862      	ldr	r2, [r4, #4]
 8005e7e:	2100      	movs	r1, #0
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7fa f9cd 	bl	8000220 <memchr>
 8005e86:	b108      	cbz	r0, 8005e8c <_printf_i+0x1e4>
 8005e88:	1b80      	subs	r0, r0, r6
 8005e8a:	6060      	str	r0, [r4, #4]
 8005e8c:	6863      	ldr	r3, [r4, #4]
 8005e8e:	6123      	str	r3, [r4, #16]
 8005e90:	2300      	movs	r3, #0
 8005e92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e96:	e7aa      	b.n	8005dee <_printf_i+0x146>
 8005e98:	6923      	ldr	r3, [r4, #16]
 8005e9a:	4632      	mov	r2, r6
 8005e9c:	4649      	mov	r1, r9
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	47d0      	blx	sl
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	d0ad      	beq.n	8005e02 <_printf_i+0x15a>
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	079b      	lsls	r3, r3, #30
 8005eaa:	d413      	bmi.n	8005ed4 <_printf_i+0x22c>
 8005eac:	68e0      	ldr	r0, [r4, #12]
 8005eae:	9b03      	ldr	r3, [sp, #12]
 8005eb0:	4298      	cmp	r0, r3
 8005eb2:	bfb8      	it	lt
 8005eb4:	4618      	movlt	r0, r3
 8005eb6:	e7a6      	b.n	8005e06 <_printf_i+0x15e>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4632      	mov	r2, r6
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	47d0      	blx	sl
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d09d      	beq.n	8005e02 <_printf_i+0x15a>
 8005ec6:	3501      	adds	r5, #1
 8005ec8:	68e3      	ldr	r3, [r4, #12]
 8005eca:	9903      	ldr	r1, [sp, #12]
 8005ecc:	1a5b      	subs	r3, r3, r1
 8005ece:	42ab      	cmp	r3, r5
 8005ed0:	dcf2      	bgt.n	8005eb8 <_printf_i+0x210>
 8005ed2:	e7eb      	b.n	8005eac <_printf_i+0x204>
 8005ed4:	2500      	movs	r5, #0
 8005ed6:	f104 0619 	add.w	r6, r4, #25
 8005eda:	e7f5      	b.n	8005ec8 <_printf_i+0x220>
 8005edc:	08006035 	.word	0x08006035
 8005ee0:	08006046 	.word	0x08006046

08005ee4 <memmove>:
 8005ee4:	4288      	cmp	r0, r1
 8005ee6:	b510      	push	{r4, lr}
 8005ee8:	eb01 0402 	add.w	r4, r1, r2
 8005eec:	d902      	bls.n	8005ef4 <memmove+0x10>
 8005eee:	4284      	cmp	r4, r0
 8005ef0:	4623      	mov	r3, r4
 8005ef2:	d807      	bhi.n	8005f04 <memmove+0x20>
 8005ef4:	1e43      	subs	r3, r0, #1
 8005ef6:	42a1      	cmp	r1, r4
 8005ef8:	d008      	beq.n	8005f0c <memmove+0x28>
 8005efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f02:	e7f8      	b.n	8005ef6 <memmove+0x12>
 8005f04:	4402      	add	r2, r0
 8005f06:	4601      	mov	r1, r0
 8005f08:	428a      	cmp	r2, r1
 8005f0a:	d100      	bne.n	8005f0e <memmove+0x2a>
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f16:	e7f7      	b.n	8005f08 <memmove+0x24>

08005f18 <_sbrk_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4d06      	ldr	r5, [pc, #24]	@ (8005f34 <_sbrk_r+0x1c>)
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4604      	mov	r4, r0
 8005f20:	4608      	mov	r0, r1
 8005f22:	602b      	str	r3, [r5, #0]
 8005f24:	f7fa ff56 	bl	8000dd4 <_sbrk>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d102      	bne.n	8005f32 <_sbrk_r+0x1a>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	b103      	cbz	r3, 8005f32 <_sbrk_r+0x1a>
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	bd38      	pop	{r3, r4, r5, pc}
 8005f34:	20000300 	.word	0x20000300

08005f38 <memcpy>:
 8005f38:	440a      	add	r2, r1
 8005f3a:	4291      	cmp	r1, r2
 8005f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f40:	d100      	bne.n	8005f44 <memcpy+0xc>
 8005f42:	4770      	bx	lr
 8005f44:	b510      	push	{r4, lr}
 8005f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f4e:	4291      	cmp	r1, r2
 8005f50:	d1f9      	bne.n	8005f46 <memcpy+0xe>
 8005f52:	bd10      	pop	{r4, pc}

08005f54 <_realloc_r>:
 8005f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f58:	4607      	mov	r7, r0
 8005f5a:	4614      	mov	r4, r2
 8005f5c:	460d      	mov	r5, r1
 8005f5e:	b921      	cbnz	r1, 8005f6a <_realloc_r+0x16>
 8005f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f64:	4611      	mov	r1, r2
 8005f66:	f7ff bc4d 	b.w	8005804 <_malloc_r>
 8005f6a:	b92a      	cbnz	r2, 8005f78 <_realloc_r+0x24>
 8005f6c:	f7ff fbde 	bl	800572c <_free_r>
 8005f70:	4625      	mov	r5, r4
 8005f72:	4628      	mov	r0, r5
 8005f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f78:	f000 f81a 	bl	8005fb0 <_malloc_usable_size_r>
 8005f7c:	4284      	cmp	r4, r0
 8005f7e:	4606      	mov	r6, r0
 8005f80:	d802      	bhi.n	8005f88 <_realloc_r+0x34>
 8005f82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f86:	d8f4      	bhi.n	8005f72 <_realloc_r+0x1e>
 8005f88:	4621      	mov	r1, r4
 8005f8a:	4638      	mov	r0, r7
 8005f8c:	f7ff fc3a 	bl	8005804 <_malloc_r>
 8005f90:	4680      	mov	r8, r0
 8005f92:	b908      	cbnz	r0, 8005f98 <_realloc_r+0x44>
 8005f94:	4645      	mov	r5, r8
 8005f96:	e7ec      	b.n	8005f72 <_realloc_r+0x1e>
 8005f98:	42b4      	cmp	r4, r6
 8005f9a:	4622      	mov	r2, r4
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	bf28      	it	cs
 8005fa0:	4632      	movcs	r2, r6
 8005fa2:	f7ff ffc9 	bl	8005f38 <memcpy>
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	4638      	mov	r0, r7
 8005faa:	f7ff fbbf 	bl	800572c <_free_r>
 8005fae:	e7f1      	b.n	8005f94 <_realloc_r+0x40>

08005fb0 <_malloc_usable_size_r>:
 8005fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fb4:	1f18      	subs	r0, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	bfbc      	itt	lt
 8005fba:	580b      	ldrlt	r3, [r1, r0]
 8005fbc:	18c0      	addlt	r0, r0, r3
 8005fbe:	4770      	bx	lr

08005fc0 <_init>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr

08005fcc <_fini>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	bf00      	nop
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr
